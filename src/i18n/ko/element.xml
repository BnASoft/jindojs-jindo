<comments name="element">
  <comment id="title"><![CDATA[
	@fileOverview $Element의 생성자 및 메서드를 정의한 파일
	@name element.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	jindo.$Element() 객체는 HTML 요소를 래핑(wrapping)하며, 해당 요소를 좀 더 쉽게 다룰 수 있는 기능을 제공한다.
	
	@class jindo.$Element
	@keyword element, 엘리먼트
  ]]></comment>
  <comment id="constructor"><![CDATA[
	jindo.$Element() 객체를 생성한다.
	 
	@constructor
	@param {Variant} vElement jindo.$Element() 객체 생성자는 문자열(String), HTML 요소(Element+|Node|Document+|Window+), 또는 jindo.$Element() 객체를 파라미터로 지정할 수 있다.<br>
		<ul class="disc">
			<li>파라미터가 문자열이면 두 가지 방식으로 동작한다.
				<ul class="disc">
					<li>만일 "&lt;tagName&gt;"과 같은 형식의 문자열이면 tagName을 가지는 객체를 생성한다.</li>
					<li>그 이외의 경우 지정한 문자열을 ID로 갖는 HTML 요소를 사용하여 jindo.$Element() 객체를 생성한다.</li>
				</ul>
			</li>
			<li>파라미터가 HTML 요소이면 해당 요소를 래핑하여 $Element() 를 생성한다.</li>
			<li>파라미터가 $Element()이면 전달된 파라미터를 그대로 반환한다.</li>
			<li>파라미터가 undefined 혹은 null인 경우 null을 반환한다.</li>
		</ul>
	@return {jindo.$Element} 생성된 jindo.$Element() 객체.
	@example
		var element = $Element($("box")); // HTML 요소를 파라미터로 지정
		var element = $Element("box"); // HTML 요소의 id를 파라미터로 지정
		var element = $Element("<div>"); // 태그를 파라미터로 지정, DIV 엘리먼트를 생성하여 래핑함
  ]]></comment>
  <comment id="sign_eventBind"><![CDATA[
	@method _eventBind
	@ignore
  ]]></comment>
  <comment id="sign_unEventBind"><![CDATA[
	@method _unEventBind
	@ignore
  ]]></comment>
  <comment id="sign_value"><![CDATA[
	$value() 메서드는 원래의 HTML 요소를 반환한다.
	
	@method $value
	@return {Element} jindo.$Element() 객체가 감싸고 있는 원본 요소.
	@see jindo.$Element
	@example
		var element = $Element("sample_div");
		element.$value(); // 원래의 엘리먼트가 반환된다.
  ]]></comment>
  <comment id="visible"><![CDATA[
	visible() 메서드는 HTML 요소의 display 속성을 조회한다.
	
	@method visible
	@return {Boolean} display 여부. display 속성이 none이면 false 값을 반환한다.
	@example
		<div id="sample_div" style="display:none">Hello world</div>
		
		// 조회
		$Element("sample_div").visible(); // false
  ]]></comment>
  <comment id="visible2"><![CDATA[
	visible() 메서드는 HTML 요소의 display 속성을 설정한다.
	
	@method visible
	@param {Boolean} bVisible 해당 요소의 표시 여부.<br>입력한 파라미터가 true인 경우 display 속성을 설정하고, false인 경우에는 display 속성을 none으로 변경한다. Boolean이 아닌 값이 들어온 경우는 ToBoolean한 결과를 기준으로 변경한다.
	@param {String+} sDisplay 해당 요소의 display 속성 값.<br>bVisible 파라미터가 true 이면 sDisplay 값을 display 속성으로 설정한다.
	@return {this} display 속성을 변경한 인스턴스 자신
	@remark 
		<ul class="disc">
			<li>1.1.2 버전부터 bVisible 파라미터를 사용할 수 있다.</li>
			<li>1.4.5 버전부터 sDisplay 파라미터를 사용할 수 있다.</li>
		</ul>
	@see http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html#display-prop display 속성 - W3C CSS2 Specification
	@see jindo.$Element#show
	@see jindo.$Element#hide
	@see jindo.$Element#toggle
	@example
		// 화면에 보이도록 설정
		$Element("sample_div").visible(true, 'block');
		
		//Before
		<div id="sample_div" style="display:none">Hello world</div>
		
		//After
		<div id="sample_div" style="display:block">Hello world</div>
  ]]></comment>
  <comment id="show"><![CDATA[
	show() 메서드는 HTML 요소가 화면에 보이도록 display 속성을 변경한다.
	
	@method show
	@param {String+} [sDisplay] display 속성에 지정할 값.<br>파라미터를 생략하면 태그별로 미리 지정된 기본값이 속성 값으로 설정된다. 미리 지정된 기본값이 없으면 "inline"으로 설정된다. 에러가 발생한 경우는 "block"으로 설정된다.
	@return {this} display 속성을 변경한 인스턴스 자신
	@remark 1.4.5 버전부터 sDisplay 파라미터를 사용할 수 있다.
	@see http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html#display-prop display 속성 - W3C CSS2 Specification
	@see jindo.$Element#hide
	@see jindo.$Element#toggle
	@see jindo.$Element#visible
	@example
		// 화면에 보이도록 설정
		$Element("sample_div").show();
		
		//Before
		<div id="sample_div" style="display:none">Hello world</div>
		
		//After
		<div id="sample_div" style="display:block">Hello world</div>
  ]]></comment>
  <comment id="show_1"><![CDATA[
IE에서 sDisplay값이 비정상적일때 block로 셋팅한다.
  ]]></comment>
  <comment id="hide"><![CDATA[
	hide() 메서드는 HTML 요소가 화면에 보이지 않도록 display 속성을 none으로 변경한다.
	
	@method hide
	@return {this} display 속성을 none으로 변경한 인스턴스 자신
	@see http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html#display-prop display 속성 - W3C CSS2 Specification
	@see jindo.$Element#show
	@see jindo.$Element#toggle
	@see jindo.$Element#visible
	@example
		// 화면에 보이지 않도록 설정
		$Element("sample_div").hide();
		
		//Before
		<div id="sample_div" style="display:block">Hello world</div>
		
		//After
		<div id="sample_div" style="display:none">Hello world</div>
  ]]></comment>
  <comment id="toggle"><![CDATA[
	toggle() 메서드는 HTML 요소의 display 속성을 변경하여 해당 요소를 화면에 보이거나, 보이지 않게 한다. 이 메서드는 마치 스위치를 켜고 끄는 것과 같이 요소의 표시 여부를 반전시킨다.
	
	@method toggle
	@param {String+} [sDisplay] 해당 요소가 보이도록 변경할 때 display 속성에 지정할 값. 파라미터를 생략하면 태그별로 미리 지정된 기본값이 속성 값으로 설정된다. 미리 지정된 기본값이 없으면 "inline"으로 설정된다.
	@return {this} display 속성을 변경한 인스턴스 자신
	@remark 1.4.5 버전부터 보이도록 설정할 때 sDisplay 값으로 display 속성 값 지정이 가능하다.
	@see http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html#display-prop display 속성 - W3C CSS2 Specification
	@see jindo.$Element#show
	@see jindo.$Element#hide
	@see jindo.$Element#visible
	@example
		// 화면에 보이거나, 보이지 않도록 처리
		$Element("sample_div1").toggle();
		$Element("sample_div2").toggle();
		
		//Before
		<div id="sample_div1" style="display:block">Hello</div>
		<div id="sample_div2" style="display:none">Good Bye</div>
		
		//After
		<div id="sample_div1" style="display:none">Hello</div>
		<div id="sample_div2" style="display:block">Good Bye</div>
  ]]></comment>
  <comment id="opacity"><![CDATA[
	opacity() 메서드는 HTML 요소의 투명도(opacity 속성) 값을 가져온다.
	
	@method opacity
	@return {Numeric} opacity값을 반환한다.
	@example
		<div id="sample" style="background-color:#2B81AF; width:20px; height:20px;"></div>
		
		// 조회
		$Element("sample").opacity();	// 1
  ]]></comment>
  <comment id="opacity2"><![CDATA[
	opacity() 메서드는 HTML 요소의 투명도(opacity 속성) 값을 설정한다.
	
	@method opacity
	@param {Variant} vValue 설정할 투명도 값(String|Numeric). 투명도 값은 0에서 1 사이의 실수 값으로 지정한다. 지정한 파라미터의 값이 0보다 작으면 0을, 1보다 크면 1을 설정한다. 빈문자열인 경우, 설정된 opacity 속성을 제거한다.
	@return {this} opacity 속성을 변경한 인스턴스 자신
	@example
		// 투명도 값 설정
		$Element("sample").opacity(0.4);
		
		//Before
		<div style="background-color: rgb(43, 129, 175); width: 20px; height: 20px;" id="sample"></div>
		
		//After
		<div style="background-color: rgb(43, 129, 175); width: 20px; height: 20px; opacity: 0.4;" id="sample"></div>
  ]]></comment>
  <comment id="opacity_1"><![CDATA[
IE에서 layout을 가지고 있지 않으면 opacity가 적용되지 않음.
  ]]></comment>
    <comment id="opacity_2"><![CDATA[
파라미터 값이 비어있는 문자인 경우, opacity 속성을 제거한다.
  ]]></comment>
  
  <comment id="hook"><![CDATA[
	hook() 메서드는 CSS명을 조회한다.
	@method hook
	@syntax vName
	@static
	@param {String+} vName CSS명(String)
	@remark 2.7.0부터 사용가능하다.
	@return {Variant} CSS를 나타내는 값 혹은 함수.
	@example
		$Element.hook("textShadow");
		//webkitTextShadow
	
  ]]></comment>
  <comment id="hook2"><![CDATA[
	hook() 메서드는 개발자가 CSS를 만들면 진도에서 해당 CSS가 들어왔을 때 변경하여 사용한다.
	@method hook
	@syntax vName, vValue
	@syntax oList
	@static
	@param {String+} vName CSS명(String)
	@param {Variant} vValue 변경할 CSS명(String|Function)
	@param {Hash+} oList 하나 이상의 CSS 명과 값을 가지는 객체(Object) 또는 해시 객체(jindo.$H() 객체).
	@remark 2.7.0부터 사용가능하다.
	@return {$Element} $Element
	
	
	@example
		$Element.hook("textShadow","webkitTextShadow");
		
		$Element("some").css("textShadow");
		//이렇게 하면 진도에서는 webkitTextShadow의 값을 반환.
	@example
		//함수도 할당할 수 있다.
		$Element.hook("textShadow",function(){
			if(isIE&&version>10){
				return "MsTextShadow";
			}else if(isSafari){
				return "webkitTextShadow";
			}else{
				return "textShadow";
			}
		});
		
		$Element("some").css("textShadow");
		///IE이고 버전이 10이상인 경우는 MsTextShadow값을 가져옴
		//Safari인 경우 webkitTextShadow값으로 가져옴

  ]]></comment>
  
  
  <comment id="css"><![CDATA[
	css() 메서드는 HTML 요소의 CSS 속성 값을 조회한다.
	@method css
	@param {String+} vName CSS 속성 이름(String)
	@return {String} CSS 속성 값을 반환한다.
	@throws {jindo.$Except.NOT_USE_CSS} css을 사용할 수 없는 엘리먼트 일 때.
	@remark 
		<ul class="disc">
			<li>CSS 속성은 카멜 표기법(Camel Notation)을 사용한다. 예를 들면 border-width-bottom 속성은 borderWidthBottom으로 지정할 수 있다.</li>
			<li>2.6.0 이상에서는 일반적은 스타일 문법과 카멜 표기번 모두 사용가능하다.예를 들면 border-width-bottom, borderWidthBottom 모두 가능하다.</li>
			<li>float 속성은 JavaScript의 예약어로 사용되므로 css() 메서드에서는 float 대신 cssFloat을 사용한다(Internet Explorer에서는 styleFloat, 그 외의 브라우저에서는 cssFloat를 사용한다.).</li>
		</ul>
	@see jindo.$Element#attr
	@example
		<style type="text/css">
			#btn {
				width: 120px;
				height: 30px;
				background-color: blue;
			}
		</style>
		
		<span id="btn"></span>
		
		// CSS 속성 값 조회
		$Element('btn').css('backgroundColor');		// rgb (0, 0, 255)
  ]]></comment>
  <comment id="css2"><![CDATA[
	css() 메서드는 HTML 요소의 CSS 속성 값을 설정한다.
	
	@method css
	@syntax vName, vValue
	@syntax oList
	@param {String+} vName CSS 속성 이름(String)
	@param {String+ | Numeric} vValue CSS 속성에 설정할 값. 숫자(Number) 혹은 단위를 포함한 문자열(String)을 사용한다.
	@param {Hash+} oList 하나 이상의 CSS 속성과 값을 가지는 객체(Object) 또는 해시 객체(jindo.$H() 객체).
	@return {this} CSS 속성 값을 반영한 인스턴스 자신
	@throws {jindo.$Except.NOT_USE_CSS} css을 사용할 수 없는 엘리먼트 일 때.
	@remark 
		<ul class="disc">
			<li>CSS 속성은 카멜 표기법(Camel Notation)을 사용한다. 예를 들면 border-width-bottom 속성은 borderWidthBottom으로 지정할 수 있다.</li>
			<li>2.6.0 이상에서는 일반적은 스타일 문법과 카멜 표기번 모두 사용가능하다.예를 들면 border-width-bottom, borderWidthBottom 모두 가능하다.</li>
			<li>float 속성은 JavaScript의 예약어로 사용되므로 css() 메서드에서는 float 대신 cssFloat을 사용한다(Internet Explorer에서는 styleFloat, 그 외의 브라우저에서는 cssFloat를 사용한다.).</li>
		</ul>
	@see jindo.$Element#attr
	@example
		// CSS 속성 값 설정
		$Element('btn').css('backgroundColor', 'red');
		
		//Before
		<span id="btn"></span>
		
		//After
		<span id="btn" style="background-color: red;"></span>
	@example
		// 여러개의 CSS 속성 값을 설정
		$Element('btn').css({
			width: "200px",		// 200
			height: "80px"  	// 80 으로 설정하여도 결과는 같음
		});
		
		//Before
		<span id="btn" style="background-color: red;"></span>
		
		//After
		<span id="btn" style="background-color: red; width: 200px; height: 80px;"></span>
  ]]></comment>
  <comment id="sign_getCss"><![CDATA[
	css에서 사용되는 함수
	
	@method _getCss
	@ignore
	@param {Element} e
	@param {String} sName
  ]]></comment>
  <comment id="sign_setCss"><![CDATA[
	css에서 css를 세팅하기 위한 함수
	
	@method _setCss
	@ignore
	@param {Element} e
	@param {String} k
  ]]></comment>
  <comment id="attr"><![CDATA[
	attr() 메서드는 HTML 요소의 속성을 가져온다. 하나의 파라미터만 사용하면 지정한 속성의 값을 반환하고 해당 속성이 없다면 null을 반환한다.
	
	@method attr
	@param {String+} sName 속성 이름(String)
	@return {String+} 속성 값을 반환.
	@remark 2.2.0 버전 부터 &lt;select&gt; 엘리먼트에 사용시, 옵션값을 가져올 수 있다.
	@example
		<a href="http://www.naver.com" id="sample_a" target="_blank">Naver</a>
		
		$Element("sample_a").attr("href"); // http://www.naver.com
  ]]></comment>
  <comment id="attr2"><![CDATA[
	attr() 메서드는 HTML 요소의 속성을 설정한다. 
	
	@method attr
	@syntax sName, vValue
	@syntax oList
	@param {String+} sName 속성 이름(String).
	@param {Variant} vValue 속성에 설정할 값. 숫자(Number) 혹은 단위를 포함한 문자열(String)을 사용한다. 또한 속성의 값을 null로 설정하면 해당 HTML 속성을 삭제한다.
	@param {Hash+} oList 하나 이상의 속성과 값을 가지는 객체(Object) 또는 해시 객체(jindo.$H() 객체).
	@return {this} 속성 값을 반영한 인스턴스 자신
	@throws {jindo.$Except.NOT_USE_CSS} sName은 문자,오브젝트 나 $Hash여야 한다.
	@remark 2.2.0 버전 부터 &lt;select&gt; 엘리먼트에 사용시, 옵션값을 설정할 수 있다.
	@see jindo.$Element#css
	@example
		$Element("sample_a").attr("href", "http://www.hangame.com/");
		
		//Before
		<a href="http://www.naver.com" id="sample_a" target="_blank">Naver</a>
		
		//After
		<a href="http://www.hangame.com" id="sample_a" target="_blank">Naver</a>
	@example
		$Element("sample_a").attr({
		    "href" : "http://www.hangame.com",
		    "target" : "_self"
		})
		
		//Before
		<a href="http://www.naver.com" id="sample_a" target="_blank">Naver</a>
		
		//After
		<a href="http://www.hangame.com" id="sample_a" target="_self">Naver</a>
	@example
		<select id="select">
			<option value="naver">네이버</option>
			<option value="hangame">한게임</option>
			<option>쥬니버</option>
		</select>
		<script type="text/javascript">
			var wel = $Element("select");
			wel.attr("value"); // "naver"
			wel.attr("value", null).attr("value"); // null
			wel.attr("value", "한게임").attr("value"); // "hangame"
			wel.attr("value", "쥬니버").attr("value"); // "쥬니버"
			wel.attr("value", "naver").attr("value"); // "naver"
			wel.attr("value", ["hangame"]).attr("value"); // null
		</script>
	@example
		<select id="select" multiple="true">
			<option value="naver">네이버</option>
			<option value="hangame">한게임</option>
			<option>쥬니버</option>
		</select>
		<script type="text/javascript">
			var wel = $Element("select");
			wel.attr("value"); // null
			wel.attr("value", "naver").attr("value"); // ["naver"]
			wel.attr("value", null).attr("value"); // null
			wel.attr("value", ["한게임"]).attr("value"); // ["hangame"]
			wel.attr("value", []).attr("value"); // null
			wel.attr("value", ["네이버", "hangame"]).attr("value"); // ["naver", "hangame"]
			wel.attr("value", ["쥬니버", "me2day"]).attr("value"); // ["쥬니버"]
			wel.attr("value", ["naver", "해피빈"]).attr("value"); // ["naver"]
		</script>
  ]]></comment>
  <comment id="width"><![CDATA[
	width() 메서드는 HTML 요소의 실제 너비를 가져온다.
	
	@method width
	@return {Number} HTML 요소의 실제 너비(Number)를  반환한다.
	@remark 브라우저마다 Box 모델의 크기 계산 방법이 다르므로 CSS의 width 속성 값과 width 메서드()의 반환 값은 서로 다를 수 있다.
	@see jindo.$Element#height
	@example
		<style type="text/css">
			div { width:70px; height:50px; padding:5px; margin:5px; background:red; }
		</style>
		
		<div id="sample_div"></div>
		
		// 조회
		$Element("sample_div").width();	// 80
  ]]></comment>
  <comment id="width2"><![CDATA[
	width() 메서드는 HTML 요소의 너비를 설정한다.
	
	@method width
	@param {Numeric} nWidth	설정할 너비 값. 단위는 픽셀(px)이며 파라미터의 값은 숫자로 지정한다.
	@return {this} width 속성 값을 반영한 인스턴스 자신
	@remark 브라우저마다 Box 모델의 크기 계산 방법이 다르므로 CSS의 width 속성 값과 width 메서드()의 반환 값은 서로 다를 수 있다.
	@see jindo.$Element#height
	@example
		// HTML 요소에 너비 값을 설정
		$Element("sample_div").width(200);
		
		//Before
		<style type="text/css">
			div { width:70px; height:50px; padding:5px; margin:5px; background:red; }
		</style>
		
		<div id="sample_div"></div>
		
		//After
		<div id="sample_div" style="width: 190px"></div>
  ]]></comment>
  <comment id="height"><![CDATA[
	height() 메서드는 HTML 요소의 실제 높이를 가져온다.
	
	@method height
	@return {Number} HTML 요소의 실제 높이(Number)를 반환한다.
	@remark 브라우저마다 Box 모델의 크기 계산 방법이 다르므로 CSS의 height 속성 값과 height() 메서드의 반환 값은 서로 다를 수 있다.
	@see jindo.$Element#width
	@example
		<style type="text/css">
			div { width:70px; height:50px; padding:5px; margin:5px; background:red; }
		</style>
		
		<div id="sample_div"></div>
		
		// 조회
		$Element("sample_div").height(); // 60
  ]]></comment>
  <comment id="height2"><![CDATA[
	height() 메서드는 HTML 요소의 실제 높이를 설정한다.
	
	@method height
	@param {Number} nHeight 설정할 높이 값. 단위는 픽셀(px)이며 파라미터의 값은 숫자로 지정한다.
	@return {this} height 속성 값을 반영한 인스턴스 자신
	@remark 브라우저마다 Box 모델의 크기 계산 방법이 다르므로 CSS의 height 속성 값과 height() 메서드의 반환 값은 서로 다를 수 있다.
	@see jindo.$Element#width
	@example
		// HTML 요소에 높이 값을 설정
		$Element("sample_div").height(100);
		
		//Before
		<style type="text/css">
			div { width:70px; height:50px; padding:5px; margin:5px; background:red; }
		</style>
		
		<div id="sample_div"></div>
		
		//After
		<div id="sample_div" style="height: 90px"></div>
  ]]></comment>
  <comment id="className"><![CDATA[
	className() 메서드는 HTML 요소의 클래스 이름을 확인한다.
	
	@method className
	@return {String} 클래스 이름을 반환. 하나 이상의 클래스가 지정된 경우 공백으로 구분된 문자열이 반환된다.
	@see jindo.$Element#hasClass
	@see jindo.$Element#addClass
	@see jindo.$Element#removeClass
	@see jindo.$Element#toggleClass
	@example
		<style type="text/css">
		p { margin: 8px; font-size:16px; }
		.selected { color:#0077FF; }
		.highlight { background:#C6E746; }
		</style>
		
		<p>Hello and <span id="sample_span" class="selected">Goodbye</span></p>
		
		// 클래스 이름 조회
		$Element("sample_span").className(); // selected
  ]]></comment>
  <comment id="className2"><![CDATA[
	className() 메서드는 HTML 요소의 클래스 이름을 설정한다.
	
	@method className
	@param {String+} sClass 설정할 클래스 이름. 하나 이상의 클래스를 지정하려면 공백으로 구분하여 지정할 클래스 이름을 나열한다.
	@return {this} 지정한 클래스를 반영한 인스턴스 자신
	@throws {jindo.$Except.NOT_FOUND_ARGUMENT} 파라미터가 없는 경우.
	@see jindo.$Element#hasClass
	@see jindo.$Element#addClass
	@see jindo.$Element#removeClass
	@see jindo.$Element#toggleClass
	@example
		// HTML 요소에 클래스 이름 설정
		$Element("sample_span").className("highlight");
		
		//Before
		<style type="text/css">
		p { margin: 8px; font-size:16px; }
		.selected { color:#0077FF; }
		.highlight { background:#C6E746; }
		</style>
		
		<p>Hello and <span id="sample_span" class="selected">Goodbye</span></p>
		
		//After
		<p>Hello and <span id="sample_span" class="highlight">Goodbye</span></p>
  ]]></comment>
  <comment id="hasClass"><![CDATA[
	hasClass() 메서드는 HTML 요소에서 특정 클래스를 사용하고 있는지 확인한다.
	
	@method hasClass
	@param {String+} sClass 확인할 클래스 이름.
	@return {Boolean} 지정한 클래스의 사용 여부.
	@see jindo.$Element#className
	@see jindo.$Element#addClass
	@see jindo.$Element#removeClass
	@see jindo.$Element#toggleClass
	@example
		<style type="text/css">
			p { margin: 8px; font-size:16px; }
			.selected { color:#0077FF; }
			.highlight { background:#C6E746; }
		</style>
		
		<p>Hello and <span id="sample_span" class="selected highlight">Goodbye</span></p>
		
		// 클래스의 사용여부를 확인
		var welSample = $Element("sample_span");
		welSample.hasClass("selected"); 			// true
		welSample.hasClass("highlight"); 			// true
  ]]></comment>
  <comment id="addClass"><![CDATA[
	addClass() 메서드는 HTML 요소에 클래스를 추가한다.
	
	@method addClass
	@param {String+} sClass 추가할 클래스 이름. 둘 이상의 클래스를 추가하려면 클래스 이름을 공백으로 구분하여 나열한다.
	@return {this} 지정한 클래스를 추가한 인스턴스 자신
	@see jindo.$Element#className
	@see jindo.$Element#hasClass
	@see jindo.$Element#removeClass
	@see jindo.$Element#toggleClass
	@example
		// 클래스 추가
		$Element("sample_span1").addClass("selected");
		$Element("sample_span2").addClass("selected highlight");
		
		//Before
		<p>Hello and <span id="sample_span1">Goodbye</span></p>
		<p>Hello and <span id="sample_span2">Goodbye</span></p>
		
		//After
		<p>Hello and <span id="sample_span1" class="selected">Goodbye</span></p>
		<p>Hello and <span id="sample_span2" class="selected highlight">Goodbye</span></p>
  ]]></comment>
  <comment id="removeClass"><![CDATA[
	removeClass() 메서드는 HTML 요소에서 특정 클래스를 제거한다.
	
	@method removeClass
	@param {String+} sClass 제거할 클래스 이름. 둘 이상의 클래스를 제거하려면 클래스 이름을 공백으로 구분하여 나열한다.
	@return {this} 지정한 클래스를 제거한 인스턴스 자신
	@see jindo.$Element#className
	@see jindo.$Element#hasClass
	@see jindo.$Element#addClass
	@see jindo.$Element#toggleClass
	@example
		// 클래스 제거
		$Element("sample_span").removeClass("selected");
		
		//Before
		<p>Hello and <span id="sample_span" class="selected highlight">Goodbye</span></p>
		
		//After
		<p>Hello and <span id="sample_span" class="highlight">Goodbye</span></p>
	@example
		// 여러개의 클래스를 제거
		$Element("sample_span").removeClass("selected highlight");
		$Element("sample_span").removeClass("highlight selected");
		
		//Before
		<p>Hello and <span id="sample_span" class="selected highlight">Goodbye</span></p>
		
		//After
		<p>Hello and <span id="sample_span" class="">Goodbye</span></p>
  ]]></comment>
  <comment id="toggleClass"><![CDATA[
	toggleClass() 메서드는 HTML 요소에 파라미터로 지정한 클래스가 이미 적용되어 있으면 제거하고 만약 없으면 추가한다.<br>
	파라미터를 하나만 입력할 경우 파라미터로 지정한 클래스가 사용되고 있으면 제거하고 사용되고 있지 않으면 추가한다. 만약 두 개의 파라미터를 입력할 경우 두 클래스 중에서 사용하고 있는 것을 제거하고 나머지 클래스를 추가한다.
	
	@method toggleClass
	@param {String+} sClass 추가 혹은 제거할 클래스 이름1.
	@param {String+} [sClass2] 추가 혹은 제거할 클래스 이름2.
	@return {this} 지정한 클래스를 추가 혹은 제거한 인스턴스 자신
	@import core.$Element[hasClass,addClass,removeClass]
	@see jindo.$Element#className
	@see jindo.$Element#hasClass
	@see jindo.$Element#addClass
	@see jindo.$Element#removeClass
	@example
		// 파라미터가 하나인 경우
		$Element("sample_span1").toggleClass("highlight");
		$Element("sample_span2").toggleClass("highlight");
		
		//Before
		<p>Hello and <span id="sample_span1" class="selected highlight">Goodbye</span></p>
		<p>Hello and <span id="sample_span2" class="selected">Goodbye</span></p>
		
		//After
		<p>Hello and <span id="sample_span1" class="selected">Goodbye</span></p>
		<p>Hello and <span id="sample_span2" class="selected highlight">Goodbye</span></p>
	@example
		// 파라미터가 두 개인 경우
		$Element("sample_span1").toggleClass("selected", "highlight");
		$Element("sample_span2").toggleClass("selected", "highlight");
		
		//Before
		<p>Hello and <span id="sample_span1" class="highlight">Goodbye</span></p>
		<p>Hello and <span id="sample_span2" class="selected">Goodbye</span></p>
		
		//After
		<p>Hello and <span id="sample_span1" class="selected">Goodbye</span></p>
		<p>Hello and <span id="sample_span2" class="highlight">Goodbye</span></p>
  ]]></comment>
  <comment id="cssClass"><![CDATA[
	cssClass는 클래스의 유무를 확인한다.
	
	@method cssClass
	@param {String+} sName class명
	@return {Boolean} 해당 클래스가 있는지 여부의 불린 값을 반환한다.
	@since 2.0.0
	@see jindo.$Element#addClass
	@see jindo.$Element#removeClass
	@example
		// 첫 번째 파라미터만 넣은 경우
		<div id="sample_span1"/>
		$Element("sample_span1").cssClass("highlight");// false
  ]]></comment>
  <comment id="cssClass2"><![CDATA[
	cssClass는 클래스를 추가, 삭제할 수 있다.
	
	@method cssClass
	@syntax sName, bClassType
	@syntax oList
	@param {String+} sName class명,
	@param {Boolean} bClassType true인 경우는 클래스를 추가하고 false인 경우는 클래스를 삭제한다.
	@param {Hash+} oList 하나 이상의 속성명과 불린값을 가지는 객체(Object) 또는 해시 객체(jindo.$H() 객체).
	@return {this} 지정한 클래스를 추가/삭제한 인스턴스 자신
	@since 2.0.0
	@see jindo.$Element#addClass
	@see jindo.$Element#removeClass
	@example
		// 두 번째 파라미터도 넣은 경우.
		$Element("sample_span1").cssClass("highlight",true);
		-> <div id="sample_span1" class="highlight"/>
		
		$Element("sample_span1").cssClass("highlight",false);
		-> <div id="sample_span1" class=""/>
	@example
		// 첫 번째 파라미터를 오브젝트로 넣은 경우.
		<div id="sample_span1" class="bar"/>
		
		$Element("sample_span1").cssClass({
			"foo": true,
			"bar" : false
		});
		-> <div id="sample_span1" class="foo"/>
  ]]></comment>
  <comment id="text"><![CDATA[
	text() 메서드는 HTML 요소의 텍스트 노드 값을 가져온다.
	
	@method text
	@return {String} HTML 요소의 텍스트 노드(String)를 반환.
	@example
		<ul id="sample_ul">
			<li>하나</li>
			<li>둘</li>
			<li>셋</li>
			<li>넷</li>
		</ul>
		
		// 텍스트 노드 값 조회
		$Element("sample_ul").text();
		// 결과
		//	하나
		//	둘
		//	셋
		//	넷
  ]]></comment>
  <comment id="text2"><![CDATA[
	text() 메서드는 HTML 요소의 텍스트 노드를 지정한 값으로 설정한다.
	
	@method text
	@param {String+} sText 지정할 텍스트.
	@return {this} 지정한 값을 설정한 인스턴스 자신
	@example
		// 텍스트 노드 값 설정
		$Element("sample_ul").text('다섯');
		
		//Before
		<ul id="sample_ul">
			<li>하나</li>
			<li>둘</li>
			<li>셋</li>
			<li>넷</li>
		</ul>
		
		//After
		<ul id="sample_ul">다섯</ul>
	@example
		// 텍스트 노드 값 설정
		$Element("sample_p").text("New Content");
		
		//Before
		<p id="sample_p">
			Old Content
		</p>
		
		//After
		<p id="sample_p">
			New Content
		</p>
  ]]></comment>
  <comment id="text_1"><![CDATA[
 * Opera 11.01에서 textContext가 Get일때 정상적으로 동작하지 않음. 그래서 get일 때는 innerText을 사용하고 set하는 경우는 textContent을 사용한다.(http://devcafe.nhncorp.com/ajaxui/295768)
  ]]></comment>
  <comment id="html"><![CDATA[
	html() 메서드는 HTML 요소의 내부 HTML 코드(innerHTML)를 가져온다.
	
	@method html
	@return {String} 내부 HTML(String)을 반환. 
	@see https://developer.mozilla.org/en/DOM/element.innerHTML element.innerHTML - MDN Docs
	@see jindo.$Element#outerHTML
	@example
		<div id="sample_container">
			<p><em>Old</em> content</p>
		</div>
		
		// 내부 HTML 조회
		$Element("sample_container").html(); // <p><em>Old</em> content</p>
  ]]></comment>
  <comment id="html2"><![CDATA[
	html() 메서드는 HTML 요소의 내부 HTML 코드(innerHTML)를 설정한다. 이때 모든 하위 요소의 모든 이벤트 핸들러를 제거한다.
	
	@method html
	@param {String+} sHTML 내부 HTML 코드로 설정할 HTML 문자열.
	@return {this} 지정한 값을 설정한 인스턴스 자신
	@remark IE8에서 colgroup의 col을 수정하려고 할 때 colgroup을 삭제하고 다시 만든 후 col을 추가해야 합니다.
	@see https://developer.mozilla.org/en/DOM/element.innerHTML element.innerHTML - MDN Docs
	@see jindo.$Element#outerHTML
	@example
		// 내부 HTML 설정
		$Element("sample_container").html("<p>New <em>content</em></p>");
		
		//Before
		<div id="sample_container">
		 	<p><em>Old</em> content</p>
		</div>
		
		//After
		<div id="sample_container">
		 	<p>New <em>content</em></p>
		</div>
  ]]></comment>
  <comment id="html_1"><![CDATA[
 * IE 나 FireFox 의 일부 상황에서 SELECT 태그나 TABLE, TR, THEAD, TBODY 태그에 innerHTML 을 셋팅해도
 * 문제가 생기지 않도록 보완 - hooriza
  ]]></comment>
  <comment id="html_2"><![CDATA[
* ie에서 select테그일 경우 option중 selected가 되어 있는 option이 있는 경우 중간에
* selected가 되어 있으면 그 다음 부터는 계속 selected가 true로 되어 있어
* 해결하기 위해 cloneNode를 이용하여 option을 카피한 후 selected를 변경함. - mixed
  ]]></comment>
  <comment id="outerHTML"><![CDATA[
	outerHTML() 메서드는 HTML 요소의 내부 코드(innerHTML)에 해당하는 부분과 자신의 태그를 포함한 HTML 코드를 반환한다.
	
	@method outerHTML
	@return {String} HTML 코드.
	@see jindo.$Element#html
	@example
		<h2 id="sample0">Today is...</h2>
		
		<div id="sample1">
		  	<p><span id="sample2">Sample</span> content</p>
		</div>
		
		// 외부 HTML 값을 조회
		$Element("sample0").outerHTML(); // <h2 id="sample0">Today is...</h2>
		$Element("sample1").outerHTML(); // <div id="sample1">  <p><span id="sample2">Sample</span> content</p>  </div>
		$Element("sample2").outerHTML(); // <span id="sample2">Sample</span>
  ]]></comment>
  <comment id="outerHTML_1"><![CDATA[
      상위노드가 없으면 innerHTML반환
  ]]></comment>
  <comment id="toString"><![CDATA[
	toString() 메서드는 해당 요소의 코드를 문자열로 변환하여 반환한다(outerHTML 메서드와 동일).
	
	@method toString
	@return {String} HTML 코드.
	@see jindo.$Element#outerHTML
  ]]></comment>
  <comment id="attach"><![CDATA[
	attach() 메서드는 엘리먼트에 이벤트를 할당한다.
	@syntax sEvent, fpCallback
	@syntax oList
	@method attach
	@param {String+} sEvent 이벤트 명
		<ul class="disc">
			<li>이벤트 이름에는 on 접두어를 사용하지 않는다.</li>
			<li>마우스 휠 스크롤 이벤트는 mousewheel 로 사용한다.</li>
			<li>기본 이벤트 외에 추가로 사용이 가능한 이벤트로 domready, mouseenter, mouseleave, mousewheel이 있다.</li>
			<li>delegate의 기능이 추가됨 (@을 구분자로 selector을 같이 사용할 수 있다.)</li>
		</ul>
	@param {Function+} fpCallback 이벤트가 발생했을 때 실행되는 콜백함수.
	@param {Hash+} oList 하나 이상의 이벤트명과 함수를 가지는 객체(Object) 또는 해시 객체(jindo.$H() 객체).
	@return {this} 이벤트를 할당한 인스턴스 자신
	@throws {jindo.$Except.NOT_WORK_DOMREADY} IE인 경우 프레임 안에서는 domready함수를 사용할 때.
	@since 2.0.0
	@remark 2.2.0 버전부터, load와 domready이벤트는 각각 Window와 Document에서 발생하는 이벤트이지만 서로를 교차해서 등록하여도 이벤트가 올바르게 발생한다.
	@remark 2.5.0 버전부터 @을 구분자로 delegate처럼 사용할 수 있다.
	@see jindo.$Element#detach
	@see jindo.$Element#delegate
	@see jindo.$Element#undelegate
	@example
		function normalEvent(e){
			alert("click");
		}
		function groupEvent(e){
			alert("group click");
		}
		
		//일반적인 이벤트 할당.
		$Element("some_id").attach("click",normalEvent);
	@example
		function normalEvent(e){
			alert("click");
		}
		
		//delegate처럼 사용하기 위해서는 @을 구분자로 사용가능.
		$Element("some_id").attach("click@.selected",normalEvent);
		
		
		$Element("some_id").attach({
			"click@.selected":normalEvent,
			"click@.checked":normalEvent2,
			"click@.something":normalEvent3
		});
	@example
		function loadHandler(e){
			// empty
		}
		function domreadyHandler(e){
			// empty
		}
		var welDoc = $Element(document);
		var welWin = $Element(window);
		
		// document에 load 이벤트 핸들러 등록
		welDoc.attach("load", loadHandler);
		welDoc.hasEventListener("load"); // true
		welWin.hasEventListener("load"); // true
		
		// detach는 document, window 어느것에서 해도 상관없다.
		welDoc.detach("load", loadHandler);
		welDoc.hasEventListener("load"); // false
		welWin.hasEventListener("load"); // false
		
		// window에 domready 이벤트 핸들러 등록
		welWin.attach("domready", domreadyHandler);
		welWin.hasEventListener("domready"); // true
		welDoc.hasEventListener("domready"); // true
		
		// detach는 document, window 어느것에서 해도 상관없다.
		welWin.detach("domready", domreadyHandler);
		welWin.hasEventListener("domready"); // false
		welDoc.hasEventListener("domready"); // false
  ]]></comment>
  <comment id="detach"><![CDATA[
	detach() 메서드는 엘리먼트에 등록된 이벤트 핸들러를 등록 해제한다.
	@syntax sEvent, fpCallback
	@syntax oList
	@method detach
	@param {String+} sEvent 이벤트 명
	@param {Function+} fpCallback 이벤트가 발생했을 때 실행되는 콜백함수.
	@param {Hash+} oList 하나 이상의 이벤트명과 함수를 가지는 객체(Object) 또는 해시 객체(jindo.$H() 객체).
	@return {this} 이벤트 핸들러를 등록 해제한 인스턴스 자신
	@remark 2.2.0 버전부터, load와 domready이벤트는 각각 Window와 Document에서 발생하는 이벤트이지만 서로를 교차해서 등록하여도 이벤트가 올바르게 발생한다.
	@remark 2.5.0 버전부터 @을 구분자로 delegate처럼 사용할 수 있다.
	@see jindo.$Element#detach
	@see jindo.$Element#delegate
	@see jindo.$Element#undelegate
	@since 2.0.0
	@example
		function normalEvent(e){
			alert("click");
		}
		function groupEvent(e){
			alert("group click");
		}
		function groupEvent2(e){
			alert("group2 click");
		}
		function groupEvent3(e){
			alert("group3 click");
		}
		
		//일반적인 이벤트 할당.
		$Element("some_id").attach("click",normalEvent);
		
		//일반적인 이벤트 해제. 일반적인 이벤트 해제는 반드시 함수를 넣어야지만 해제가 가능하다.
		$Element("some_id").detach("click",normalEvent);
   @example
		function normalEvent(e){
			alert("click");
		}
		
		//undelegate처럼 사용하기 위해서는 @을 구분자로 사용가능.
		$Element("some_id").attach("click@.selected",normalEvent);
		$Element("some_id").detach("click@.selected",normalEvent);
  ]]></comment>
  <comment id="delegate"><![CDATA[
	delegate() 메서드는 이벤트 위임(Event Deligation) 방식으로 이벤트를 처리한다.<br>
	이벤트 위임이란, 이벤트 버블링을 이용하여 이벤트를 관리하는 상위 요소를 따로 두어 효율적으로 이벤트를 관리하는 방법이다.
	
	@method delegate
	@param {String+} sEvent 이벤트 이름. on 접두어는 생략한다.
	@param {Variant} vFilter 특정 HTML 요소에 대해서만 이벤트 핸들러를 실행하도록 하기 위한 필터.<br>
	필터는 CSS 선택자(String)와 함수(Function)으로 지정할 수 있다.
		<ul class="disc">
			<li>문자열을 입력하면 CSS 선택자로 이벤트 핸들러를 실행시킬 요소를 지정할 수 있다.</li>
			<li>Boolean 값을 반환하는 함수를 파라미터 입력할 수 있다. 이 함수를 사용할 경우 함수가 true를 반환할 때 실행할 콜백 함수(fCallback)를 파라미터로 추가 지정해야 한다.</li>
		</ul>
	@param {Function+} [fCallback] vFilter에 지정된 함수가 true를 반환하는 경우 실행할 콜백 함수.
	@return {this} 이벤트 위임을 적용한 인스턴스 자신
	@remark 2.0.0부터  domready, mousewheel, mouseleave, mouseenter 이벤트 사용가능.
	@since 1.4.6
	@see jindo.$Element#attach
	@see jindo.$Element#detach
	@see jindo.$Element#undelegate
	@example
		<ul id="parent">
			<li class="odd">1</li>
			<li>2</li>
			<li class="odd">3</li>
			<li>4</li>
		</ul>
	
		// CSS 셀렉터를 필터로 사용하는 경우
		$Element("parent").delegate("click",
			".odd", 			// 필터
			function(eEvent){	// 콜백 함수
				alert("odd 클래스를 가진 li가 클릭 될 때 실행");
			});
	@example
		<ul id="parent">
			<li class="odd">1</li>
			<li>2</li>
			<li class="odd">3</li>
			<li>4</li>
		</ul>
	
		// 함수를 필터로 사용하는 경우
		$Element("parent").delegate("click",
			function(oEle,oClickEle){	// 필터
				return oClickEle.innerHTML == "2"
			},
			function(eEvent){			// 콜백 함수
				alert("클릭한 요소의 innerHTML이 2인 경우에 실행");
			});
  ]]></comment>
  <comment id="undelegate"><![CDATA[
	undelegate() 메서드는 delegate() 메서드로 등록한 이벤트 위임을 해제한다.
	
	@method undelegate
	@param {String+} sEvent 이벤트 위임을 등록할 때 사용한 이벤트 이름. on 접두어는 생략한다.
	@param {Variant} [vFilter] 이벤트 위임을 등록할 때 지정한 필터. 파라미터를 입력하지 않으면 엘리먼트에 delegate로 할당한 이벤트 중 특정 이벤트의 모든 조건이 사라진다.
	@param {Function+} [fCallback] 이벤트 위임을 등록할 때 지정한 콜백 함수.
	@return {this} 이벤트 위임을 해제한 인스턴스 자신
	@since 1.4.6
	@see jindo.$Element#attach
	@see jindo.$Element#detach
	@see jindo.$Element#delegate
	@example
		<ul id="parent">
			<li class="odd">1</li>
			<li>2</li>
			<li class="odd">3</li>
			<li>4</li>
		</ul>
		
		// 콜백 함수
		function fnOddClass(eEvent){
			alert("odd 클래스를 가진 li가 클릭 될 때 실행");
		};
		function fnOddClass2(eEvent){
			alert("odd 클래스를 가진 li가 클릭 될 때 실행2");
		};
		function fnOddClass3(eEvent){
			alert("odd 클래스를 가진 li가 클릭 될 때 실행3");
		};
		
		// 이벤트 델리게이션 사용
		$Element("parent").delegate("click", ".odd", fnOddClass);
		
		// fnOddClass만 이벤트 해제
		$Element("parent").undelegate("click", ".odd", fnOddClass);
  ]]></comment>
  <comment id="_add"><![CDATA[
	이벤트를 추가하는 내부 함수.
	
	@method _add
	@ignore
	@param {String} sType delegate인지 일반 이벤트인지 확인.
	@param {String} sEvent 이벤트명.
	@param {String | Function} vFilter 필터 함수.
	@param {Function} fpCallback 이벤트 콜백함수.
	@return {this} 인스턴스 자신
  ]]></comment>
  <comment id="_del"><![CDATA[
	이벤트를 삭제할 때 사용하는 내부 함수.
	
	@method _del
	@ignore
	@param {String} sType 이벤트 delegate인지 일반 이벤트인지 확인.
	@param {String} sEvent 이벤트명.
	@param {String|Function} vFilter 필터 함수.
	@param {Function} fpCallback 이벤트 콜백함수.
	@return {this} 인스턴스 자신
  ]]></comment>
  <comment id="eventManager"><![CDATA[
	$Element의 이벤트를 관리하는 객체.
	
	@ignore
  ]]></comment>
  <comment id="revisionCallback"><![CDATA[
	mouseenter나 mouseleave 이벤트가 없는 브라우저에서 이벤트를 할당 할 때 동작하게끔 콜백함수를 조정하는 함수.<br>
	IE에서 delegate에 mouseenter나 mouseleave을 사용할 때도 사용. 
	
	@method revisionCallback
	@ignore
	@param {String} sType 이벤트 delegate인지 일반 이벤트인지 확인.
	@param {String} sEvent 이벤트명
	@param {Function} fpCallback 이벤트 콜백함수
  ]]></comment>
  <comment id="_fireWhenElementBoundary"><![CDATA[
	mouseenter나 mouseleave 이벤트가 없는 브라우저에서 에뮬레이션해주는 함수.
	
	@method _fireWhenElementBoundary
	@ignore
	@param {String} sType 이벤트 delegate인지 일반 이벤트인지 확인.
	@param {Function} fpCallback 이벤트 콜백함수
  ]]></comment>
  <comment id="revisionEvent"><![CDATA[
	브라우저마다 차이있는 이벤트 명을 보정하는 함수.
	
	@method revisionEvent
	@ignore
	@param {String} sType 이벤트 delegate인지 일반 이벤트인지 확인.
	@param {String} sEvent 이벤트명
  ]]></comment>
  <comment id="revisionEvent_1"><![CDATA[
 * IE9인 경우도 DOMMouseScroll이 동작하지 않음.
  ]]></comment>
  <comment id="revisionEvent_2"><![CDATA[
 * IE에서 9와 이하 버전에서는 oninput 이벤트에 대한 fallback이 필요. IE9의 경우, oninput 이벤트 지원하나 input 요소에 내용을 backspace 키 등으로 삭제시 바로 반영되지 않는 버그가 있음.
    따라서 oninput 이벤트는 다음과 같이 바인딩 되도록 변경됨. - IE9: keyup, IE9 이하 버전: propertychange
  ]]></comment>
    <comment id="revisionEvent_3"><![CDATA[
 * IE에서 delegate에 mouseenter나 mouseleave을 사용할 때는 mouseover나 mouseleave을 이용하여 에뮬레이션 하도록 수정해야 함.
  ]]></comment>
  <comment id="test"><![CDATA[
			테스트를 위한 함수.
			
			@method test
			@ignore
  ]]></comment>
  <comment id="isInit"><![CDATA[
			키에 해당하는 함수가 초기화 되었는지 확인하는 함수.
			
			@method isInit
			@ignore
			@param {String} sKey 엘리먼트 키값
  ]]></comment>
  <comment id="init"><![CDATA[
			초기화 하는 함수.
			
			@method init
			@ignore
			@param {String} sKey 엘리먼트 키값
			@param {Element} eEle 엘리먼트
  ]]></comment>
  <comment id="getEventConfig"><![CDATA[
			키값의 해당하는 정보를 반환.
			
			@method getEventConfig
			@ignore
			@param {String} sKey 엘리먼트 키값
  ]]></comment>
  <comment id="hasEvent"><![CDATA[
			해당 키에 이벤트가 있는지 확인하는 함수.
			
			@method  hasEvent
			@ignore
			@param {String} sKey 엘리먼트 키값
			@param {String} sEvent 이벤트명
  ]]></comment>
  <comment id="hasGroup"><![CDATA[
			해당 그룹이 있는지 확인하는 함수.
			
			@method hasGroup
			@ignore
			@param {String} sKey 엘리먼트 키값 
			@param {String} sEvent 이벤트 명
			@param {String} sEvent 그룹명
  ]]></comment>
  <comment id="initEvent"><![CDATA[
			이벤트를 초기화 하는 함수
			
			@method initEvent
			@ignore
			@param {Hash+} oThis this 객체
			@param {String} sEvent 이벤트 명
			@param {String} sEvent 그룹명
  ]]></comment>
  <comment id="initGroup"><![CDATA[
			그룹을 초기화 하는 함수
			
			@method initGroup
			@ignore
			@param {String} sKey 엘리먼트 키값
			@param {String} sEvent 이벤트 명
			@param {String} sEvent 그룹명
  ]]></comment>
  <comment id="addEventListener"><![CDATA[
			이벤트를 추가하는 함수
			
			@method addEventListener
			@ignore
			@param {String} ssKey 엘리먼트 키 값
			@param {String} sEvent 이벤트명
			@param {String} sGroup 그룹명
			@param {String} sType delegate인지 일반 이벤트인지 확인.
			@param {Function} vFilter 필터링하는 css선택자 혹은 필터함수
			@param {Function} fpCallback 콜백함수
  ]]></comment>
  <comment id="hasDelegate"><![CDATA[
			delegate가 있는지 확인하는 함수.
			
			@method hasDelegate
			@ignore
			@param {Hash+} oEventInfo 이벤트 정보객체
			@param {Function} vFilter 필터링하는 css선택자 혹은 필터함수
  ]]></comment>
  <comment id="initDelegate"><![CDATA[
			delegate를 초기화 하는 함수.
			
			@method initDelegate
			@ignore
			@param {Hash+} eOwnEle
			@param {Hash+} oEventInfo 이벤트 정보객체
			@param {Function} vFilter 필터링하는 css선택자 혹은 필터함수
  ]]></comment>
  <comment id="addDelegate"><![CDATA[
			delegate를 추가하는 함수.
			
			@method addDelegate
			@ignore
			@param {Hash+} oEventInfo 이벤트 정보객체
			@param {Function} vFilter 필터링하는 css선택자 혹은 필터함수
			@param {Function} fpCallback 콜백함수
  ]]></comment>
  <comment id="removeEventListener"><![CDATA[
			이벤트를 해제하는 함수.
			
			@method removeEventListener
			@ignore
			@param {String} ssKey 엘리먼트 키 값
			@param {String} sEvent 이벤트명
			@param {String} sGroup 그룹명
			@param {String} sType delegate인지 일반 이벤트인지 확인.
			@param {Function} vFilter 필터링하는 css선택자 혹은 필터함수
			@param {Function} fpCallback 콜백함수
  ]]></comment>
  <comment id="cleanUpAll"><![CDATA[
			모든 이벤트를 해제하는 함수(절대 사용불가.)
			
			@method cleanUpAll
			@ignore
  ]]></comment>
  <comment id="cleanUpUsingKey"><![CDATA[
			엘리먼트 키를 이용하여 모든 이벤트를 삭제할 때 사용.
			
			@method cleanUpUsingKey
			@ignore
			@param {String} sKey
  ]]></comment>
  <comment id="cleanUp"><![CDATA[
			키에 해당하는 모든 이벤트를 해제하는 함수(절대 사용불가)
			
			@method cleanUp
			@ignore
			@param {String} ssKey 엘리먼트 키 값
			@param {String} sEvent 이벤트명
			@param {Boolean} bForce 강제로 해제할 것인지 여부
  ]]></comment>
  <comment id="splitGroup"><![CDATA[
			이벤트 명과 그룹을 구분하는 함수.
			
			@method splitGroup
			@ignore
			@param {String} sEvent 이벤트명
  ]]></comment>
  <comment id="_getParent"><![CDATA[
			delegate에서 부모를 찾는 함수.
			
			@method _getParent
			@ignore
			@param {Element} oOwnEle 자신의 엘리먼트
			@param {Element} oEle 비교 엘리먼트
  ]]></comment>
  <comment id="element_attach_data"><![CDATA[
// $Element의 보관 구조.
//
// {
//	"key" : {
//		"ele" : ele,
//		"event" : {
//			"click":{
//				"listener" : function(){},
//				"type":{
//					"-none-" : {
//						"normal" : [],
//						"delegate" :{
//							"vFilter" :{
//								"checker" : function(){},
//								"callback" : [function(){}]
//							}
//							
//						}
//					}
//				}
//			}
//		}
//	}
//}
  ]]></comment>
  <comment id="sign_domready"><![CDATA[
	Emulates the domready (=DOMContentLoaded) event in Internet Explorer.
	
	@method _domready
	@filter desktop
	@ignore
  ]]></comment>
  <comment id="element_unload"><![CDATA[
 * IE에서 unload시에 이벤트를 해제하지 않으면 메모리닉이 발생하여 unload시 이벤트를 해제하는 로직 추가.
 * 모바일에서는 unload를 설정하면 iOS5 미만의 모바일 사파리에서는 캐시가 적용안됨.
  ]]></comment>
</comments>
