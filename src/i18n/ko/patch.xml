<comments name="patch">
  <comment id="title"><![CDATA[
	@fileOverview 하위 호환성을 위한 패치
	@name patch.js
	@author NAVER Ajax Platform
  ]]></comment>
    <comment id="version"><![CDATA[
    Jindo의 버전을 얻는다.

    @property jindo.$Jindo().version
    @see jindo.VERSION
    ]]></comment>
    <comment id="version_1"><![CDATA[
    Jindo의 버전을 얻는다.

    @property jindo.$Jindo.version
    @see jindo.VERSION
    ]]></comment>
    <comment id="event_element"><![CDATA[
	이벤트가 발생한 엘리먼트 (srcElement로 대신함)

	@deprecated In version 2.8.3, $Event#srcElement로 변경.
	@property jindo.$Event().element
	@type Element
	@see jindo.$Event#srcElement
    ]]></comment>
    <comment id="event_pos"><![CDATA[
	pos() 메서드의 반환값에 layerX와 layerY 값을 더해 반환한다.

    @property jindo.$Event().pos().layerX / layerY
	@example
		function eventHandler(evt) {
		   var pos = evt.pos();

           pos.layerX;  // 이벤트가 발생한 엘리먼트로부터의 상대적인 X 좌표
           pos.layerY;  // 이벤트가 발생한 엘리먼트로부터의 상대적인 Y 좌표
		}
  ]]></comment>
    <comment id="attach"><![CDATA[
	attach() 메서드는 함수를 특정 요소의 이벤트 핸들러로 등록한다.

	@method attach
	@syntax elElement, sEvent, bUseCapture
	@syntax vElement, sEvent, bUseCapture
	@syntax sElement, sEvent, bUseCapture
	@remark jindo.$Fn() 객체에 바인딩하여 사용할 때 함수의 반환 값이 false인 경우, 인터넷 익스플로러에서 기본 기능을 막기 때문에 사용하지 않도록 주의한다.<br>
		또한 다음과 같은 제약 사항이 있다.<br>
		<ul class="disc">
			<li>이벤트 이름에는 on 접두어를 사용하지 않는다.</li>
			<li>마우스 휠 스크롤 이벤트는 mousewheel 로 사용한다.</li>
			<li>기본 이벤트 외에 추가로 사용이 가능한 이벤트로 domready, mouseenter, mouseleave, mousewheel이 있다.</li>
		</ul>
	@param {Element} elElement 이벤트 핸들러를 할당할 요소
	@param {Array | $A} vElement 이벤트 핸들러를 할당할 요소로 이루어진 배열
	@param {String} sElement 이벤트 핸들러를 할당할 요소의 id
	@param {String} sEvent 이벤트 종류
	@param {Boolean} [bUseCapture=false] 캡쳐링(capturing) 사용 여부(1.4.2~2.0.0 버전까지  지원). 사용하면 true를 입력한다.
	@return {jindo.$Fn} 생성된 jindo.$Fn() 객체.
	@deprecated Since version 2.0.0. $Element#attach로 변경. v2.11.0 부터 제거됨
	@see jindo.$Fn#detach
	@example
		var someObject = {
		    func : function() {
				// code here
		   }
		}

		// 단일 요소에 클릭 이벤트 핸들러를 등록할 경우
		$Fn(someObject.func, someObject).attach($("test"),"click");

		// 여러 요소에 클릭 이벤트 핸들러를 등록할 경우
		// 아래와 같이 첫 번째 파라미터로 배열이 입력되면 해당 모든 요소에 이벤트 핸들러가 등록된다.
		$Fn(someObject.func, someObject).attach($$(".test"),"click");
  ]]></comment>
    <comment id="attach_1"><![CDATA[
IE9인 경우도 DOMMouseScroll이 동작하지 않음.
  ]]></comment>
    <comment id="attach_2"><![CDATA[
iframe안에서 domready이벤트가 실행되지 않기 때문에 error를 던짐.
  ]]></comment>
    <comment id="detach"><![CDATA[
	detach() 메서드는 요소에 등록된 이벤트 핸들러를 등록 해제한다.

	@method detach
	@param {Element} elElement 이벤트 핸들러를 등록 해제할 요소
	@param {String} sEvent 이벤트 종류. 이벤트 이름에는 on 접두어를 사용하지 않는다.
	@param {Boolean} [bUseCapture=false] 캡쳐링(capturing) 사용 여부(1.4.2~2.0.0 버전까지  지원). 사용하면 true를 입력한다.
	@return {jindo.$Fn} 생성된 jindo.$Fn() 객체.
	@see jindo.$Fn#attach
	@deprecated Since version 2.0.0. $Element#detach 로 변경. v2.11.0 부터 제거됨
	@example
		var someObject = {
		    func : function() {
				// code here
		   }
		}

		var fpFn = $Fn(someObject.func, someObject);
		fpFn.attach($("test"),"click");
		// 단일 요소에 등록된 클릭 이벤트 핸들러를 등록 해제할 경우
		// detach 함수는 attach 함수가 실행 된 같은 $Fn 인스턴스에서만 사용 가능하다
		fpFn.detach($("test"),"click");

		var fpFn = $Fn(someObject.func, someObject);
		fpFn.attach($$(".test"),"click");
		// 여러 요소에 등록된 클릭 이벤트 핸들러를 등록 해제할 경우
		// 아래와 같이 첫 번째 파라미터로 배열이 입력되면 해당 모든 요소에 이벤트 핸들러가 등록된다.
		// detach 함수는 attach 함수가 실행 된 같은 $Fn 인스턴스에서만 사용 가능하다.
		fpFn.detach($$(".test"),"click");
  ]]></comment>
</comments>