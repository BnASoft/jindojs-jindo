<comments name="function">
  <comment id="title"><![CDATA[
	@fileOverview jindo.$Fn() 객체의 생성자 및 메서드를 정의한 파일
	@name function.js 
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	jindo.$Fn() 객체는 Function 객체를 래핑(wrapping)하여 함수와 관련된 확장 기능을 제공한다.
	
	@class jindo.$Fn
	@keyword function, 함수
  ]]></comment>
  <comment id="constructor"><![CDATA[
	jindo.$Fn() 객체()를 생성한다. 생성자의 파라미터로 특정 함수를 지정할 수 있다. 이 때, 함수와 함께 this 키워드를 상황에 맞게 사용할 수 있도록 실행 문맥(Execution Context)을 함께 지정할 수 있다. 또한 생성자의 파라미터로 래핑할 함수의 파라미터와 몸체를 각각 입력하여 jindo.$Fn() 객체를 생성할 수 있다.
	
	@constructor
	@syntax fpFunction, vExeContext
	@syntax sFuncArgs, sFuncBody
	@param {Function+} fpFunction 랩핑할 함수
	@param {Variant} [vExeContext] 함수의 실행 문맥이 될 객체
	@param {String} sFuncArgs 함수의 파라미터를 나타내는 문자열
	@param {String} sFuncBody 함수의 몸체를 나타내는 문자열
	@return {jindo.$Fn} jindo.$Fn() 객체
	@see jindo.$Fn#toFunction
	@example
		func : function() {
		       // code here
		}
		
		var fn = $Fn(func, this);
	@example
		var someObject = {
		    func : function() {
		       // code here
		   }
		}
		
		var fn = $Fn(someObject.func, someObject);
	@example
		var fn = $Fn("a, b", "return a + b;");
		var result = fn.$value()(1, 2) // result = 3;
		
		// fn은 함수 리터럴인 function(a, b){ return a + b;}와 동일한 함수를 래핑한다.
  ]]></comment>
  <comment id="etc"><![CDATA[
 * userAgent cache
 * @ignore
  ]]></comment>
  <comment id="sign_value"><![CDATA[
	$value() 메서드는 원본 Function 객체를 반환한다.
	
	@method $value
	@return {Function} 원본 Function 객체
	@example
		func : function() {
			// code here
		}
		
		var fn = $Fn(func, this);
		fn.$value(); // 원래의 함수가 리턴된다.
  ]]></comment>
  <comment id="bind"><![CDATA[
	bind() 메서드는 생성자가 지정한 객체의 메서드로 동작하도록 묶은 Function 객체를 반환한다. 이때 해당 메서드의 실행 문맥(Execution Context)이 지정한 객체로 설정된다.
	
	@method bind
	@param {Variant} [vParameter*] 생성한 함수에 기본적으로 입력할 첫~N 번째 파라미터.
	@return {Function} 실행 문맥의 메서드로 묶인 Function 객체
	@see jindo.$Fn
	@see jindo.$Class
	@example
		var sName = "OUT";
		var oThis = {
		    sName : "IN"
		};
		
		function getName() {
		    return this.sName;
		}
		
		oThis.getName = $Fn(getName, oThis).bind();
		
		alert( getName() );       	  //  OUT
		alert( oThis.getName() ); //   IN
	@example
		 // 바인드한 메서드에 인수를 입력할 경우
		var b = $Fn(function(one, two, three){
			console.log(one, two, three);
		}).bind(true);
		
		b();	// true, undefined, undefined
		b(false);	// true, false, undefined
		b(false, "1234");	// true, false, "1234"
	@example
		// 함수를 미리 선언하고 나중에 사용할 때 함수에서 참조하는 값은 해당 함수를 
		// 생성할 때의 값이 아니라 함수 실행 시점의 값이 사용되므로 이때 bind() 메서드를 이용한다.
		for(var i=0; i<2;i++){
			aTmp[i] = function(){alert(i);}
		}
		
		for(var n=0; n<2;n++){
			aTmp[n](); // 숫자 2만 두번 alert된다.
		}
		
		for(var i=0; i<2;i++){
		aTmp[i] = $Fn(function(nTest){alert(nTest);}, this).bind(i);
		}
		
		for(var n=0; n<2;n++){
			aTmp[n](); // 숫자 0, 1이 alert된다.
		}
	@example
		//클래스를 생성할 때 함수를 파라미터로 사용하면, scope를 맞추기 위해 bind() 메서드를 사용한다.
		var MyClass = $Class({
			fFunc : null,
			$init : function(func){
				this.fFunc = func;
		
				this.testFunc();
			},
			testFunc : function(){
				this.fFunc();
			}
		})
		var MainClass = $Class({
			$init : function(){
				var oMyClass1 = new MyClass(this.func1);
				var oMyClass2 = new MyClass($Fn(this.func2, this).bind());
			},
			func1 : function(){
				alert(this);// this는 MyClass 를 의미한다.
			},
			func2 : function(){
				alert(this);// this는 MainClass 를 의미한다.
			}
		})
		function init(){
			var a = new MainClass();
		}
  ]]></comment>
  <comment id="bindForEvent"><![CDATA[
	bindForEvent() 메서드는 객체와 메서드를 묶어 하나의 이벤트 핸들러로 반환한다.
	
	@method bindForEvent
	@param {Variant} [vParameter*] 생성한 이벤트 핸들러에 기본적으로 입력할 첫~N번째 파라미터.
	@see jindo.$Fn#bind
	@see jindo.$Event 
	@ignore
	@deprecated since 2.0.0
	@example
	var name = "김길동";
	function getName(event) {
	    alert("이벤트 종류:" + event.type +", name 값은 "+ this.name);
	}
	
	var person = {
	    "name" : "홍길동"
	};
	
	// 문서 영역 클릭하면 "이벤트 종류: click, name 값은 홍길동"이 출력된다.
	document.body.onclick = $Fn(getName, person).bindForEvent();
  ]]></comment>
  <comment id="attach"><![CDATA[
	attach() 메서드는 함수를 특정 요소의 이벤트 핸들러로 등록한다.

	@method attach
	@syntax elElement, sEvent, bUseCapture
	@syntax vElement, sEvent, bUseCapture
	@syntax sElement, sEvent, bUseCapture
	@remark jindo.$Fn() 객체에 바인딩하여 사용할 때 함수의 반환 값이 false인 경우, 인터넷 익스플로러에서 기본 기능을 막기 때문에 사용하지 않도록 주의한다.<br>
		또한 다음과 같은 제약 사항이 있다.<br>
		<ul class="disc">
			<li>이벤트 이름에는 on 접두어를 사용하지 않는다.</li>
			<li>마우스 휠 스크롤 이벤트는 mousewheel 로 사용한다.</li>
			<li>기본 이벤트 외에 추가로 사용이 가능한 이벤트로 domready, mouseenter, mouseleave, mousewheel이 있다.</li>
		</ul>
	@param {Element} elElement 이벤트 핸들러를 할당할 요소
	@param {Array | $A} vElement 이벤트 핸들러를 할당할 요소로 이루어진 배열
	@param {String} sElement 이벤트 핸들러를 할당할 요소의 id
	@param {String} sEvent 이벤트 종류
	@param {Boolean} [bUseCapture=false] 캡쳐링(capturing) 사용 여부(1.4.2~2.0.0 버전까지  지원). 사용하면 true를 입력한다.
	@return {jindo.$Fn} 생성된 jindo.$Fn() 객체.
	@deprecated Since version 2.0.0. $Element#attach로 변경
	@see jindo.$Fn#detach
	@example
		var someObject = {
		    func : function() {
				// code here
		   }
		}

		// 단일 요소에 클릭 이벤트 핸들러를 등록할 경우
		$Fn(someObject.func, someObject).attach($("test"),"click");

		// 여러 요소에 클릭 이벤트 핸들러를 등록할 경우
		// 아래와 같이 첫 번째 파라미터로 배열이 입력되면 해당 모든 요소에 이벤트 핸들러가 등록된다.
		$Fn(someObject.func, someObject).attach($$(".test"),"click");
  ]]></comment>
  <comment id="attach_1"><![CDATA[
IE9인 경우도 DOMMouseScroll이 동작하지 않음.
  ]]></comment>
  <comment id="attach_2"><![CDATA[
iframe안에서 domready이벤트가 실행되지 않기 때문에 error를 던짐.
  ]]></comment>
  <comment id="detach"><![CDATA[
	detach() 메서드는 요소에 등록된 이벤트 핸들러를 등록 해제한다.

	@method detach
	@param {Element} elElement 이벤트 핸들러를 등록 해제할 요소
	@param {String} sEvent 이벤트 종류. 이벤트 이름에는 on 접두어를 사용하지 않는다.
	@param {Boolean} [bUseCapture=false] 캡쳐링(capturing) 사용 여부(1.4.2~2.0.0 버전까지  지원). 사용하면 true를 입력한다.
	@return {jindo.$Fn} 생성된 jindo.$Fn() 객체.
	@see jindo.$Fn#attach
	@deprecated Since version 2.0.0. $Element#detach 로 변경
	@example
		var someObject = {
		    func : function() {
				// code here
		   }
		}

		var fpFn = $Fn(someObject.func, someObject);
		fpFn.attach($("test"),"click");
		// 단일 요소에 등록된 클릭 이벤트 핸들러를 등록 해제할 경우
		// detach 함수는 attach 함수가 실행 된 같은 $Fn 인스턴스에서만 사용 가능하다
		fpFn.detach($("test"),"click");

		var fpFn = $Fn(someObject.func, someObject);
		fpFn.attach($$(".test"),"click");
		// 여러 요소에 등록된 클릭 이벤트 핸들러를 등록 해제할 경우
		// 아래와 같이 첫 번째 파라미터로 배열이 입력되면 해당 모든 요소에 이벤트 핸들러가 등록된다.
		// detach 함수는 attach 함수가 실행 된 같은 $Fn 인스턴스에서만 사용 가능하다.
		fpFn.detach($$(".test"),"click");
  ]]></comment>
  <comment id="delay"><![CDATA[
	delay() 메서드는 래핑한 함수를 지정한 시간 이후에 호출한다.
	
	@method delay
	@param {Numeric} nSec 함수를 호출할 때까지 대기할 시간(초 단위).
	@param {Array+} [aArgs] 함수를 호출할 때 사용할 파라미터를 담은 배열.
	@return {jindo.$Fn} 생성된 jindo.$Fn() 객체.
	@see jindo.$Fn#bind
	@see jindo.$Fn#setInterval
	@example
		function func(a, b) {
			alert(a + b);
		}
		
		$Fn(func).delay(5, [3, 5]); // 5초 이후에 3, 5 값을 매개변수로 하는 함수 func를 호출한다.
  ]]></comment>
  <comment id="setInterval"><![CDATA[
	setInterval() 메서드는 래핑한 함수를 지정한 시간 간격마다 호출한다.
	
	@method setInterval
	@param {Numeric} nSec 함수를 호출할 시간 간격(초 단위).
	@param {Array+} [aArgs] 함수를 호출할 때 사용할 파라미터를 담은 배열.
	@return {jindo.$Fn} 생성된 jindo.$Fn() 객체.
	@see jindo.$Fn#bind
	@see jindo.$Fn#delay
	@example
		function func(a, b) {
			alert(a + b);
		}
		
		$Fn(func).setInterval(5, [3, 5]); // 5초 간격으로 3, 5 값을 매개변수로 하는 함수 func를 호출한다.
  ]]></comment>
  <comment id="repeat"><![CDATA[
	repeat() 메서드는 setInterval() 메서드와 동일하다.
	
	@method repeat
	@param {Numeric} nSec 함수를 호출할 시간 간격(초 단위).
	@param {Array+} [aArgs] 함수를 호출할 때 사용할 파라미터를 담은 배열.
	@return {jindo.$Fn} 생성된 jindo.$Fn() 객체.
	@see jindo.$Fn#setInterval
	@see jindo.$Fn#bind
	@see jindo.$Fn#delay
	@example
		function func(a, b) {
			alert(a + b);
		}
		
		$Fn(func).repeat(5, [3, 5]); // 5초 간격으로 3, 5 값을 매개변수로 하는 함수 func를 호출한다.
  ]]></comment>
  <comment id="stopDelay"><![CDATA[
	stopDelay() 메서드는 delay() 메서드로 지정한 함수 호출을 중지할 때 사용한다.
	
	@method stopDelay
	@return {this} 인스턴스 자신
	@see jindo.$Fn#delay
	@example
		function func(a, b) {
			alert(a + b);
		}
		
		var fpDelay = $Fn(func);
		fpDelay.delay(5, [3, 5]);
		fpDelay.stopDelay();
  ]]></comment>
  <comment id="stopRepeat"><![CDATA[
	stopRepeat() 메서드는 repeat() 메서드로 지정한 함수 호출을 멈출 때 사용한다.
	
	@method stopRepeat
	@return {this} 인스턴스 자신
	@see jindo.$Fn#repeat
	@example
		function func(a, b) {
			alert(a + b);
		}
		
		var fpDelay = $Fn(func);
		fpDelay.repeat(5, [3, 5]);
		fpDelay.stopRepeat();
  ]]></comment>
  <comment id="free"><![CDATA[
	메모리에서 이 객체를 사용한 참조를 모두 해제한다(직접 호출 금지).
	
	@param {Element} elElement 해당 요소의 이벤트 핸들러만 해제.
	@ignore
  ]]></comment>
  <comment id="free_1"><![CDATA[
unload시에 엘리먼트에 attach한 함수를 detach하는 로직이 있는데 해당 로직으로 인하여 unload이벤트가 실행되지 않아 실행시키는 로직을 만듬. 그리고 해당 로직은  gc에서 호출할때만 호출.
  ]]></comment>
  <comment id="sign_fireWhenElementBoundary"><![CDATA[
	비 IE에서 mouseenter/mouseleave 이벤트를 에뮬레이션하기 위한 요소 영역을 벗어나는 경우에만 실행하는 함수 필터
	
	@ignore
  ]]></comment>
  <comment id="gc"><![CDATA[
	gc() 메서드는 문서에서 attach()로 등록한 모든 이벤트 핸들러를 해제한다.
	
	@method gc
	@return {Void}
	@deprecated Since version 2.0.0. 사용못함.
	@see jindo.$Fn#attach
	@example
		var someObject = {
		   func1 : function() {
				// code here
		   },
		   func2 : function() {
				// code here
		   }
		}
		
		$Fn(someObject.func1, someObject).attach($("test1"),"mouseup");
		$Fn(someObject.func2, someObject).attach($("test1"),"mousedown");
		$Fn(someObject.func1, someObject).attach($("test2"),"mouseup");
		$Fn(someObject.func2, someObject).attach($("test2"),"mousedown");
		......
		$Fn.gc();
  ]]></comment>
  <comment id="gc_1"><![CDATA[
레퍼런스를 삭제한다.
  ]]></comment>
  <comment id="freeElement"><![CDATA[
	freeElement() 메서드는 지정한 요소에 할당된 모든 이벤트 핸들러를 해제한다.
	
	@method freeElement
	@param {Element|$Element} elElement 이벤트 핸들러를 해제할 요소.
	@since 1.3.5
	@deprecated Since version 2.0.0. 사용못함.
	@see jindo.$Fn#gc
	@example
		var someObject = {
		    func : function() {
				// code here
		   }
		}
		
		$Fn(someObject.func, someObject).attach($("test"),"mouseup");
		$Fn(someObject.func, someObject).attach($("test"),"mousedown");
		
		$Fn.freeElement($("test"));
  ]]></comment>
</comments>
