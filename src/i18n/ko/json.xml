<comments name="json">
  <comment id="title"><![CDATA[
	@fileOverview $Json의 생성자 및 메서드를 정의한 파일
	@name json.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	jindo.$Json() 객체는 JSON(JavaScript Object Notation)을 다루기 위한 다양한 기능을 제공한다. 생성자에 파라미터로 객체나 문자열을 입력한다. XML 형태의 문자열로 jindo.$Json() 객체를 생성하려면 fromXML() 메서드를 사용한다.
	
	@class jindo.$Json
	@keyword json, 제이슨
  ]]></comment>
  <comment id="constructor"><![CDATA[
	jindo.$Json() 객체를 생성한다.
	
	@constructor
	@param {Varaint} sObject 다양한 타입
	@return {jindo.$Json} 인수를 인코딩한 jindo.$Json() 객체.
	@see jindo.$Json#fromXML
	@see http://www.json.org/json-ko.html json.org
	@example
		var oStr = $Json ('{ zoo: "myFirstZoo", tiger: 3, zebra: 2}');
		
		var d = {name : 'nhn', location: 'Bundang-gu'}
		var oObj = $Json (d);
  ]]></comment>
  <comment id="sign_oldMakeJSON"><![CDATA[
native json의 parse의 성능이 보다 좋지 못해 native json은 사용하지 않음.
  ]]></comment>
  <comment id="fromXML"><![CDATA[
	fromXML() 메서드는 XML 형태의 문자열을 jindo.$Json() 객체로 인코딩한다. XML 형식의 문자열에 XML 요소가 속성을 포함하고 있을 경우 해당 요소의 정보에 해당하는 내용을 하위 객체로 표현한다. 이때 요소가 CDATA 값을 가질 경우 $cdata 속성으로 값을 저장한다.
	
	@static
	@method fromXML
	@param {String+} sXML XML 형태의 문자열.
	@return {jindo.$Json} jindo.$Json() 객체.
	@throws {jindo.$Except.PARSE_ERROR} json객체를 파싱하다가 에러발생할 때.
	@example
		var j1 = $Json.fromXML('<data>only string</data>');
		
		// 결과 :
		// {"data":"only string"}
		
		var j2 = $Json.fromXML('<data><id>Faqh%$</id><str attr="123">string value</str></data>');
		
		// 결과 :
		// {"data":{"id":"Faqh%$","str":{"attr":"123","$cdata":"string value"}}}
  ]]></comment>
  <comment id="fromXML_1"><![CDATA[
$0 : 전체
$1 : 태그명
$2 : 속성문자열
$3 : 닫는태그
$4 : CDATA바디값
$5 : 그냥 바디값
  ]]></comment>
  <comment id="get"><![CDATA[
	get() 메서드는 특정 경로(path)에 해당하는 jindo.$Json() 객체의 값을 반환한다.

	@method get
	@param {String+} sPath 경로를 지정한 문자열
	@return {Array} 지정된 경로에 해당하는 값을 원소로 가지는 배열.
	@throws {jindo.$Except.PARSE_ERROR} json객체를 파싱하다가 에러발생할 때.
	@example
		var j = $Json.fromXML('<data><id>Faqh%$</id><str attr="123">string value</str></data>');
		var r = j.get ("/data/id");
		
		// 결과 :
		// [Faqh%$]
  ]]></comment>
  <comment id="toString"><![CDATA[
	toString() 메서드는 jindo.$Json() 객체를 JSON 문자열 형태로 반환한다.
	
	@method toString
	@return {String} JSON 문자열.
	@see jindo.$Json#toObject
	@see jindo.$Json#toXML
	@see http://www.json.org/json-ko.html json.org
	@example
		var j = $Json({foo:1, bar: 31});
		document.write (j.toString());
		document.write (j);
		
		// 결과 :
		// {"bar":31,"foo":1}{"bar":31,"foo":1}
  ]]></comment>
  <comment id="toXML"><![CDATA[
	toXML() 메서드는 jindo.$Json() 객체를 XML 형태의 문자열로 반환한다.
	
	@method toXML
	@return {String} XML 형태의 문자열.
	@throws {jindo.$Except.PARSE_ERROR} json객체를 파싱하다가 에러발생할 때.
	@see jindo.$Json#toObject
	@see jindo.$Json#toString
	@example
		var json = $Json({foo:1, bar: 31});
		json.toXML();
		
		// 결과 :
		// <foo>1</foo><bar>31</bar>
  ]]></comment>
  <comment id="toObject"><![CDATA[
	toObject() 메서드는 jindo.$Json() 객체를 원래의 데이터 객체로 반환한다.
	
	@method toObject
	@return {Object} 원본 데이터 객체.
	@throws {jindo.$Except.PARSE_ERROR} json객체를 파싱하다가 에러발생할 때.
	@see jindo.$Json#toObject
	@see jindo.$Json#toString
	@see jindo.$Json#toXML
	@example
		var json = $Json({foo:1, bar: 31});
		json.toObject();
		
		// 결과 :
		// {foo: 1, bar: 31}
  ]]></comment>
  <comment id="compare"><![CDATA[
	compare() 메서드는 Json 객체끼리 값이 같은지 비교한다.
	
	@method compare
	@param {Varaint} oData 비교할 Json 포맷 객체.
	@return {Boolean} 비교 결과. 값이 같으면 true, 다르면 false를 반환한다.
	@throws {jindo.$Except.PARSE_ERROR} json객체를 파싱하다가 에러발생할 때.
	@since  1.4.4
	@example
		$Json({foo:1, bar: 31}).compare({foo:1, bar: 31});
		
		// 결과 :
		// true
		
		$Json({foo:1, bar: 31}).compare({foo:1, bar: 1});
		
		// 결과 :
		// false
  ]]></comment>
  <comment id="sign_value"><![CDATA[
	$value() 메서드는 toObject() 메서드와 같이 원래의 데이터 객체를 반환한다.
	
	@method $value
	@return {Object} 원본 데이터 객체.
	@see jindo.$Json#toObject
  ]]></comment>
</comments>
