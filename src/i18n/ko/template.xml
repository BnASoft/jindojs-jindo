<comments name="template">
  <comment id="title"><![CDATA[
	@fileOverview $Template의 생성자 및 메서드를 정의한 파일
	@name template.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	jindo.$Template() 객체를 사용하면 템플릿을 해석하여 템플릿에 동적으로 데이터를 적용할 수 있다.
	
	@class jindo.$Template
	@keyword template, 템플릿
  ]]></comment>
  <comment id="constructor"><![CDATA[
	jindo.$Template() 객체를 생성한다.

	@constructor
	@syntax sTemplate, sEngineName
	@syntax elTemplate, sEngineName
	@param {String+} sTemplate 템플릿으로 사용할 문자열 또는 템플릿 HTML 요소의 id.<br />
		파라미터가 문자열이면 두 가지 방식으로 동작한다.
		<ul class="disc">
			<li>문자열이 HTML 요소의 id라면 HTML 요소의 innerHTML을 템플릿으로 사용한다.</li>
			<li>만약 일반 문자열이라면 문자열 자체를 템플릿으로 사용한다.</li>
		</ul>
	@param {Element+} elTemplate 템플릿으로 HTML 요소. 파라미터가 HTML 요소이면 TEXTAREA와 SCRIPT 요소만 사용할 수 있다.
		<ul class="disc">
			<li>HTML 요소가 SCRIPT 요소인 경우 type 속성은 반드시 "text/template"으로 지정해야 한다.</li>
			<li>HTML 요소의 value 값을 템플릿으로 사용하며, value 값이 없을 경우 HTML 요소의 innerHTML을 템플릿으로 사용한다.</li>
		</ul>
	@param {String+} [sEngineName="default"] 사용할 컴파일 엔진의 이름. 정적 메서드 jindo.$Template.addEngine()를 사용하여 사용자가 원하는 엔진을 등록하여 사용할 수 있다. 각 엔진별로 그에 상응하는 문법의 템플릿을 사용해야 한다.
		@param {String+} [sEngineName."default"] 기존 $Template 엔진. sEngineName 파라미터 생략시 "default" 엔진을 사용한다.
		@param {String+} sEngineName."micro" John Resig의 <auidoc:see content="http://ejohn.org/blog/javascript-micro-templating/">Micro-Templating 엔진</auidoc:see>.
		@param {String+} sEngineName."handlebars" <auidoc:see content="http://handlebarsjs.com/">handlebars 엔진</auidoc:see>.<br />
				handlebars 엔진을 사용하기 위해서는 별도로 해당 js 파일을 삽입해야 한다. 삽입하지 않고 handlebars 엔진으로 인스턴스 생성 후, $Template#process 메서드를 호출 하면 jindo.$Except.NOT_FOUND_HANDLEBARS 오류가 발생한다.
		@param {String+} sEngineName."simple" 2.4.0 버전에 새롭게 추가된, 단순 문자열 치환 엔진.<br />
				simple 엔진의 템플릿 문법은 치환하고자 하는 문자열을 중괄호 2개로 감싸주면 된다. if 문이나 for 문등은 지원하지 않는다. ex) {{replaced}}
	@see jindo.$Template.addEngine
	@history 2.4.0 Update 기존 컴파일 엔진 외에 John Resig의 Micro-Templating 엔진, handlebars 엔진, simple 엔진을 지원한다. 템플릿 문자열을 파싱한 함수를 내부적으로 캐시하므로 성능이 향상되었다.
	@example
		// 파라미터가 일반 문자열인 경우
		var tpl = $Template("{=service} : {=url}");
	@example
		<textarea id="tpl1">
			{=service} : {=url}
		</textarea>
		
		// 같은 TEXTAREA 요소를 템플릿으로 사용한다.
		var template1 = $Template("tpl1");		// 파라미터가 HTML 요소의 ID
		var template2 = $Template($("tpl1"));	// 파라미터가 TEXTAREA 요소인 경우
	@example
		<script type="text/template" id="tpl2">
			{=service} : {=url}
		</script>
		
		// 같은 SCRIPT 요소를 템플릿으로 사용한다
		var template1 = $Template("tpl2");		// 파라미터가 HTML 요소의 ID
		var template2 = $Template($("tpl2"));	// 파라미터가 SCRIPT 요소인 경우
	@example
		<script type="text/template" id="tpl3">
			<%=service%> : <%=url%>
		</script>
		
		// Micro-Templating 엔진을 사용하는 인스턴스로 생성.
		var template = $Template("tpl3", "micro");
	@example
		<script type="text/template" id="tpl4">
			{{service}} : {{url}}
		</script>
		
		// handlebars 엔진을 사용하는 인스턴스로 생성.
		var template = $Template("tpl4", "handlebars");
	@example
		<script type="text/template" id="tpl5">
			{{service}} : {{url}}
		</script>
		
		// simple 엔진을 사용하는 인스턴스로 생성.
		var template = $Template("tpl5", "simple");
	@example
		<script type="text/template" id="tpl6">
			{=service} : {=url}
		</script>
		
		// 사용자 정의 커스텀 엔진을 사용하는 인스턴스로 생성.
		jindo.$Template.addEngine("custom", function(sTemplate){
			return function(htData){
				return sTemplate.replace(/{=([^{}]*)}/g, function(a,b){
					return (typeof htData[b] == "undefined") ? "" : htData[b];
				});
			}
		});
		var template = $Template("tpl6", "custom");
  ]]></comment>
  <comment id="addEngine"><![CDATA[
	템플릿 문자열을 해석할 컴파일 엔진을 등록한다.
	
	@method addEngine
	@static
	@param {String+} sEngineName 등록하려는 컴파일 엔진의 이름 문자열
	@param {Function+} fnEngine 컴파일러 함수를 반환하는 함수
	@example
		// 사용자 정의 커스텀 엔진 등록
		jindo.$Template.addEngine("custom", function(sTemplate){
			return function(htData){
				return sTemplate.replace(/{=([^{}]*)}/g, function(a,b){
					return (typeof htData[b] == "undefined") ? "" : htData[b];
				});
			}
		});
  ]]></comment>
  <comment id="getEngine"><![CDATA[
	$Template.addEngine 에서 등록한 컴파일 엔진을 반환한다.
	
	@method getEngine
	@static
	@param {String+} sEngineName 반환받고자하는 컴파일 엔진의 이름 문자열
	@return {Function} 등록된 컴파일 엔진
	@example
		// 등록한 사용자 정의 커스텀 엔진을 반환받음
		var fComplier = jindo.$Template.getEngine("custom");
  ]]></comment>
  <comment id="process"><![CDATA[
	템플릿을 해석하고 데이터를 적용하여 새로운 문자열을 생성한다.
	
	@method process
	@param {Hash+} [oDdata] 템플릿에 적용할 데이터를 가진 객체. 템플릿에 데이터를 적용할 부분은 객체의 속성(property) 이름으로 찾는다.
	@return {String} 템플릿을 해석하고 데이터를 적용한 새로운 문자열.
	@remark 템플릿 내에 구문이 없으면 단순 문자열 치환으로 처리한다. 템플릿을 해석할 때에 템플릿에 구문이 있으면 구문에 따라 템플릿을 해석이 달라진다. 각 구문의 해석은 예제와 다음 표를 참고한다.<br>
		<h5>템플릿 구문</h5>
		<table class="tbl_board">
			<caption class="hide">템플릿 구문</caption>
			<thead>
				<tr>
					<th scope="col" style="width:30%">구분</th>
					<th scope="col">설명</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">{=변수}</td>
					<td class="txt">파라미터로 입력된 데이터 객체에서 변수와 이름이 같은 속성의 값을 출력한다.</td>
				</tr>
				<tr>
					<td class="txt bold">{if 조건}<br>{elseif 조건}<br>{else}<br>{/if}</td>
					<td class="txt">조건에 따라 출력할 템플릿 내용을 선택한다.</td>
				</tr>
				<tr>
					<td class="txt bold">{for [인덱스:]변수 in 배열}<br>{/for}</td>
					<td class="txt">for문 안에 있는 템플릿의 내용을 반복하여 출력한다.</td>
				</tr>
				<tr>
					<td class="txt bold">{set 변수 = 값}</td>
					<td class="txt">템플릿에서 사용할 임시 변수에 값을 할당한다.</td>
				</tr>
				<tr>
					<td class="txt bold">{gset 변수 = 값}</td>
					<td class="txt">set과 달리 지역변수로 할당되어 {js}에서 사용가능하다.(버전 2.0.0부터 사용가능)</td>
				</tr>
				<tr>
					<td class="txt bold">{js 함수}</td>
					<td class="txt">템플릿에서 특정 기능의 함수를 호출한다.</td>
				</tr>
			</tbody>
		</table>
	@example
		// 단순 문자열 치환
		// {=value} 부분의 값을 치환한다.
		var tpl  = $Template("Value1 : {=val1}, Value2 : {=val2}");
		var data = { val1: "first value", val2: "second value" };
		
		document.write( tpl.process(data) );
		
		// 결과
		// Value1 : first value, Value2 : second value
	@example
		// if/elseif/else : 조건문
		// 템플릿을 해석할 때 조건문을 판단하여 처리한다.
		var tpl= $Template("{if num >= 7}7보다 크거나 같다.{elseif num <= 5}5보다 작거나 같다.{else}아마 6?{/if}");
		var data = { num: 5 };
		
		document.write( tpl.process(data) );
		
		// 결과
		// 5보다 작거나 같다.
	@example
		// set : 임시 변수 사용
		// set val=1 로 설정하는 경우 {=val} 부분에 1을 대입한다.
		var tpl  = $Template("{set val3=val1}Value1 : {=val1}, Value2 : {=val2}, Value3 : {=val3}");
		var data = { val1: "first value", val2: "second value" };
		
		document.write( tpl.process(data) );
		
		// 결과
		// Value1 : first value, Value2 : second value, Value3 : first value
	@example
		// gset : 지역 변수로 할당.
		// gset val=1 로 설정하는 경우 {js}을 사용해서 접근 가능하다.
		var tpl  = $Template("{gset length=(=books).length}{for num:book in books}{js length}.{=book}\n{/for}");
		var data = {"books":[1,2,3]};
		
		document.write( tpl.process(data) );
		
		// 결과
		// 3.1
		// 3.2
		// 3.3
	@example
		// js : JavaScript 사용
		// 템플릿을 해석할 때 해당 JavaScript를 실행한다.
		var tpl  = $Template("Value1 : {js $S(=val1).bytes()}, Value2 : {=val2}");
		var data = { val1: "first value", val2: "second value" };
		
		document.write( tpl.process(data) );
		
		// 결과
		// Value1 : 11, Value2 : second value
	@example
		// for in : 반복문(인덱스를 사용하지 않는 경우)
		var tpl  = $Template("<h1>포탈 사이트</h1>\n<ul>{for site in portals}\n<li><a href='{=site.url}'>{=site.name}</a></li>{/for}\n</ul>");
		var data = { portals: [
			{ name: "네이버", url : "http://www.naver.com" },
			{ name: "다음",  url : "http://www.daum.net" },
			{ name: "야후",  url : "http://www.yahoo.co.kr" }
		]};
		
		document.write( tpl.process(data) );
		
		// 결과
		//<h1>포탈 사이트</h1>
		//<ul>
		//<li><a href='http://www.naver.com'>네이버</a></li>
		//<li><a href='http://www.daum.net'>다음</a></li>
		//<li><a href='http://www.yahoo.co.kr'>야후</a></li>
		//</ul>
	@example
		// for: 반복문(인덱스를 사용하는 경우)
		var tpl  = $Template("{for num:word in numbers}{=word}({=num}){/for}");
		var data = { numbers: ["zero", "one", "two", "three"] };
		
		document.write( tpl.process(data) );
		
		// 결과
		// zero(0) one(1) two(2) three(3)
	@example
		// Micro-Templating 엔진을 사용하여 for 반복문을 사용하는 예제
		var str = '<h1>포탈 사이트</h1><ul><% for ( var i = 0; i < portals.length; i++ ) { %><li><a href="<%=portals[i].url%>"><%=portals[i].name%></a></li><% } %></ul>';
		var tpl = $Template(str, "micro");
		var data = { portals: [
			{ name: "네이버", url : "http://www.naver.com" },
			{ name: "다음",  url : "http://www.daum.net" },
			{ name: "야후",  url : "http://www.yahoo.co.kr" }
		]};
		
		document.write(tpl.process(data));
		
		// 결과
		//<h1>포탈 사이트</h1>
		//<ul>
		//<li><a href='http://www.naver.com'>네이버</a></li>
		//<li><a href='http://www.daum.net'>다음</a></li>
		//<li><a href='http://www.yahoo.co.kr'>야후</a></li>
		//</ul>
	@example
		// handlebars 엔진을 사용하여 for 반복문을 사용하는 예제
		var str = '<h1>포탈 사이트</h1><ul>{{#each portals}}<li><a href="{{url}}">{{name}}</a></li>{{/each}}</ul>';
		var tpl = $Template(str, "handlebars");
		var data = { portals: [
			{ name: "네이버", url : "http://www.naver.com" },
			{ name: "다음",  url : "http://www.daum.net" },
			{ name: "야후",  url : "http://www.yahoo.co.kr" }
		]};
		
		document.write(tpl.process(data));
		
		// 결과
		//<h1>포탈 사이트</h1>
		//<ul>
		//<li><a href='http://www.naver.com'>네이버</a></li>
		//<li><a href='http://www.daum.net'>다음</a></li>
		//<li><a href='http://www.yahoo.co.kr'>야후</a></li>
		//</ul>
	@example
		// simple 엔진을 사용하는 예제
		var str = '<h1>포탈 사이트</h1><ul><li><a href="{{url0}}">{{name0}}</a></li><li><a href="{{url1}}">{{name1}}</a></li><li><a href="{{url2}}">{{name2}}</a></li></ul>';
		var tpl = $Template(str, "simple");
		var data = {
			url0 : "http://www.naver.com",
			url1 : "http://www.daum.net",
			url2 : "http://www.yahoo.co.kr",
			name0 : "네이버",
			name1 : "다음",
			name2 : "야후"
		}
		
		document.write(tpl.process(data));
		
		// 결과
		//<h1>포탈 사이트</h1>
		//<ul>
		//<li><a href='http://www.naver.com'>네이버</a></li>
		//<li><a href='http://www.daum.net'>다음</a></li>
		//<li><a href='http://www.yahoo.co.kr'>야후</a></li>
		//</ul>
  ]]></comment>
</comments>