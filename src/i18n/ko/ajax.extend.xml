<comments name="ajax.extend">
	<comment id="title"><![CDATA[
	@fileOverview $Ajax의 확장 메서드를 정의한 파일
	@name Ajax.extend.js
	@author NAVER Ajax Platform
	]]></comment>
    <comment id="requestBase_desc"><![CDATA[
	Ajax 요청 객체의 기본 객체이다.

	@class jindo.$Ajax.RequestBase
	@ignore
    ]]></comment>
    <comment id="requestBase"><![CDATA[
	Ajax 요청 타입 별로 Ajax 요청 객체를 생성할 때 Ajax 요청 객체를 생성하기 위한 상위 객체로 사용한다.
	
	@constructor
	@ignore
	@see jindo.$Ajax
    ]]></comment>
    <comment id="jSONPRequest_desc"><![CDATA[
	Ajax 요청 타입이 jsonp인 요청 객체를 생성하며, jindo.$Ajax() 객체에서 Ajax 요청 객체를 생성할 때 사용한다.
	
	@class jindo.$Ajax.JSONPRequest
	@extends jindo.$Ajax.RequestBase
	@ignore
    ]]></comment>
    <comment id="jSONPRequest"><![CDATA[
	jindo.$Ajax.JSONPRequest() 객체를 생성한다. 이때, jindo.$Ajax.JSONPRequest() 객체는 jindo.$Ajax.RequestBase() 객체를 상속한다.
	
	@constructor
	@ignore
	@see jindo.$Ajax
	@see jindo.$Ajax.RequestBase
    ]]></comment>
    <comment id="sWFRequest_desc"><![CDATA[
	Ajax 요청 타입이 flash인 요청 객체를 생성하며, jindo.$Ajax() 객체에서 Ajax 요청 객체를 생성할 때 사용한다.
	
	@class jindo.$Ajax.SWFRequest
	@extends jindo.$Ajax.RequestBase
	@filter desktop
    ]]></comment>
    <comment id="sWFRequest"><![CDATA[
	jindo.$Ajax.SWFRequest() 객체를 생성한다. 이때, jindo.$Ajax.SWFRequest() 객체는 jindo.$Ajax.RequestBase() 객체를 상속한다.
	
	@constructor
	@filter desktop
	@see jindo.$Ajax
	@see jindo.$Ajax.RequestBase
    ]]></comment>
    <comment id="sWFRequest_1"><![CDATA[
 하위 호환을 위해 status가 boolean 값인 경우도 처리
    ]]></comment>
    <comment id="sWFRequest_2"><![CDATA[
 데이터 안에 utf-8이 아닌 다른 인코딩일때 디코딩을 안하고 바로 text에 저장.
    ]]></comment>
    <comment id="sWFRequest_3"><![CDATA[
 콜백코드는 넣었지만, 아직 SWF에서 응답헤더 지원 안함
    ]]></comment>
    <comment id="sWFRequest_write"><![CDATA[
	write() 메서드는 플래시 객체를 초기화하는 메서드로서 write() 메서드를 호출하면 통신을 위한 플래시 객체를 문서 내에 추가한다. Ajax 요청 타입이 flash이면 플래시 객체를 통해 통신한다. 따라서 jindo.$Ajax() 객체의 request 메서드가 호출되기 전에 write() 메서드를 반드시 한 번 실행해야 하며, <body> 요소에 작성되어야 한다. 두 번 이상 실행해도 문제가 발생한다.
	
	@method write
	@param {String+} [sSWFPath="./ajax.swf"] Ajax 통신에 사용할 플래시 파일.
	@filter desktop
	@see jindo.$Ajax#request
	@example
		<body>
		    <script type="text/javascript">
		        $Ajax.SWFRequest.write("/path/swf/ajax.swf");
		    </script>
		</body>
    ]]></comment>
    <comment id="sWFRequest_activeFlash"><![CDATA[
	플래시 객체 로딩 여부를 저장한 변수. 로딩된 경우 true를 반환하고 로딩되지 않은 경우 false를 반환한다. 플래시 객체가 로딩되었는지 확인할 때 사용할 수 있다.	
	
	@method activeFlash
	@filter desktop
	@see jindo.$Ajax.SWFRequest#write
    ]]></comment>
    <comment id="sWFRequest_onload"><![CDATA[
	flash가 정상적으로 load 완료된 후 실행되는 함수.
	
	@method onload
	@filter desktop
	@since 2.0.0
	@see jindo.$Ajax.SWFRequest#onerror
	@example
		var oSWFAjax = $Ajax("http://naver.com/api/test.json",{
			"type" : "flash"
		});
	    $Ajax.SWFRequest.onload = function(){
			oSWFAjax.request();	
		}
    ]]></comment>
    <comment id="sWFRequest_onerror"><![CDATA[
	flash가 정상적으로 load 완료되지 않을때 실행되는 함수.
	
	@method onerror
	@filter desktop
	@see jindo.$Ajax.SWFRequest#onerror
	@since 2.0.0
	@example
		var oSWFAjax = $Ajax("http://naver.com/api/test.json",{
			"type" : "flash"
		});
        $Ajax.SWFRequest.onerror = function(){
			alert("flash로드 실패.다시 로드하세요!");
		}
    ]]></comment>
    <comment id="sWFRequest_loaded"><![CDATA[
	flash에서 로딩 후 실행 시키는 함수.
	
	@method loaded
	@filter desktop
	@ignore
    ]]></comment>
    <comment id="frameRequest_desc"><![CDATA[
	jindo.$Ajax.FrameRequest() 객체는 Ajax 요청 타입이 iframe인 요청 객체를 생성하며, jindo.$Ajax() 객체에서 Ajax 요청 객체를 생성할 때 사용한다.
	
	@class jindo.$Ajax.FrameRequest
	@extends jindo.$Ajax.RequestBase
	@filter desktop
	@ignore
    ]]></comment>
    <comment id="frameRequest"><![CDATA[
	jindo.$Ajax.FrameRequest() 객체를 생성한다. 이때, jindo.$Ajax.FrameRequest() 객체는 jindo.$Ajax.RequestBase() 객체를 상속한다.
	
	@constructor
	@filter desktop
	@ignore
	@see jindo.$Ajax
	@see jindo.$Ajax.RequestBase
    ]]></comment>
    <comment id="queue_desc"><![CDATA[
	jindo.$Ajax.Queue() 객체는 Ajax 요청을 큐에 담아 큐에 들어온 순서대로 요청을 처리한다.
	
	@class jindo.$Ajax.Queue
	@keyword ajaxqueue, queue, ajax, 큐 
    ]]></comment>
    <comment id="queue"><![CDATA[
	jindo.$Ajax() 객체를 순서대로 호출할 수 있도록 기능을 제공한다.
	
	@constructor
	@param {Hash+} oOption jindo.$Ajax.Queue() 객체가 서버로 통신을 요청할 때 사용하는 정보를 정의한다.
		@param {Boolean} [oOption.async=false] 비동기/동기 요청 방식을 설정한다. 비동기 요청 방식이면 true, 동기 요청 방식이면 false를 설정한다.
		@param {Boolean} [oOption.useResultAsParam=false] 이전 요청 결과를 다음 요청의 파라미터로 전달할지 결정한다. 이전 요청 결과를 파라미터로 전달하려면 true, 그렇게 하지 않을 경우 false를 설정한다.
		@param {Boolean} [oOption.stopOnFailure=false] 이전 요청이 실패할 경우 다음 요청 중단 여부를 설정한다. 다음 요청을 중단하려면 true, 계속 실행하려면 false를 설정한다.
	@since 1.3.7
	@see jindo.$Ajax
	@example
		// $Ajax 요청 큐를 생성한다.
		var oAjaxQueue = new $Ajax.Queue({
			useResultAsParam : true
		});
    ]]></comment>
    <comment id="queue_option"><![CDATA[
	option() 메서드는 jindo.$Ajax.Queue() 객체에 설정한 옵션 값을 반환한다.
	
	@method option
	@param {String+} vName 옵션의 이름
	@return {Variant} 입력한 옵션을 반환한다.
	@see jindo.$Ajax.Queue
	@example
		oAjaxQueue.option("useResultAsParam");	// useResultAsParam 옵션 값인 true 를 리턴한다.
    ]]></comment>
    <comment id="queue_option2"><![CDATA[
	option() 메서드는 jindo.$Ajax.Queue() 객체에 지정한 옵션 값을 키와 값으로 설정한다.
	
	@method option
	@syntax sName, vValue
	@syntax oOption
	@param {String+} sName 옵션의 이름(String)
	@param {Variant} [vValue] 설정할 옵션의 값. 설정할 옵션을 vName에 지정한 경우에만 입력한다.
	@param {Hash+} oOption 옵션의 이름(String) 또는 하나 이상의 옵션을 설정한 객체(Object).
	@return {this} 지정한 옵션을 설정한 인스턴스 자신
	@see jindo.$Ajax.Queue
	@example
		var oAjaxQueue = new $Ajax.Queue({
			useResultAsParam : true
		});
		
		oAjaxQueue.option("async", true);		// async 옵션을 true 로 설정한다.
    ]]></comment>
    <comment id="queue_add"><![CDATA[
	add() 메서드는 $Ajax.Queue에 Ajax 요청(jindo.$Ajax() 객체)을 추가한다.
	
	@method add
	@syntax oAjax, oParam
	@param {jindo.$Ajax} oAjax 추가할 jindo.$Ajax() 객체.
	@param {Hash+} [oParam] Ajax 요청 시 전송할 파라미터 객체.
	@return {this} 인스턴스 자신 
	@example
		var oAjax1 = new $Ajax('ajax_test.php',{
			onload :  function(res){
				// onload 핸들러
			}
		});
		var oAjax2 = new $Ajax('ajax_test.php',{
			onload :  function(res){
				// onload 핸들러
			}
		});
		var oAjax3 = new $Ajax('ajax_test.php',{
			onload :  function(res){
				// onload 핸들러
			}
		
		});
		
		var oAjaxQueue = new $Ajax.Queue({
			async : true,
			useResultAsParam : true,
			stopOnFailure : false
		});
		
		// Ajax 요청을 큐에 추가한다.
		oAjaxQueue.add(oAjax1);
		
		// Ajax 요청을 큐에 추가한다.
		oAjaxQueue.add(oAjax1,{seq:1});
		oAjaxQueue.add(oAjax2,{seq:2,foo:99});
		oAjaxQueue.add(oAjax3,{seq:3});
		
		oAjaxQueue.request();
    ]]></comment>
    <comment id="queue_request"><![CDATA[
	request() 메서드는 $Ajax.Queue에 있는 Ajax 요청을 서버로 보낸다.
	
	@method request
	@return {this} 인스턴스 자신 
	@example
		var oAjaxQueue = new $Ajax.Queue({
			useResultAsParam : true
		});
		oAjaxQueue.add(oAjax1,{seq:1});
		oAjaxQueue.add(oAjax2,{seq:2,foo:99});
		oAjaxQueue.add(oAjax3,{seq:3});
		
		// 서버에 Ajax 요청을 보낸다.
		oAjaxQueue.request();
    ]]></comment>
</comments>