<comments name="event">
  <comment id="title"><![CDATA[
	@fileOverview jindo.$Event() 객체의 생성자 및 메서드를 정의한 파일
	@name event.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	jindo.$Event() 객체는 Event 객체를 래핑하여 이벤트 처리와 관련된 확장 기능을 제공한다. 사용자는 jindo.$Event() 객체를 사용하여 발생한 이벤트에 대한 정보를 파악하거나 동작을 지정할 수 있다.
	
	@class jindo.$Event
	@keyword event, 이벤트
  ]]></comment>
  <comment id="constructor"><![CDATA[
	Event 객체를 래핑한 jindo.$Event() 객체를 생성한다.
	
	@constructor
	@param {Event} event Event 객체.
  ]]></comment>
  <comment id="type"><![CDATA[
	이벤트의 종류
	
	@property type
	@type String
  ]]></comment>
  <comment id="srcElement"><![CDATA[
	이벤트가 발생한 엘리먼트
	
	@property srcElement
	@type Element
  ]]></comment>
  <comment id="currentElement"><![CDATA[
	이벤트가 정의된 엘리먼트
	
	@property currentElement
	@type Element
  ]]></comment>
  <comment id="relatedElement"><![CDATA[
	이벤트의 연관 엘리먼트
	
	@property relatedElement
	@type Element
  ]]></comment>
  <comment id="delegatedElement"><![CDATA[
	delegate를 사용할 경우 delegate된 엘리먼트
	
	@property delegatedElement
	@type Element
	@example
		<div id="sample">
			<ul>
					<li><a href="#">1</a></li>
					<li>2</li>
			</ul>
		</div>
		$Element("sample").delegate("click","li",function(e){
			//li 밑에 a를 클릭한 경우.
			e.srcElement -> a
			e.currentElement -> div#sample
			e.delegatedElement -> li
		});
  ]]></comment>
  <comment id="hook"><![CDATA[
	hook() 메서드는 이벤트 명을 조회한다.
	@method hook
	@syntax vName
	@static
	@param {String+} vName 이벤트명(String)
	@remark 2.5.0부터 사용가능하다.
	@return {Variant} 이벤트를 나타내는 값 혹은 함수.
	@example
		$Event.hook("pointerDown");
		//MsPointerDown
	
  ]]></comment>
  <comment id="hook2"><![CDATA[
	hook() 메서드는 개발자가 이벤트를 만들면 진도에서 해당 이벤트가 들어왔을 때 변경하여 사용한다.
	@method hook
	@syntax vName, vValue
	@syntax oList
	@static
	@param {String+} vName 이벤트명(String)
	@param {Variant} vValue 변경할 이벤트명(String|Function)
	@param {Hash+} oList 하나 이상의 이벤트 명과 값을 가지는 객체(Object) 또는 해시 객체(jindo.$H() 객체).
	@remark 2.5.0부터 사용가능하다.
	@return {$Event} $Event
	
	
	@example
		$Event.hook("pointerDown","MsPointerDown");
		
		$Element("some").attach("pointerDown",function(){});
		//개발자가 hook으로 등록하면 진도는 이벤트를 할당할 때 이름을 변경한다.
		//pointerDown -> MsPointerDown
	@example
		//함수도 할당할 수 있다.
		$Event.hook("pointerDown",function(){
			if(isWindow8&&isIE){
				return "MsPointerDown";
			}else if(isMobile){
				return "touchdown";
			}else{
				return "mousedown";
			}
		});
		
		$Element("some").attach("pointerDown",function(){});
		//윈도우8이고 IE10인 경우는 MsPointerDown	
		//모바일인 경우는 touchdown	
		//기타는 mousedown	

  ]]></comment>
  <comment id="customEvent"><![CDATA[
	customEvent() 메서드는 개발자가 가상의 이벤트를 만들 수 있다.
	@method customEvent
	@syntax vName
	@syntax vName, vEvent
	@static
	@param {String+} vName 이벤트명(String)
	@param {Hash+} vEvent fire할 조건을 할당.
	@remark 2.6.0부터 사용가능하다.
	@return {$Event} $Event
	
	
	@example
		$Event.customEvent("allReady");
		
		$Element("some").attach("allReady",function(){
			console.log("allReady");
		});
		
		$Element("some").fireEvent("allReady");
		//console.log("allReady");
		
	@example
		$Event.customEvent("longTap",{
			"mousedown" : function(we){
				var self = this;
				this.isPassed4S = false;
				this.timerID = setTimeout(function(){
					self.isPassed4S = true; 
				},4000); 
			},
			"mouseup":function(){
				if(isPassed4S){
					this.fireEvent({
						"type" : "longTap"
					});
				}
			}
		});
		
		$Element("some").attach("longTap",function(we){
			console.log(we.type);
		});
		
		//some엘리먼트에 mousedown하고 4초후 mouseup을 하면 이벤트가 실행된다.

  ]]></comment>
  <comment id="mouse"><![CDATA[
	mouse() 메서드는 마우스 이벤트 정보를 담고 있는 객체를 반환한다.
	
	@method mouse
	@param {Boolean} [bIsScrollbar=false] true이면 scroll속성을 알 수 있다. (2.0.0 버전부터 지원).
	@return {Object} 마우스 이벤트 정보를 갖는 객체.
		@return {Number} .delta 마우스 휠을 굴린 정도를 정수로 저장한다. 마우스 휠을 위로 굴린 정도는 양수 값으로, 아래로 굴린 정도는 음수 값으로 저장한다.
		@return {Boolean} .left 마우스 왼쪽 버튼 클릭 여부를 불리언 형태로 저장한다.
		@return {Boolean} .middle 마우스 가운데 버튼 클릭 여부를 불리언 형태로 저장한다.
		@return {Boolean} .right 마우스 오른쪽 버튼 클릭 여부를 불리언 형태로 저장한다.
		@return {Boolean} .scrollbar 이벤트가 스크롤 도중 발생했는지를 알 수 있다.
	@filter desktop
	@example
		function eventHandler(evt) {
		   var mouse = evt.mouse();
		
		   mouse.delta;     // Number. 휠이 움직인 정도. 휠을 위로 굴리면 양수, 아래로 굴리면 음수.
		   mouse.left;      // 마우스 왼쪽 버튼을 입력된 경우 true, 아니면 false
		   mouse.middle;    // 마우스 중간 버튼을 입력된 경우 true, 아니면 false
		   mouse.right;     // 마우스 오른쪽 버튼을 입력된 경우 true, 아니면 false
		   mouse.scrollbar; // 이벤트가 스크롤 도중 발생한 경우 true, 아니면 false
		}
  ]]></comment>
  <comment id="_event_isScroll_1"><![CDATA[
	// IE 의 경우 componentFromPoint 메서드를 제공하므로 이걸 활용
  ]]></comment>
  <comment id="_event_isScroll_2"><![CDATA[
	// 파이어폭스는 스크롤바 클릭시 XUL 객체로 지정
  ]]></comment>
  <comment id="_event_isScroll_3"><![CDATA[
	// 엘리먼트 내에서 클릭된 위치 얻기
  ]]></comment>
  <comment id="_event_isScroll_4"><![CDATA[
	// Webkit 의 경우 border 의 사이즈가 더해져서 나옴
  ]]></comment>
  <comment id="_event_isScroll_5"><![CDATA[
	// 스크롤바가 있는 영역
  ]]></comment>
  <comment id="key"><![CDATA[
	key() 메서드는 키보드 이벤트 정보를 담고 있는 객체를 반환한다.
	
	@method key
	@return {Object} 키보드 이벤트 정보를 갖는 객체.
		@return {Boolean} .alt ALT 키 입력 여부를 불리언 형태로 저장한다.
		@return {Boolean} .ctrl CTRL 키 입력 여부를 불리언 형태로 저장한다.
		@return {Boolean} .down 아래쪽 방향키 입력 여부를 불리언 형태로 저장한다.
		@return {Boolean} .enter 엔터(enter)키 입력 여부를 불리언 형태로 저장한다.
		@return {Boolean} .esc ESC 키 입력 여부를 불리언 형태로 저장한다.
		@return {Boolean} .keyCode 입력한 키의 코드 값을 정수 형태로 저장한다.
		@return {Boolean} .left 왼쪽 방향키 입력 여부를 불리언 형태 저장한다.
		@return {Boolean} .meta META키(Mac 용 키보드의 Command 키) 입력 여부를 불리언 형태로 저장한다.
		@return {Boolean} .right 오른쪽 방향키 입력 여부를 불리언 형태로 저장한다.
		@return {Boolean} .shift Shift키 입력 여부를 불리언 형태로 저장한다.
		@return {Boolean} .up 위쪽 방향키 입력 여부를 불리언 형태로 저장한다.
	@example
		function eventHandler(evt) {
		   var key = evt.key();
		
		   key.keyCode; // Number. 키보드의 키코드
		   key.alt;     // Alt 키를 입력된 경우 true.
		   key.ctrl;    // Ctrl 키를 입력된 경우 true.
		   key.meta;    // Meta 키를 입력된 경우 true.
		   key.shift;   // Shift 키를 입력된 경우 true.
		   key.up;      // 위쪽 화살표 키를 입력된 경우 true.
		   key.down;    // 아래쪽 화살표 키를 입력된 경우 true.
		   key.left;    // 왼쪽 화살표 키를 입력된 경우 true.
		   key.right;   // 오른쪽 화살표 키를 입력된 경우 true.
		   key.enter;   // 리턴키를 눌렀으면 true
		   key.esc;   // ESC키를 눌렀으면 true
		}
  ]]></comment>
  <comment id="pos"><![CDATA[
	pos() 메서드는 마우스 커서의 위치 정보를 담고 있는 객체를 반환한다.
	
	@method pos
	@param {Boolean} [bGetOffset] 이벤트가 발생한 요소에서 마우스 커서의 상대 위치인 offsetX, offsetY 값을 구할 것인지를 결정할 파라미터. bGetOffset 값이 true면 값을 구한다.
	@return {Object} 마우스 커서의 위치 정보.
		@return {Number} .clientX 화면을 기준으로 마우스 커서의 X좌표를 저장한다.
		@return {Number} .clientY 화면을 기준으로 마우스 커서의 Y좌표를 저장한다.
		@return {Number} .offsetX DOM 요소를 기준으로 마우스 커서의 상대적인 X좌표를 저장한다.
		@return {Number} .offsetY DOM 요소를 기준으로 마우스 커서의 상대적인 Y좌표를 저장한다.
		@return {Number} .pageX 문서를 기준으로 마우스 커서의 X 좌표를 저장한다.
		@return {Number} .pageY 문서를 기준으로 마우스 커서의 Y좌표를 저장한다.
	@remark 
		<ul class="disc">
			<li>pos() 메서드를 사용하려면 Jindo 프레임워크에 $Element() 객체가 포함되어 있어야 한다.</li>
		</ul>
	@example
		function eventHandler(evt) {
		   var pos = evt.pos();
		
		   pos.clientX;  // 현재 화면에 대한 X 좌표
		   pos.clientY;  // 현재 화면에 대한 Y 좌표
		   pos.offsetX; // 이벤트가 발생한 엘리먼트에 대한 마우스 커서의 상대적인 X좌표 (1.2.0 이상)
		   pos.offsetY; // 이벤트가 발생한 엘리먼트에 대한 마우스 커서의 상대적인 Y좌표 (1.2.0 이상)
		   pos.pageX;  // 문서 전체에 대한 X 좌표
		   pos.pageY;  // 문서 전체에 대한 Y 좌표
		}
  ]]></comment>
  <comment id="pos_1"><![CDATA[
오프셋을 구하는 메서드의 비용이 크므로, 요청시에만 구하도록 한다.
  ]]></comment>
  <comment id="stop"><![CDATA[
	stop() 메서드는 이벤트의 버블링과 기본 동작을 중지시킨다. 버블링은 특정 HTML 엘리먼트에서 이벤트가 발생했을 때 이벤트가 상위 노드로 전파되는 현상이다. 예를 들어, &lt;div&gt; 요소를 클릭할 때 &lt;div&gt; 요소와 함께 상위 요소인 document 요소에도 onclick 이벤트가 발생한다. stop() 메서드는 지정한 객체에서만 이벤트가 발생하도록 버블링을 차단한다.
	
	@method stop
	@param {Numeric} [nCancelConstant=$Event.CANCEL_ALL] $Event() 객체의 상수. 지정한 상수에 따라 이벤트의 버블링과 기본 동작을 선택하여 중지시킨다. (1.1.3 버전부터 지원).
		@param {Numeric} [nCancelConstant.$Event.CANCEL_ALL] 버블링과 기본 동작을 모두 중지
		@param {Numeric} nCancelConstant.$Event.CANCEL_BUBBLE 버블링을 중지
		@param {Numeric} nCancelConstant.$Event.CANCEL_DEFAULT 기본 동작을 중지
	@return {this} 창의 버블링과 기본 동작을 중지한 인스턴스 자신
	@see jindo.$Event.CANCEL_ALL
	@see jindo.$Event.CANCEL_BUBBLE
	@see jindo.$Event.CANCEL_DEFAULT
	@example
		// 기본 동작만 중지시키고 싶을 때 (1.1.3버전 이상)
		function stopDefaultOnly(evt) {
			// Here is some code to execute
		
			// Stop default event only
			evt.stop($Event.CANCEL_DEFAULT);
		}
  ]]></comment>
  <comment id="stopImmediatePropagation"><![CDATA[
 * @description stopImmediatePropagation() 메서드는 바로 이벤트 버블링을 중지한다.
 * @return {jindo.$Event} 이벤트 객체.
 * @example
$Element("id").attach("click",function(e){
	alert(1);
	e.stopImmediatePropagation();//-> 바로 정지 되어 아래에 alert(2)는 호출안 됨.
});
$Element("id").attach("click",function(e){
	alert(2);
});
  ]]></comment>
  <comment id="isImmediatePropagationStopped"><![CDATA[
 * @description isImmediatePropagationStopped() 메서드는 stopImmediatePropagation이 호출되었는지 여부를 확인할 수 있다.
 * @return {Boolean} 사용 여부.
  ]]></comment>
  <comment id="isPropagationStopped"><![CDATA[
 * @description isPropagationStopped() 메서드는 stopBubble의 호출 여부을 알수 있다.
 * @return {Boolean} 사용 여부.
  ]]></comment>
  <comment id="isBubbleStopped"><![CDATA[
 * @description isBubbleStopped() 메서드는 stopBubble의 호출 여부을 알수 있다.
 * @return {Boolean} 사용 여부.
  ]]></comment>
  <comment id="stopDefault"><![CDATA[
	stopDefault() 메서드는 이벤트의 기본 동작을 중지시킨다. stop() 메서드의 파라미터로 CANCEL_DEFAULT 값을 입력한 것과 같다.
	
	@method stopDefault
	@return {this} 이벤트의 기본 동작을 중지한 인스턴스 자신
	@see jindo.$Event#stop
	@see jindo.$Event.CANCEL_DEFAULT
  ]]></comment>
  <comment id="stopBubble"><![CDATA[
	stopBubble() 메서드는 이벤트의 버블링을 중지시킨다. stop() 메서드의 파라미터로 CANCEL_BUBBLE 값을 입력한 것과 같다.
	
	@method stopBubble
	@return {this} 이벤트의 버블링을 중지한 인스턴스 자신
	@see jindo.$Event#stop
	@see jindo.$Event.CANCEL_BUBBLE
  ]]></comment>
  <comment id="cancel_bubble"><![CDATA[
	CANCEL_BUBBLE는 stop() 메서드에서 버블링을 중지시킬 때 사용되는 상수이다.
	
	@property CANCEL_BUBBLE
	@static
	@constant
	@type Number
	@default 1
	@see jindo.$Event#stop
	@final
  ]]></comment>
  <comment id="cancel_default"><![CDATA[
	CANCEL_DEFAULT는 stop() 메서드에서 기본 동작을 중지시킬 때 사용되는 상수이다.
	
	@property CANCEL_DEFAULT
	@static
	@constant
	@type Number
	@default 2
	@see jindo.$Event#stop
	@final
  ]]></comment>
  <comment id="cancel_all"><![CDATA[
	CANCEL_ALL는 stop() 메서드에서 버블링과 기본 동작을 모두 중지시킬 때 사용되는 상수이다.
	
	@property CANCEL_ALL
	@static
	@constant
	@type Number
	@default 3
	@see jindo.$Event#stop
	@final
  ]]></comment>
  <comment id="sign_value"><![CDATA[
	$value 메서드는 원본 Event 객체를 리턴한다
	
	@method $value
	@return {Event} 원본 Event 객체
	@example
		function eventHandler(evt){
			evt.$value();
		}
  ]]></comment>
  <comment id="changedTouch"><![CDATA[
	모바일에서 touch관련 이벤트를 사용시 changeTouches객체를 좀 더 쉽게 사용하도록 한다.
	
	@method changedTouch
	@param {Numeric} [nIndex] 인덱스 번호, 이 옵션을 지정하지 않으면 각종 정보 데이터가 들어있는 배열을 리턴한다.
	@return {Array | Hash} 각종 정보 데이터가 들어있는 배열 또는 각종 정보 데이터
	@throws {$Except.NOT_SUPPORT_METHOD} 데스크탑에서 사용할 때 예외상황 발생.
	@filter mobile
	@since 2.0.0 
	@see jindo.$Event#targetTouch
	@see jindo.$Event#pos
	@example
		$Element("only_mobile").attach("touchstart",function(e){
			e.changedTouch(0);
			{
			   "id" : "123123",// identifier
			   "event" : $Event,// $Event
			   "element" : element, // 해당 엘리먼트
			   "pos" : function(){}//  메서드 (Pos메서드과 같음)
			}
			
		 	e.changedTouch();
			[
				{
				   "id" : "123123",
				   "event" : $Event,
				   "element" : element,
				   "pos" : function(){}
				},
				{
				   "id" : "123123",
				   "event" : $Event,
				   "element" : element,
				   "pos" : function(){}
				}
			]
		 });
  ]]></comment>
  <comment id="targetTouch"><![CDATA[
	모바일에서 touch관련 이벤트를 사용시 targetTouches객체를 좀 더 쉽게 사용하도록 한다.
	
	@method targetTouch
	@param {Numeric} [nIndex] 인덱스 번호, 이 옵션을 지정하지 않으면 각종 정보 데이터가 들어있는 배열을 리턴한다.
	@return {Array | Hash} 각종 정보 데이터가 들어있는 배열 또는 각종 정보 데이터
	@throws {$Except.NOT_SUPPORT_METHOD} 데스크탑에서 사용할 때 예외상황 발생.
	@filter mobile
	@since 2.0.0
	@see jindo.$Event#changedTouch
	@see jindo.$Event#pos
	@example
		$Element("only_mobile").attach("touchstart",function(e){
			e.targetTouch(0);
			{
			   "id" : "123123",// identifier
			   "event" : $Event,// $Event
			   "element" : element, // 해당 엘리먼트
			   "pos" : function(){}//  메서드 (Pos메서드과 같음)
			}
			
			e.targetTouch();
			[
				{
				   "id" : "123123",
				   "event" : $Event,
				   "element" : element,
				   "pos" : function(){}
				},
				{
				   "id" : "123123",
				   "event" : $Event,
				   "element" : element,
				   "pos" : function(){}
				}
			]
		 });
  ]]></comment>
    <comment id="touch"><![CDATA[
	모바일에서 touch관련 이벤트를 사용시 touches객체를 좀 더 쉽게 사용하도록 한다.

	@method touch
	@param {Numeric} [nIndex] 인덱스 번호, 이 옵션을 지정하지 않으면 각종 정보 데이터가 들어있는 배열을 리턴한다.
	@return {Array | Hash} 각종 정보 데이터가 들어있는 배열 또는 각종 정보 데이터
	@throws {$Except.NOT_SUPPORT_METHOD} 데스크탑에서 사용할 때 예외상황 발생.
	@filter mobile
	@since 2.0.0
	@see jindo.$Event#changedTouch
	@see jindo.$Event#pos
	@example
		$Element("only_mobile").attach("touchstart",function(e){
			e.touch(0);
			{
			   "id" : "123123",// identifier
			   "event" : $Event,// $Event
			   "element" : element, // 해당 엘리먼트
			   "pos" : function(){}//  메서드 (Pos메서드과 같음)
			}

			e.touch();
			[
				{
				   "id" : "123123",
				   "event" : $Event,
				   "element" : element,
				   "pos" : function(){}
				},
				{
				   "id" : "123123",
				   "event" : $Event,
				   "element" : element,
				   "pos" : function(){}
				}
			]
		 });
  ]]></comment>
</comments>
