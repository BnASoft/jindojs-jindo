<comments name="core">
  <comment id="title"><![CDATA[
	@fileOverview $() 함수, jindo.$Jindo() 객체, jindo.$Class() 객체를 정의한 파일.
	@name core.js
	@author NAVER Ajax Platform
  ]]></comment>
   <comment id="etc"><![CDATA[
	agent의 dependency를 없애기 위해 별도로 설정.
	
	@ignore
  ]]></comment>
  <comment id="jindo_desc"><![CDATA[
	jindo.$Jindo() 객체는 프레임워크에 대한 정보와 유틸리티 함수를 제공한다.

	@class jindo.$Jindo
	@keyword core, 코어, $Jindo
  ]]></comment>
  <comment id="constructor"><![CDATA[
	jindo.$Jindo() 객체를 생성한다. jindo.$Jindo() 객체는 Jindo 프레임워크에 대한 정보와 유틸리티 함수를 제공한다.
	
	@constructor
	@remark 다음은 Jindo 프레임워크 정보를 담고 있는 객체의 속성을 설명한 표이다.<br>
		<h5>Jindo 프레임워크 정보 객체 속성</h5>
		<table class="tbl_board">
			<caption class="hide">Jindo 프레임워크 정보 객체 속성</caption>
			<thead>
				<tr>
					<th scope="col" style="width:15%">이름</th>
					<th scope="col" style="width:15%">타입</th>
					<th scope="col">설명</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">version</td>
					<td>Number</td>
					<td class="txt">Jindo 프레임워크의 버전을 저장한다.</td>
				</tr>
		</table>
  ]]></comment>
  <comment id="version"><![CDATA[
	사용하는 JindoJS의 버전
	
	@property VERSION
	@static
	@type String
	@example
		console.log(jindo.$Jindo.VERSION); // "2.9.0"
	@since 2.4.0
  ]]></comment>
  <comment id="compatible"><![CDATA[
	호환 모드를 설정하고 반환하는 함수.
	
	@method compatible
	@ignore
	@param {Boolean} bType
	@return {Boolean} [true | false]
  ]]></comment>
  <comment id="mixin"><![CDATA[
	오브젝트를 mixin할 때 사용.(source의 속성중 오브젝트는 넘어감.)
	
	@method mixin
	@static
	@param {Hash} oDestination
	@param {Hash} oSource
	@return {Hash} oNewObject
	@since 2.2.0
	@example
		var oDestination = {
			"foo" :1,
			"test" : function(){}
		};
		var oSource = {
			"bar" :1,
			"obj" : {},
			"test2" : function(){}
		};
		
		var  oNewObject = jindo.$Jindo.mixin(oDestination,oSource);
		
		oNewObject == oDestination //false
		
		// oNewObject => {
		// "foo" :1,
		// "test" : function(){},
		//     
		// "bar" :1,
		// "obj" : {},
		// "test2" : function(){}
		// };
  ]]></comment>
  <comment id="is_function"><![CDATA[
	파라미터가 Function인지 확인하는 함수.
	
	@method isFunction
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_array"><![CDATA[
	파라미터가 Array인지 확인하는 함수.
	
	@method isArray
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_string"><![CDATA[
	파라미터가 String인지 확인하는 함수.
	
	@method isString
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_numeric"><![CDATA[
	파라미터가 Numeric인지 확인하는 함수.
	
	@method isNumeric
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_boolean"><![CDATA[
	파라미터가 Boolean인지 확인하는 함수.
	
	@method isBoolean
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_date"><![CDATA[
	파라미터가 Date인지 확인하는 함수.
	
	@method isDate
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_regexp"><![CDATA[
	파라미터가 Regexp인지 확인하는 함수.
	
	@method isRegexp
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_element"><![CDATA[
	파라미터가 Element인지 확인하는 함수.
	
	@method isElement
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_document"><![CDATA[
	파라미터가 Document인지 확인하는 함수.
	
	@method isDocument
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_node"><![CDATA[
	파라미터가 Node인지 확인하는 함수.
	
	@method isNode
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_hash"><![CDATA[
	파라미터가 Hash인지 확인하는 함수.
	
	@method isHash
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_null"><![CDATA[
	파라미터가 Null인지 확인하는 함수.
	
	@method isNull
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_undefined"><![CDATA[
	파라미터가 Undefined인지 확인하는 함수.
	
	@method isUndefined
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_window"><![CDATA[
	파라미터가 Window인지 확인하는 함수.
	
	@method isWindow
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="check_var_type"><![CDATA[
	함수 파라미터가 원하는 규칙에 맞는지 검사한다.
	
	@method checkVarType
	@ignore
	@param {Array} aArgs 파라미터 목록
	@param {Hash} oRules 규칙 목록
	@param {String} sFuncName 에러메시지를 보여줄때 사용할 함수명
	@return {Object}
  ]]></comment>
  <comment id="var_type"><![CDATA[
	checkVarType 를 수행할때 사용하고 있는 타입을 얻는다.
	
	@method varType
	@ignore
	@param {String+} sTypeName 타입 이름
	@return {Function} 타입을 검사하는 규칙을 구현하는 함수
  ]]></comment>
  <comment id="var_type2"><![CDATA[
	checkVarType 를 수행할때 사용할 타입을 설정한다.
	
	@method varType
	@ignore
	@syntax sTypeName, fpFunc
	@syntax oTypeLists
	@param {String+} sTypeName 타입 이름
	@param {Function+} fpFunc 타입을 검사하는 규칙을 구현하는 함수
	@param {Hash+} oTypeLists 타입 규칙을 담은 객체, 이 옵션을 사용하면 checkVarType 를 수행할때 사용할 여러개의 타입들을 한번에 설정할 수 있다.
	@return {this} 인스턴스 자신
 ]]></comment>
  <comment id="var_type_not_matched"><![CDATA[
	varType 에 등록한 타입 체크 함수에서 타입이 매칭되지 않음을 알리고 싶을때 사용한다.
	
	@constant VARTYPE_NOT_MATCHED
	@static
	@ignore
 ]]></comment>
  <comment id="namespace_global_"><![CDATA[
	Built-In Namespace _global_
	
	@class jindo
	@static
 ]]></comment>
  <comment id="sign_"><![CDATA[
	$() 함수는 특정 요소를 생성한다. "&lt;tagName&gt;" 과 같은 형식의 문자열을 입력하면 tagName 요소를 가지는 객체를 생성한다.
	
	@method $
	@param {String+} elDomElement 생성될 DOM 요소
	@return {Variant} 요소를 생성하고 객체(Object) 형태로 반환한다.
	@throws {jindo.$Except.NOT_FOUND_ARGUMENT} 파라미터가 없을 경우.
	@remark Jindo 1.4.6 버전부터 마지막 파라미터에 document 요소를 지정할 수 있다.
	@example
		// tagName과 같은 형식의 문자열을 이용하여 객체를 생성한다.
		var el = $("<DIV>");
		var els = $("<DIV id='div1'><SPAN>hello</SPAN></DIV>");
		
		// IE는 iframe에 추가할 엘리먼트를 생성하려고 할 때는 document를 반드시 지정해야 한다.(1.4.6 부터 지원)
		var els = $("<div>" , iframe.contentWindow.document);
		// 위와 같을 경우 div태그가 iframe.contentWindow.document기준으로 생김.
  ]]></comment>
  <comment id="sign2_"><![CDATA[
	$() 함수는 DOM에서 특정 요소를 조작할 수 있게 가져온다. ID를 사용하여 DOM 요소(Element)를 가져온다. 파라미터를 두 개 이상 지정하면 DOM 요소를 원소로하는 배열을 반환한다.
	
	@method $
	@param {String+} sID* 가져올 첫~N 번째 DOM 요소의 ID 또는 생성할 DOM 요소
	@return {Variant} ID 값으로 지정한 DOM 요소(Element) 혹은 DOM 요소를 원소로 가지는 배열(Array)을 반환한다. 만약 ID에 해당하는 요소가 없으면 null 값을 반환한다.
	@throws {jindo.$Except.NOT_FOUND_ARGUMENT} 파라미터가 없을 경우.
	@remark Jindo 1.4.6 버전부터 마지막 파라미터에 document 요소를 지정할 수 있다.
	@example
		// ID를 이용하여 객체를 리턴한다.
		<div id="div1"></div>
		
		var el = $("div1");
		
		// ID를 이용하여 여러개의 객체를 리턴한다.
		<div id="div1"></div>
		<div id="div2"></div>
		
		var els = $("div1","div2"); // [$("div1"),$("div2")]와 같은 결과를 리턴한다.
  ]]></comment>
  <comment id="sign__1"><![CDATA[
마지막 인자가 document일때.
  ]]></comment>
  <comment id="class_desc"><![CDATA[
	jindo.$Class() 객체는 Jindo 프레임워크를 사용하여 객체 지향 프로그래밍 방식으로 애플리케이션을 구현할 수 있도록 지원한다.
	
	@class jindo.$Class
	@keyword class, 클래스
  ]]></comment>
  <comment id="class"><![CDATA[
	클래스(jindo.$Class() 객체)를 생성한다. 파라미터로 클래스화할 객체를 입력한다. 해당 객체에 $init 이름으로 메서드를 등록하면 클래스 인스턴스를 생성하는 생성자 함수를 정의할 수 있다. 또한  키워드를 사용하면 인스턴스를 생성하지 않아도 사용할 수 있는 메서드를 등록할 수 있다.
	
	@constructor
	@param {Hash+} oDef 클래스를 정의하는 객체. 클래스의 생성자, 속성, 메서드 등을 정의한다.
	@return {jindo.$Class} 생성된 클래스(jindo.$Class() 객체).
	@example
		var CClass = $Class({
		    prop : null,
		    $init : function() {
		         this.prop = $Ajax();
		         ...
		    },
			$static : {
				static_method : function(){ return 1;}
			}
		});
		
		var c1 = new CClass();
		var c2 = new CClass();
		
		// c1과 c2는 서로 다른 jindo.$Ajax() 객체를 각각 가진다.
		CClass.static_method(); // 1
		
  ]]></comment>
  <comment id="autoBind"><![CDATA[
	$autoBind속성에 true을 등록하면 _가 들어간 메서드는 자동으로 bind된다.
	
	@property $autoBind
	@type boolean
	@example
		// $autoBind 예제
		var OnAutoBind = $Class({
			$autoBind : true,
			num : 1,
			each : function(){
				$A([1,1]).forEach(this._check);	
			},
			_check : function(v){
				// this === OnScope 인스턴스
				value_of(v).should_be(this.num);
			}
		});
		
		new OnScope().each();
	@filter desktop
  ]]></comment>
  <comment id="static_"><![CDATA[
	$static으로 등록된 메서드는 $Class을 인스턴서화 하지 않아도 사용할 수 있다.
	
	@property $static
	@type Object
	@example
		// $static 예제
		var Static = $Class({
			$static : {
				"do" : function(){
					console.log("static method");
				}
				
			}
		});
		
		Static.do();
		//static method
	@filter desktop
  ]]></comment>
  <comment id="kindOf"><![CDATA[
	자신이 어떤 클래스의 종류인지 확인하는 메서드.
	
	@method kindOf
	@param {jindo.$Class} oClass 확인할 클래스(jindo.$Class() 객체)
	@return {Boolean} true | false
	@since 2.0.0
	@example
		var Parent = $Class ({});
		var Parent2 = $Class ({});
		var Child = $Class ({}).extend(Parent);
		
		var child = new Child();
		child.kindOf(Parent);// true
		child.kindOf(Parent2);// false
  ]]></comment>
  <comment id="extend"><![CDATA[
	extend() 메서드는 특정 클래스(jindo.$Class() 객체)를 상속한다. 상속할 부모 클래스(Super Class)를 지정한다.
	
	@method extend
	@param {jindo.$Class} superClass 상속할 부모 클래스(jindo.$Class() 객체).
	@return {this} 상속된 인스턴스 자신
	@example
		var ClassExt = $Class(classDefinition);
		ClassExt.extend(superClass);
		// ClassExt는 SuperClass를 상속받는다.
  ]]></comment>
  <comment id="super_"><![CDATA[
	$super 속성은 부모 클래스의 메서드에 접근할 때 사용한다. 하위 클래스는 this.$super.method 로 상위 클래스의 메서드에 접근할 수 있으나, this.$super.$super.method 와 같이 한 단계 이상의 상위 클래스는 접근할 수 없다. 또한 부모 클래스와 자식클래스가 같은 이름의 메서드를 가지고 있을 때 자식클래스에서 $super로 같은 이름의 메서드를 호출하면, 부모 클래스의 메서드를 호출한다.
	
	@property $super
	@type $Class
	@example
		var Parent = $Class ({
			a: 100,
			b: 200,
			c: 300,
			sum2: function () {
				var init = this.sum();
				return init;
			},
			sum: function () {
				return this.a + this.b
			}
		});
	
		var Child = $Class ({
			a: 10,
			b: 20,
			sum2 : function () {
				var init = this.sum();
				return init;
			},
			sum: function () {
				return this.b;
			}
		}).extend (Parent);
	
		var oChild = new Child();
		var oParent = new Parent();
	
		oChild.sum();           // 20
		oChild.sum2();          // 20
		oChild.$super.sum();    // 30 -> 부모 클래스의 100(a)과 200(b)대신 자식 클래스의 10(a)과 20(b)을 더한다.
		oChild.$super.sum2();   // 20 -> 부모 클래스의 sum2 메서드에서 부모 클래스의 sum()이 아닌 자식 클래스의 sum()을 호출한다.
  ]]></comment>
  <comment id="invalid_param_message"><![CDATA[잘못된 파라미터입니다.]]></comment>
  <comment id="invalid_param_called"><![CDATA[호출한 형태]]></comment>
  <comment id="invalid_param_suggest"><![CDATA[사용 가능한 형태]]></comment>
  <comment id="invalid_param_manual"><![CDATA[매뉴얼 페이지]]></comment>
  <comment id="exceed_param_warning"><![CDATA[추가적인 파라미터가 있습니다.]]></comment>
  <comment id="cannot_use_option"><![CDATA[해당 옵션은 사용할 수 없습니다.]]></comment>
  <comment id="cannot_use_header"><![CDATA[type이 jsonp 또는 데스크탑 환경에서 CORS 호출시 XDomainRequest(IE8,9) 객체가 사용되는 경우 header메서드는 사용할 수 없습니다.]]></comment>
  <comment id="parse_error"><![CDATA[파싱중 에러가 발생했습니다.]]></comment>
  <comment id="not_found_argument"><![CDATA[파라미터가 없습니다.]]></comment>
  <comment id="not_standard_query"><![CDATA[css셀렉터가 정상적이지 않습니다.]]></comment>
  <comment id="invalid_date"><![CDATA[날짜 포멧이 아닙니다.]]></comment>
  <comment id="require_ajax"><![CDATA[가 없습니다.]]></comment>
  <comment id="not_found_element"><![CDATA[엘리먼트가 없습니다.]]></comment>
  <comment id="has_function_for_group"><![CDATA[그룹으로 지우지 않는 경우 detach할 함수가 있어야 합니다.]]></comment>
  <comment id="none_element"><![CDATA[에 해당하는 엘리먼트가 없습니다.]]></comment>
  <comment id="not_support_selector"><![CDATA[는 지원하지 않는 selector입니다.]]></comment>
  <comment id="not_support_method"><![CDATA[desktop에서 지원하지 않는 메서드 입니다.]]></comment>
  <comment id="not_support_cors"><![CDATA[현재 브라우저는 CORS를 지원하지 않습니다.]]></comment>
  <comment id="json_must_have_array_hash"><![CDATA[get메서드는 json타입이 hash나 array타입만 가능합니다.]]></comment>  
  <comment id="must_append_dom"><![CDATA[document에 붙지 않은 엘리먼트를 기준 엘리먼트로 사용할 수 없습니다.]]></comment>  
  <comment id="not_use_css"><![CDATA[는 css를 사용 할수 없습니다.]]></comment>  
  <comment id="not_work_domready"><![CDATA[domready이벤트는 iframe안에서 사용할 수 없습니다.]]></comment> 
  <comment id="cannot_set_obj_property"><![CDATA[속성은 오브젝트입니다.\n클래스 속성이 오브젝트이면 모든 인스턴스가 공유하기 때문에 위험합니다.]]></comment>
  <comment id="jindo_info"><![CDATA[
    jindo의 버전과 타입 속성

    jindo.VERSION; // 버전정보 문자열 - ex. "2.9.2"
    jindo.TYPE;    // 버전 타입 문자열 (desktop|mobile) - ex. "desktop"
  ]]></comment>
</comments>