<comments name="cssquery">
  <comment id="title"><![CDATA[
	@fileOverview CSS 셀렉터를 사용한 엘리먼트 선택 엔진
	@name cssquery.js
	@author  AjaxUI lab
  ]]></comment>
  <comment id="desc"><![CDATA[
	Built-In Namespace _global_
	
	@class jindo
	@static
  ]]></comment>
  <comment id="cssquery"><![CDATA[
	$$() 함수(cssquery)는 CSS 선택자(CSS Selector)를 사용하여 객체를 탐색한다. $$() 함수 대신 cssquery() 함수를 사용해도 된다.

	@method $$
	@syntax sSelector, elBaseElement
	@syntax sSelector, sBaseElement
	@param {String+} sSelector CSS 선택자.
	@param {Element+} [elBaseElement] 탐색 대상이 되는 DOM 요소. 지정한 요소의 하위 노드에서만 객체를 탐색한다.
	@param {String+} sBaseElement 탐색 대상이 되는 DOM 요소의 ID 문자열. 지정한 요소의 하위 노드에서만 객체를 탐색한다.
	@return {Array} 조건에 해당하는 요소를 배열 형태로 반환한다.
	@remark CSS 선택자로 사용할 수 있는 패턴은 표준 패턴과 비표준 패턴이 있다. 표준 패턴은 CSS Level3 명세서에 있는 패턴을 지원한다. 선택자의 패턴에 대한 설명은 다음 표와 See Also 항목을 참고한다.<br>
		<h5>요소, ID, 클래스 선택자</h5>
		<table class="tbl_board">
			<caption class="hide">요소, ID, 클래스 선택자</caption>
			<thead>
				<tr>
					<th scope="col" style="width:20%">패턴</th>
					<th scope="col">설명</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">*</td>
					<td class="txt">모든 요소.
<pre class="code "><code class="prettyprint linenums">
	$$("*");
	// 문서의 모든 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">HTML Tagname</td>
					<td class="txt">지정된 HTML 태그 요소.
<pre class="code "><code class="prettyprint linenums">
	$$("div");
	// 문서의 모든 &lt;div&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">#id</td>
					<td class="txt">ID가 지정된 요소.
<pre class="code "><code class="prettyprint linenums">
	$$("#application");
	// ID가 application인 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">.classname</td>
					<td class="txt">클래스가 지정된 요소.
<pre class="code "><code class="prettyprint linenums">
	$$(".img");
	// 클래스가 img인 요소.
</code></pre>
					</td>
				</tr>
			</tbody>
		</table>
		<h5>속성 선택자</h5>
		<table class="tbl_board">
			<caption class="hide">속성 선택자</caption>
			<thead>
				<tr>
					<th scope="col" style="width:20%">패턴</th>
					<th scope="col">설명</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">[type]</td>
					<td class="txt">지정된 속성을 갖고 있는 요소.
<pre class="code "><code class="prettyprint linenums">
	$$("input[type]");
	// type 속성을 갖는 &lt;input&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type=value]</td>
					<td class="txt">속성과 값이 일치하는 요소.
<pre class="code "><code class="prettyprint linenums">
	$$("input[type=text]");
	// type 속성 값이 text인 &lt;input&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type^=value]</td>
					<td class="txt">속성의 값이 특정 값으로 시작하는 요소.
<pre class="code "><code class="prettyprint linenums">
	$$("input[type^=hid]");
	//type 속성 값이 hid로 시작하는 &lt;input&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type$=value]</td>
					<td class="txt">속성의 값이 특정 값으로 끝나는 요소.
<pre class="code "><code class="prettyprint linenums">
	$$("input[type$=en]");
	//type 속성 값이 en으로 끝나는 &lt;input&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type~=value]</td>
					<td class="txt">속성 값에 공백으로 구분된 여러 개의 값이 존재하는 경우, 각각의 값 중 한가지 값을 갖는 요소.
<pre class="code "><code class="prettyprint linenums">
	&lt;img src="..." alt="welcome to naver"&gt;
	$$("img[alt~=welcome]"); // 있음.
	$$("img[alt~=naver]"); // 있음.
	$$("img[alt~=wel]"); // 없음.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type*=value]</td>
					<td class="txt">속성 값 중에 일치하는 값이 있는 요소.
<pre class="code "><code class="prettyprint linenums">
	$$("img[alt*=come]"); // 있음.
	$$("img[alt*=nav]"); // 있음.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type!=value]</td>
					<td class="txt">값이 지정된 값과 일치하지 않는 요소.
<pre class="code "><code class="prettyprint linenums">
	$$("input[type!=text]");
	// type 속성 값이 text가 아닌 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[@type]</td>
					<td class="txt">cssquery 전용으로 사용하는 선택자로서 요소의 속성이 아닌 요소의 스타일 속성을 사용한다. CSS 속성 선택자의 특성을 모두 적용해 사용할 수 있다.
<pre class="code "><code class="prettyprint linenums">
	$$("div[@display=block]");
	// &lt;div&gt; 요소 중에 display 스타일 속성의 값이 block인 요소.
</code></pre>
					</td>
				</tr>
			</tbody>
		</table>
		<h5>가상 클래스 선택자</h5>
		<table class="tbl_board">
			<caption class="hide">가상 클래스 선택자</caption>
			<thead>
				<tr>
					<th scope="col" style="width:20%">패턴</th>
					<th scope="col">설명</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">:nth-child(n)</td>
					<td class="txt">n번째 자식인지 여부로 해당 요소를 선택한다.
<pre class="code "><code class="prettyprint linenums">
	$$("div:nth-child(2)");
	// 두 번째 자식 요소인 &lt;div&gt; 요소.
	
	$$("div:nth-child(2n)");
	$$("div:nth-child(even)");
	// 짝수 번째 자식 요소인 모든 &lt;div&gt; 요소.
	
	$$("div:nth-child(2n+1)");
	$$("div:nth-child(odd)");
	// 홀수 번째 자식 요소인 모든 &lt;div&gt; 요소.
	
	$$("div:nth-child(4n)");
	// 4의 배수 번째 자식 요소인 모든 &lt;div&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:nth-last-child(n)</td>
					<td class="txt">nth-child와 동일하나, 뒤에서부터 요소를 선택한다.
<pre class="code "><code class="prettyprint linenums">
	$$("div:nth-last-child(2)");
	// 뒤에서 두 번째 자식 요소인 모든 &lt;div&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:last-child</td>
					<td class="txt">마지막 자식인지 여부로 요소를 선택한다.
<pre class="code "><code class="prettyprint linenums">
	$$("div:last-child");
	// 마지막 자식 요소인 모든 &lt;div&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:nth-of-type(n)</td>
					<td class="txt">n번째로 발견된 요소를 선택한다.
<pre class="code "><code class="prettyprint linenums">
	&lt;div&gt;
		&lt;p&gt;1&lt;/p&gt;
		&lt;span&gt;2&lt;/span&gt;
		&lt;span&gt;3&lt;/span&gt;
	&lt;/div&gt;
</code></pre>
						위와 같은 DOM이 있을 때, $$("span:nth-child(1)")은 &lt;span&gt; 요소가 firstChild인 요소는 없기 때문에 결과 값을 반환하지 않는다 하지만 $$("span:nth-of-type(1)")는 &lt;span&gt; 요소 중에서 첫 번째 &lt;span&gt; 요소인 &lt;span&gt;2&lt;/span&gt;를 얻어오게 된다.<br>nth-child와 마찬가지로 짝수/홀수 등의 수식을 사용할 수 있다.
					</td>
				</tr>
				<tr>
					<td class="txt bold">:first-of-type</td>
					<td class="txt">같은 태그 이름을 갖는 형제 요소 중에서 첫 번째 요소를 선택한다.<br>nth-of-type(1)과 같은 결과 값을 반환한다.</td>
				</tr>
				<tr>
					<td class="txt bold">:nth-last-of-type</td>
					<td class="txt">nth-of-type과 동일하나, 뒤에서부터 요소를 선택한다.</td>
				</tr>
				<tr>
					<td class="txt bold">:last-of-type</td>
					<td class="txt">같은 태그 이름을 갖는 형제 요소 중에서 마지막 요소를 선택한다.<br>nth-last-of-type(1)과 같은 결과 값을 반환한다.</td>
				</tr>
				<tr>
					<td class="txt bold">:contains</td>
					<td class="txt">텍스트 노드에 특정 문자열을 포함하고 있는지 여부로 해당 요소를 선택한다.
<pre class="code "><code class="prettyprint linenums">
	$$("span:contains(Jindo)");
	// "Jindo" 문자열를 포함하고 있는 &lt;span&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:only-child</td>
					<td class="txt">형제가 없는 요소를 선택한다.
<pre class="code "><code class="prettyprint linenums">
	&lt;div&gt;
		&lt;p&gt;1&lt;/p&gt;
		&lt;span&gt;2&lt;/span&gt;
		&lt;span&gt;3&lt;/span&gt;
	&lt;/div&gt;
</code></pre>
						위의 DOM에서 $$("div:only-child")만 반환 값이 있고, $$("p:only-child") 또는 $$("span:only-child")는 반환 값이 없다. 즉, 형제 노드가 없는 &lt;div&gt; 요소만 선택된다.
					</td>
				</tr>
				<tr>
					<td class="txt bold">:empty</td>
					<td class="txt">비어있는 요소를 선택한다.
<pre class="code "><code class="prettyprint linenums">
	$$("span:empty");
	// 텍스트 노드 또는 하위 노드가 없는 &lt;span&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:not</td>
					<td class="txt">선택자의 조건과 반대인 요소를 선택한다.
<pre class="code "><code class="prettyprint linenums">
	$$("div:not(.img)");
	// img 클래스가 없는 &lt;div&gt; 요소.
</code></pre>
					</td>
				</tr>
			</tbody>
		</table>
		<h5>콤비네이터 선택자</h5>
		<table class="tbl_board">
			<caption class="hide">콤비네이터 선택자</caption>
			<thead>
				<tr>
					<th scope="col" style="width:20%">패턴</th>
					<th scope="col">설명</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">공백 (space)</td>
					<td class="txt">하위의 모든 요소를 의미한다.
<pre class="code "><code class="prettyprint linenums">
	$$("body div");
	// &lt;body&gt; 요소 하위에 속한 모든 &lt;div&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">&gt;</td>
					<td class="txt">자식 노드에 속하는 모든 요소를 의미한다.
<pre class="code "><code class="prettyprint linenums">
	$$("div &gt; span");
	// &lt;div&gt; 요소의 자식 요소 중 모든 &lt;span&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">+</td>
					<td class="txt">지정한 요소의 바로 다음 형제 노드에 속하는 모든 요소를 의미한다.
<pre class="code "><code class="prettyprint linenums">
	$$("div + p");
	// &lt;div&gt; 요소의 nextSibling에 해당하는 모든 &lt;p&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">~</td>
					<td class="txt">+ 패턴과 동일하나, 바로 다음 형제 노드뿐만 아니라 지정된 노드 이후에 속하는 모든 요소를 의미한다.
<pre class="code "><code class="prettyprint linenums">
	$$("div ~ p");
	// &lt;div&gt; 요소 이후의 형제 노드에 속하는 모든 &lt;p&gt; 요소.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">!</td>
					<td class="txt">cssquery 전용으로, 콤비네이터의 반대 방향으로 탐색을 시작해 요소를 검색한다.
<pre class="code "><code class="prettyprint linenums">
	$$("span ! div");
	// &lt;span&gt; 요소의 상위에 있는 모든 &lt;div&gt; 요소.
</code></pre>
					</td>
				</tr>
			</tbody>
		</table>
	@see jindo.$Document#queryAll
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 명세서 - W3C
	@history 2.4.0 Support mobile버전 JindoJS에서 ! 콤비네이터 지원(!, !>, !~, !+)
	@example
		// 문서에서 IMG 태그를 찾는다.
		var imgs = $$('IMG');
		
		// div 요소 하위에서 IMG 태그를 찾는다.
		var imgsInDiv = $$('IMG', $('div'));
		
		// 문서에서 IMG 태그 중 가장 첫 요소를 찾는다.
		var firstImg = $$.getSingle('IMG');
  ]]></comment>
  <comment id="cssquery_1"><![CDATA[
querySelector 설정.
  ]]></comment>
  <comment id="cssquery_2"><![CDATA[
빠른 처리를 위해 노드마다 유일키 값 셋팅
  ]]></comment>
  <comment id="backupKeys"><![CDATA[
따옴표, [] 등 파싱에 문제가 될 수 있는 부분 replace 시켜놓기
  ]]></comment>
  <comment id="backupKeys_1"><![CDATA[
작은 따옴표 걷어내기
  ]]></comment>
  <comment id="backupKeys_2"><![CDATA[
큰 따옴표 걷어내기
  ]]></comment>
  <comment id="backupKeys_3"><![CDATA[
[ ] 형태 걷어내기
  ]]></comment>
  <comment id="backupKeys_4"><![CDATA[
( ) 형태 걷어내기
  ]]></comment>
  <comment id="restoreKeys"><![CDATA[
replace 시켜놓은 부분 복구하기
  ]]></comment>
  <comment id="restoreKeys_1"><![CDATA[
( ) 는 한꺼풀만 벗겨내기
  ]]></comment>
  <comment id="restoreString"><![CDATA[
replace 시켜놓은 문자열에서 Quot 을 제외하고 리턴
  ]]></comment>
  <comment id="getNodeIndex"><![CDATA[
노드 인덱스를 구할 수 없으면
  ]]></comment>
  <comment id="oNodeIndexes"><![CDATA[
몇번째 자식인지 설정하는 부분
  ]]></comment>
  <comment id="pseudoe"><![CDATA[
가상 클래스
  ]]></comment>
  <comment id="getExpression"><![CDATA[
단일 part 의 body 에서 expression 뽑아냄
  ]]></comment>
  <comment id="getExpression_1"><![CDATA[
유사클래스 조건 얻어내기
  ]]></comment>
  <comment id="getExpression_2"><![CDATA[
괄호 안에 있는거 재귀파싱하기
  ]]></comment>
  <comment id="getExpression_3"><![CDATA[
[key=value] 형태 조건 얻어내기
  ]]></comment>
  <comment id="getExpression_4"><![CDATA[
클래스 조건 얻어내기
  ]]></comment>
  <comment id="getExpression_5"><![CDATA[
id 조건 얻어내기
  ]]></comment>
  <comment id="getExpression_6"><![CDATA[
match 함수 코드 만들어 내기
  ]]></comment>
  <comment id="getExpression_7"><![CDATA[
유사클래스 조건 검사가 맨 뒤로 가도록 unshift 사용
  ]]></comment>
  <comment id="splitToParts"><![CDATA[
쿼리를 연산자 기준으로 잘라냄
  ]]></comment>
  <comment id="compileParts"><![CDATA[
잘라낸 part 를 함수로 컴파일 하기
  ]]></comment>
  <comment id="compileParts_1"><![CDATA[
잘라낸 부분들 조건 만들기
  ]]></comment>
  <comment id="parseQuery"><![CDATA[
쿼리를 match 함수로 변환
  ]]></comment>
  <comment id="parseTestQuery"><![CDATA[
test 쿼리를 match 함수로 변환
  ]]></comment>
  <comment id="old_cssquery_1"><![CDATA[
ownerDocument 잡아주기
  ]]></comment>
  <comment id="old_cssquery_2"><![CDATA[
브라우저 버전이 IE5.5 이하
  ]]></comment>
  <comment id="old_cssquery_3"><![CDATA[
XMLDocument 인지 체크
  ]]></comment>
  <comment id="old_cssquery_4"><![CDATA[
쿼리를 쉼표로 나누기
  ]]></comment>
  <comment id="old_cssquery_5"><![CDATA[
쉼표로 나눠진 쿼리 루프
  ]]></comment>
  <comment id="old_cssquery_6"><![CDATA[
결과 캐시 뒤짐
  ]]></comment>
  <comment id="old_cssquery_7"><![CDATA[
캐싱되어 있는게 있으면 parent 가 같은건지 검사한후 aSingleQueryResult 에 대입
  ]]></comment>
  <comment id="old_cssquery_8"><![CDATA[
결과 캐시를 사용중이면 캐시에 저장
  ]]></comment>
  <comment id="cssquery_desc"><![CDATA[
 @lends $$
  ]]></comment>
	<comment id="cssquery_desc_1"><![CDATA[
	documentFragment일 때 는 복사해서 찾음.
	]]></comment>
	<comment id="cssquery_desc_2"><![CDATA[
	돔이 붙은 경우는 상위 엘리먼트를 기준으로
	]]></comment>
	<comment id="cssquery_desc_3"><![CDATA[
	돔이 떨어진 경우에는 상위 엘리먼트를 만들어서 탐색.
	]]></comment>
	<comment id="cssquery_desc_4"><![CDATA[
	!= 는 아니면서, '!' 가 있으면(!, !>, !+, !~ 의 경우)
	]]></comment>
	<comment id="cssquery_desc_5"><![CDATA[
	[key=val]일 때 val가 숫자이면  ''로 묶어주는 로직
	]]></comment>
  <comment id="test"><![CDATA[
	test() 메서드는 특정 요소가 해당 CSS 선택자(CSS Selector)에 부합하는 요소인지 판단하여 Boolean 형태로 반환한다.
	
	@method $$.test
	@static
	@param {Element+} element 검사하고자 하는 요소
	@param {String+} sCSSSelector CSS 선택자. CSS 선택자로 사용할 수 있는 패턴은 표준 패턴과 비표준 패턴이 있다. 표준 패턴은 CSS Level3 명세서에 있는 패턴을 지원한다.
	@return {Boolean} 조건에 부합하면 true, 부합하지 않으면 false를 반환한다.
	@remark 
		<ul class="disc">
			<li>CSS 선택자에 연결자는 사용할 수 없음에 유의한다.</li>
			<li>선택자의 패턴에 대한 설명은 $$() 함수와 See Also 항목을 참고한다.</li>
		</ul>
	@see jindo.$$
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 명세서 - W3C
	@example
		// oEl 이 div 태그 또는 p 태그, 또는 align 속성이 center로 지정된 요소인지 검사한다.
		if (cssquery.test(oEl, 'div, p, [align=center]'))
		alert('해당 조건 만족');
  ]]></comment>
  <comment id="useCache"><![CDATA[
	useCache() 메서드는 $$() 함수(cssquery)를 사용할 때 캐시를 사용할 것인지 설정한다. 캐시를 사용하면 동일한 선택자로 탐색하는 경우 탐색하지 않고 기존 탐색 결과를 반환한다. 따라서 사용자가 변수 캐시를 신경쓰지 않고 편하고 빠르게 사용할 수 있는 장점이 있지만 신뢰성을 위해 DOM 구조가 동적으로 변하지 않을 때만 사용해야 한다.
	
	@method $$.useCache
	@static
	@param {Boolean} [bFlag] 캐시 사용 여부를 지정한다. 이 파라미터를 생략하면 캐시 사용 상태만 반환한다.
	@return {Boolean} 캐시 사용 상태를 반환한다.
	@see jindo.$$.clearCache
  ]]></comment>
  <comment id="clearCache"><![CDATA[
	clearCache() 메서드는 $$() 함수(cssquery)에서 캐시를 사용할 때 캐시를 비울 때 사용한다. DOM 구조가 동적으로 바껴 기존의 캐시 데이터가 신뢰성이 없을 때 사용한다.
	
	@method $$.clearCache
	@static
	@see jindo.$$.useCache
  ]]></comment>
  <comment id="getSingle"><![CDATA[
	getSingle() 메서드는 CSS 선택자를 사용에서 조건을 만족하는 첫 번째 요소를 가져온다. 반환하는 값은 배열이 아닌 객채 또는 null이다. 조건을 만족하는 요소를 찾으면 바로 탐색 작업을 중단하기 때문에 결과가 하나라는 보장이 있을 때 빠른 속도로 결과를 가져올 수 있다.
	
	@method $$.getSingle
	@static
	@syntax sSelector, oBaseElement, oOption
	@syntax sSelector, sBaseElement, oOption
	@param {String+} sSelector CSS 선택자(CSS Selector). CSS 선택자로 사용할 수 있는 패턴은 표준 패턴과 비표준 패턴이 있다. 표준 패턴은 CSS3 Level3 명세서에 있는 패턴을 지원한다. 선택자의 패턴에 대한 설명은 $$() 함수와 See Also 항목을 참고한다.
	@param {Element+} [oBaseElement] 탐색 대상이 되는 DOM 요소. 지정한 요소의 하위 노드에서만 객체를 탐색한다. 생략될 경우 문서를 대상으로 찾는다.
	@param {Hash+} [oOption] 옵션 객체에 oneTimeOffCache 속성을 true로 설정하면 탐색할 때 캐시를 사용하지 않는다.
	@param {String+} [sBaseElement] 탐색 대상이 되는 DOM 요소의 ID. 지정한 요소의 하위 노드에서만 객체를 탐색한다. 생략될 경우 문서를 대상으로 찾는다.  ID를 넣을 수 있다.
	@return {Element | Boolean} 선택된 요소. 결과가 없으면 null을 반환한다.
	@see jindo.$Document#query	 
	@see jindo.$$.useCache
	@see jindo.$$
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 명세서 - W3C
  ]]></comment>
  <comment id="xpath"><![CDATA[
	xpath() 메서드는 XPath 문법을 만족하는 요소를 가져온다. 지원하는 문법이 제한적이므로 특수한 경우에만 사용할 것을 권장한다.
	
	@method $$.xpath
	@static
	@param {String+} sXPath XPath 값.
	@param {Element} [elBaseElement] 탐색 대상이 되는 DOM 요소. 지정한 요소의 하위 노드에서만 객체를 탐색한다. 
	@return {Array | Boolean} XPath 문법을 만족하는 요소를 원소로 하는 배열. 결과가 없으면 null을 반환한다.
	@filter desktop
	@see jindo.$Document#xpathAll
	@see http://www.w3.org/standards/techs/xpath#w3c_all XPath 문서 - W3C
  ]]></comment>
  <comment id="debug"><![CDATA[
	debug() 메서드는 $$() 함수(cssquery)를 사용할 때 성능을 측정하기 위한 기능을 제공하는 함수이다. 파라미터로 입력한 콜백 함수를 사용하여 성능을 측정한다.
	
	@method $$.debug
	@static
	@param {Function} fCallback 선택자 실행에 소요된 비용과 시간을 점검하는 함수. 이 파라미터에 함수 대신 false를 입력하면 성능 측정 모드(debug)를 사용하지 않는다.
	@param {Numeric} [nRepeat] 하나의 선택자를 반복 수행할 횟수. 인위적으로 실행 속도를 늦추기 위해 사용할 수 있다.
	@filter desktop
	@remark 콜백 함수 fCallback는 파라미터로 query, cost, executeTime을 갖는다.<br>
		<ul class="disc">
			<li>query는 실행에 사용된 선택자이다.</li>
			<li>index는 탐색에 사용된 비용이다(루프 횟수).</li>
			<li>executeTime 탐색에 소요된 시간이다.</li>
		</ul>
	@example
		cssquery.debug(function(sQuery, nCost, nExecuteTime) {
			if (nCost > 5000)
				console.warn('5000이 넘는 비용이? 확인 -> ' + sQuery + '/' + nCost);
			else if (nExecuteTime > 200)
				console.warn('0.2초가 넘게 실행을? 확인 -> ' + sQuery + '/' + nExecuteTime);
		}, 20);
		
		....
		
		cssquery.debug(false);
  ]]></comment>
  <comment id="safeHTML"><![CDATA[
	safeHTML() 메서드는 인터넷 익스플로러에서 innerHTML 속성을 사용할 때 _cssquery_UID 값이 나오지 않게 하는 함수이다. true로 설정하면 탐색하는 노드의 innerHTML 속성에 _cssquery_UID가 나오지 않게 할 수 있지만 탐색 속도는 느려질 수 있다.
	
	@method $$.safeHTML
	@static
	@param {Boolean} bFlag _cssquery_UID의 표시 여부를 지정한다. true로 설정하면 _cssquery_UID가 나오지 않는다.
	@return {Boolean} _cssquery_UID 표시 여부 상태를 반환한다. _cssquery_UID를 표시하는 상태이면 true를 반환하고 그렇지 않으면 false를 반환한다.
	@filter desktop
  ]]></comment>
  <comment id="version"><![CDATA[
	version 속성은 cssquery의 버전 정보를 담고 있는 문자열이다.
	
	@property $$.version
	@type String
	@field
	@static
	@filter desktop
  ]]></comment>
  <comment id="release"><![CDATA[
	IE에서 validUID,cache를 사용했을때 메모리 닉이 발생하여 삭제하는 모듈 추가.x
  ]]></comment>
  <comment id="getCacheInfo"><![CDATA[
	cache가 삭제가 되는지 확인하기 위해 필요한 함수
	
	@method $$._getCacheInfo
	@filter desktop
	@ignore
  ]]></comment>
  <comment id="resetUID"><![CDATA[
	테스트를 위해 필요한 함수
	
	@method $$._resetUID
	@filter desktop
	@ignore
  ]]></comment>
  <comment id="extreme"><![CDATA[
	querySelector가 있는 브라우져에서 extreme을 실행시키면 querySelector을 사용할수 있는 커버리지가 높아져 전체적으로 속도가 빨리진다.
	하지만 ID가 없는 엘리먼트를 기준 엘리먼트로 넣었을 때 기준 엘리먼트에 임의의 아이디가 들어간다.
	
	@method $$.extreme
	@static
	@ignore
	@param {Boolean} bExtreme true
  ]]></comment>
	<comment id="_commaRevise"><![CDATA[
	다중 선택 쿼리(콤마(,)가 들어 감)의 경우 첫번째 콤마 뒤에 있는 쿼리부터 부모의 식별자를 추가한다.
	아래처럼 쿼리를 날릴 경우
	$$("span, div", $("bumo"));
	sQuery 매개변수엔 "#bumo span, div"가 지정되고,
	sChange 매개벼수엔 ", #bumo"가 지정되어, 치환되고 나면
	"#bumo span, #bumo div"과 같은 형태가 된다.
	
	@ignore
	@method _commaRevise
	@param {String} sQuery 쿼리 문자열
	@param {String} sChange 교체할 문자열
	]]></comment>
	<comment id="_trim"><![CDATA[
	문자열의 앞뒤 공백 문자를 제거한다.
	
	@ignore
	@method _trim
	@param {String} str
	]]></comment>
	<comment id="_getParentElement"><![CDATA[
	부모 요소를 반환한다.
	
	@ignore
	@method _getParentElement
	@param {Object} oParent
	]]></comment>
	<comment id="_cssquery4Excl"><![CDATA[
	!, !> 콤비네이터가 존재하는 경우에만 호출된다. ! : 특정 요소에서부터 상위로 한단계씩 끝까지 올라가면서 부합되는 요소들만 모두 반환한다. !> : 특정 요소의 부합되는 직계 부모 요소를 반환한다. 직계 부모가 부합되지 않으면 빈 배열이 반환된다. 메서드 이름은 '느낌표(exclamation mark)를 위한 cssquery'을 의미한다.
	
	@ignore
	@method _cssquery4Excl
	@param {String} sQuery 쿼리 전체 문자열 (콤마로 구분되어 있을 수 있음)
	@param {HTMLElement} elParent 검색할 기준 요소
	@param {Object} oOptions 옵션
	]]></comment>
	<comment id="_processSingleQuery"><![CDATA[
	단일 쿼리를 처리한다.
	
	@ignore
	@method _processSingleQuery
	@param {String} sQuery 쿼리 전체 문자열
	@param {HTMLElement} elParent 검색할 기준 요소
	@param {Object} oOptions 옵션
	@return {Array} 선택되어진 요소를 원소로 갖는 배열
	]]></comment>
	<comment id="_splitQueryToObject"><![CDATA[
	쿼리를 !, !>, !+, !~ 기준으로 쪼개어서 좌측 쿼리와(자식 혹은 형제), 우측 쿼리(부모 혹은 형제) 그리고 콤비네이터를 속성으로 가지고 있는 오브젝트를 원소로 가지는 배열을 반환한다.
	
	@ignore
	@method _splitQueryToObject
	@param {String} sQuery
	@return {Array} 자식 혹은 형제 선택 쿼리(sLeftQuery), 부모 혹은 형제 선택자(sRightSelector), 콤비네이터(sCombinator)를 속성으로 가지는 오브젝트를 원소로 갖는 배열
	]]></comment>
	<comment id="_splitQueryToObject_1"><![CDATA[
	맨 끝에 남은 선택자가 하나 이상인 경우만 담는다.
	]]></comment>
	<comment id="_getFirstSelector"><![CDATA[
	쿼리의 첫번째 선택자를 반환한다.
	
	@ignore
	@method _getFirstSelector
	@param {String} sQuery 쿼리 문자열
	@return {String} 첫번째 선택자
	]]></comment>
	<comment id="_removeFirstSelector"><![CDATA[
	쿼리의 첫번째 선택자를 제거한다.
	
	@ignore
	@method _removeFirstSelector
	@param {String} sQuery 쿼리 문자열
	@return {String} 첫번째 선택자를 제거한 문자열
	@example
		var sQuery = "p ~ img";
		_removeFirstSelector(sQuery); // "~ img"
	]]></comment>
	<comment id="_getMatchedElement"><![CDATA[
	!, !> 기준으로 좌측과 우측 쿼리는 네이티브 메서드를 사용하여 요소를 찾고, 바로 우측의 첫 셀렉터의 결과 요소들이 좌측 셀렉터의 결과 요소들을 포함하는지를 검사하여 포함하는 요소를 반환한다.
		
		@ignore
		@method _getMatchedElement
		@param {Object} oQuery !, !>, !+, !~ 기준으로 좌측의 쿼리와 바로 우측의 셀렉터 하나, 콤비네이터를 속성으로 가지는 오브젝트
			@param {String} oQuery.sCombinator 콤비네이터
			@param {String} oQuery.sLeftQuery 좌측 자식 혹은 형제 선택 쿼리
			@param {String} oQuery.sRightSelector 우측 부모 혹은 형제 선택자
		@param {HTMLElement} elParent
		@param {Object} oOptions 옵션 객체
		@param {Array} aResult 앞의 쿼리에서 선택되어진 요소들을 원소로 갖는 배열
		@return {Array} 매치결과 배열
	]]></comment>
	<comment id="_getMatchedElement_1"><![CDATA[
	쿼리가 "div span ! p + img" 라면, 아래 조건을 만족하는 것은 "p + img" 일때 이다.
	우측 선택자가 없으므로 aResult를 바로 반환하면 된다.
	]]></comment>
	<comment id="_getPreviousSiblingElementForExcl"><![CDATA[
	!+, !~ 콤비네이터를 기준으로 좌측과 우측 쿼리는 네이티브 메서드를 사용하여 요소를 찾고, 바로 우측의 첫 셀렉터의 결과 요소들이 좌측 셀렉터의 결과 요소들을 포함하는지를 검사하여 포함하는 요소를 반환한다. 메서드명 끝에 붙은 Excl은 exclamation mark(느낌표)의 앞 4글자이다.
	
	@ignore
	@method _getPreviousSiblingElementForExcl
	@param {Array} aLeftEl 좌측 쿼리에서 검색된 요소들
	@param {Object} oQuery !, !>, !+, !~ 기준으로 좌측의 쿼리와 바로 우측의 셀렉터 하나, 콤비네이터를 속성으로 가지는 오브젝트
		@param {String} oQuery.sCombinator 콤비네이터
		@param {String} oQuery.sLeftQuery 좌측 자식 혹은 형제 선택 쿼리
		@param {String} oQuery.sRightSelector 우측 부모 혹은 형제 선택자
	@param {Object} oOptions 옵션 객체
	@param {HTMLElement} elBaseParent 요소를 검색할 기준 요소
	@return {Array} 매치결과 배열
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl"><![CDATA[
	aChild의 요소 하나당 aRightEl의 모든 요소에 대해 반복하면서 자식 요소를 포함하는 부모 요소를 찾아 반환한다.  메서드명 끝에 붙은 Excl은 exclamation mark(느낌표)의 앞 4글자이다.
	
	@ignore
	@method _getParentElementIncludesChildForExcl
	@param {Array} aChild
	@param {Object} oQuery !, !>, !+, !~ 기준으로 좌측의 쿼리와 바로 우측의 셀렉터 하나, 콤비네이터를 속성으로 가지는 오브젝트
		@param {String} oQuery.sCombinator 콤비네이터
		@param {String} oQuery.sLeftQuery 좌측 자식 혹은 형제 선택 쿼리
		@param {String} oQuery.sRightSelector 우측 부모 혹은 형제 선택자
	@param {Object} oOptions
	@param {HTMLElement} elBaseParent 요소를 검색할 기준 요소
	@return {Array} 자식 요소를 포함하는 부모 요소를 원소로 갖는 배열
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_1"><![CDATA[
	elParent와 elChild가 같을때에도 contains() 메서드는 true를 반환한다.
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_2"><![CDATA[
	콤비네이터가 !> 라면 바로 상위의 부모만 담는다.
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_3"><![CDATA[
	aParent.splice(j, 1); 하면 안되는 이유 : elChild를 포함하는 요소는 1개 이상인데, 여기서 빼버리면 이 인덱스 바로 뒤에 있는 요소를 담지 못함.
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_4"><![CDATA[
	각각의 배열을 뒤집어야 올바른 순서가 된다. 위의 안쪽 for문을 반대로 돌린다고 해서 올바른 결과를 찾지 못한다.각 그룹별로 역순이 되어야 하기 때문이다.
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_5"><![CDATA[
	앞의 이중 for문의 안쪽 for문에서 break를 하지 않는 이유는, 일단 한 세트가 배열에 담겨 순서를 뒤집어야 하기 때문이다.
	]]></comment>
	<comment id="_getLeftElementForExcl"><![CDATA[
	쿼리에서 좌측에 해당하는 요소를 찾아 반환한다. "div span ! p" 에서 "div span"이 해당된다. 메서드명 끝에 붙은 Excl은 exclamation mark(느낌표)의 앞 4글자이다.
	
	@ignore
	@method _getLeftElementForExcl
	@param {Object} oQuery !, !>, !+, !~ 기준으로 좌측의 쿼리와 바로 우측의 셀렉터 하나, 콤비네이터를 속성으로 가지는 오브젝트
		@param {String} oQuery.sCombinator 콤비네이터
		@param {String} oQuery.sLeftQuery 좌측 자식 혹은 형제 선택 쿼리
		@param {String} oQuery.sRightSelector 우측 부모 혹은 형제 선택자
	@param {HTMLElement} elBaseParent
	@param {Array} aPrevResult 앞서 쿼리에서 선택된 요소를 원소로 답고 있는 배열
	@return {Array} 검색된 자식 요소를 원소로 갖는 배열
	]]></comment>
	<comment id="_getLeftElementForExcl_1"><![CDATA[
	좌측 선택 쿼리가 선택자 하나라면 aPrevResult를 바로 반환한다. 선택자가 하나인 것은 aPrevResult자체를 의미하기 때문이다.
	쿼리가 "div span ! p ! img" 라면, "p ! img" 쿼리에서 "p"가 이에 해당된다.
	]]></comment>
	<comment id="_addQueryId"><![CDATA[
	요소 탐색용 id attribute를 추가한다.
	
	@ignore
	@method _addQueryId
	@param {HTMLElement} el 요소 탐색용 id attribute를 추가할 요소
	@param {String} sIdName 요소 탐색용 id attribute의 이름
	@return {String} 요소 탐색용 id attribute가 적용된 쿼리 선택자
	]]></comment>
	<comment id="_removeQueryId"><![CDATA[
	추가했던 요소 탐색용 id를 제거한다.
	
	@ignore
	@method _removeQueryId
	@param {HTMLElement} el 요소 탐색용 id attribute를 제거할 요소
	@param {String} sIdName 요소 탐색용 id attribute의 이름
	]]></comment>
	<comment id="_removeQueryIdToArray"><![CDATA[
	배열에 담긴 요소들의 탐색용 id를 제거한다.
	
	@ignore
	@method _removeQueryIdToArray
	@param {Array} aEl 요소가 담긴 배열 요소
	@param {String} sIdName 쿼리 id 문자열
	]]></comment>
</comments>
