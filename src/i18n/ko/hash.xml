<comments name="hash">
  <comment id="title"><![CDATA[
	@fileOverview jindo.$H() 객체의 생성자 및 메서드를 정의한 파일
	@name hash.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	jindo.$H() 객체는 키(key)와 값(value)을 원소로 가지는 열거형 배열인 해시(Hash)를 구현하고, 해시를 다루기 위한 여러 가지 위한 메서드를 제공한다.
	
	@class jindo.$H
	@keyword hash, 해시
  ]]></comment>
  <comment id="constructor"><![CDATA[
	jindo.$H() 객체를 생성한다.
	
	@constructor
	@param {Hash+} oHashObject 해시로 만들 객체.
	@example
		var h = $H({one:"first", two:"second", three:"third"});
  ]]></comment>
  <comment id="sign_value"><![CDATA[
	$value() 메서드는 해시(Hash)를 객체로 반환한다.
	
	@method $value
	@return {Object} 해시가 저장된 객체.
  ]]></comment>
  <comment id="sign_"><![CDATA[
	$() 메서드는 키(key)에 해당하는 값(value)을 반환한다.
	
	@method $
	@param {String+|Numeric} sKey 해시의 키.
	@return {Variant} 키에 해당하는 값.
	@example
		var woH = $H({one:"first", two:"second", three:"third"});
		
		// 값을 반환할 때
		var three = woH.$("three");
		// 결과 : three = "third"
  ]]></comment>
  <comment id="sign2_"><![CDATA[
	$() 메서드는 키(key)와 값(value)을 지정한 값으로 설정한다.
	
	@method $
	@syntax sKey, vValue
	@syntax oKeyAndValue
	@param {String+ | Numeric} sKey 해시의 키.
	@param {Variant} vValue 설정할 값.
	@param {Hash+} oKeyAndValue key와 value로된 오브젝트
	@return {this} 인스턴스 자신
	@example
		var woH = $H({one:"first", two:"second"});
		
		// 값을 설정할 때
		woH.$("three", "third");
		// 결과 : woH => {one:"first", two:"second", three:"third"}
  ]]></comment>
  <comment id="length"><![CDATA[
	length() 메서드는 해시 객체의 크기를 반환한다.
	
	@method length
	@return {Numeric} 해시의 크기.
	@example
		var woH = $H({one:"first", two:"second"});
		woH.length(); // 결과 : 2
  ]]></comment>
  <comment id="forEach"><![CDATA[
	forEach() 메서드는 해시의 모든 원소를 순회하면서 콜백 함수를 실행한다. 이때 해시 객체의 키와 값 그리고 원본 해시 객체가 콜백 함수의 파라미터로 입력된다. jindo.$A() 객체의 forEach() 메서드와 유사하다. $H.Break()와 $H.Continue()을 사용할 수 있다.
	
	@method forEach
	@param {Function+} fCallback 해시를 순회하면서 실행할 콜백 함수. 콜백 함수는 파라미터로 key, value, object를 갖는다.<br>
		<ul class="disc">
			<li>value는 해당 원소의 값이다.</li>
			<li>key는 해당 원소의 키이다.</li>
			<li>object는 해시 그 자체를 가리킨다.</li>
		</ul>
	@param {Variant} [oThis] 콜백 함수가 객체의 메서드일 때 콜백 함수 내부에서 this 키워드의 실행 문맥(Execution Context)으로 사용할 객체.
	@return {this} 인스턴스 자신
	@see jindo.$H#map
	@see jindo.$H#filter
	@see jindo.$A#forEach
	@example
		function printIt(value, key, object) {
		   document.write(key+" => "+value+" <br>");
		}
		$H({one:"first", two:"second", three:"third"}).forEach(printIt);
  ]]></comment>
  <comment id="filter"><![CDATA[
	filter() 메서드는 해시의 모든 원소를 순회하면서 콜백 함수를 실행하고 콜백 함수가 true 값을 반환하는 원소만 모아 새로운 jindo.$H() 객체를 반환한다. jindo.$A() 객체의 filter() 메서드와 유사하다. $H.Break()와 $H.Continue()을 사용할 수 있다.
	
	@method filter
	@param {Function+} fCallback 해시를 순회하면서 실행할 콜백 함수. 콜백 함수는 Boolean 형태로 값을 반환해야 한다. true 값을 반환하는 원소는 새로운 해시의 원소가 된다. 콜백 함수는 파라미터로 value, key, object를 갖는다.<br>
		<ul class="disc">
			<li>value는 해당 원소의 값이다.</li>
			<li>key는 해당 원소의 키이다.</li>
			<li>object는 해시 그 자체를 가리킨다.</li>
		</ul>
	@param {Variant} [oThis] 콜백 함수가 객체의 메서드일 때 콜백 함수 내부에서 this 키워드의 실행 문맥(Execution Context) 사용할 객체.
	@return {jindo.$H} 콜백 함수의 반환 값이 true인 원소로 이루어진 새로운 jindo.$H() 객체.
	@see jindo.$H#forEach
	@see jindo.$H#map
	@see jindo.$A#filter
	@example
		var ht=$H({one:"first", two:"second", three:"third"})
		
		ht.filter(function(value, key, object){
			return value.length < 5;
		})
		
		// 결과
		// one:"first", three:"third"
  ]]></comment>
  <comment id="map"><![CDATA[
	map() 메서드는 해시의 모든 원소를 순회하면서 콜백 함수를 실행하고 콜백 함수의 실행 결과를 배열의 원소에 설정한다. jindo.$A() 객체의 map() 메서드와 유사하다. $H.Break()와 $H.Continue()을 사용할 수 있다.
	
	@method map
	@param {Function+} fCallback 해시를 순회하면서 실행할 콜백 함수. 콜백 함수에서 반환하는 값을 해당 원소의 값으로 재설정한다. 콜백 함수는 파라미터로 value, key, object를 갖는다.<br>
		<ul class="disc">
			<li>value는 해당 원소의 값이다.</li>
			<li>key는 해당 원소의 키이다.</li>
			<li>object는 해시 그 자체를 가리킨다.</li>
		</ul>
	@param {Variant} [oThis] 콜백 함수가 객체의 메서드일 때 콜백 함수 내부에서 this 키워드의 실행 문맥(Execution Context) 사용할 객체.
	@return {jindo.$H} 콜백 함수의 수행 결과를 반영한 새로운 jindo.$H() 객체.
	@see jindo.$H#forEach
	@see jindo.$H#filter
	@see jindo.$H#map
	@example
		function callback(value, key, object) {
		   var r = key+"_"+value;
		   document.writeln (r + "<br />");
		   return r;
		}
		
		$H({one:"first", two:"second", three:"third"}).map(callback);
  ]]></comment>
  <comment id="add"><![CDATA[
	add() 메서드는 해시에 값을 추가한다. 파라미터로 값을 추가할 키를 지정한다. 지정한 키에 이미 값이 있다면 지정한 값으로 변경한다.
	
	@method add
	@param {String+ | Numeric} sKey 값을 추가하거나 변경할 키.
	@param {Variant} vValue 해당 키에 추가할 값.
	@return {this} 값을 추가한 인스턴스 자신
	@see jindo.$H#remove
	@example
		var woH = $H();
		// 키가 'foo'이고 값이 'bar'인 원소를 추가
		woH.add('foo', 'bar');
		
		// 키가 'foo'인 원소의 값을 'bar2'로 변경
		woH.add('foo', 'bar2');
  ]]></comment>
  <comment id="remove"><![CDATA[
	remove() 메서드는 지정한 키의 원소를 제거한다. 해당하는 원소가 없으면 아무 일도 수행하지 않는다.
	
	@method remove
	@param {String+ | Numeric} sKey 제거할 원소의 키.
	@return {Variant} 제거한 값.
	@see jindo.$H#add
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.remove ("two");
		// h의 해시 테이블은 {one:"first", three:"third"}
  ]]></comment>
  <comment id="search"><![CDATA[
	search() 메서드는 해시에서 파라미터로 지정한 값을 가지는 원소의 키를 반환한다.
	
	@method search
	@param {Variant} sValue 검색할 값.
	@return {Variant} 해당 값을 가지고 있는 원소의 키(String). 지정한 값을 가진 원소가 없다면 false를 반환한다.
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.search ("second"); // two
		h.search ("fist"); // false
  ]]></comment>
  <comment id="hasKey"><![CDATA[
	hasKey() 메서드는 해시에 파라미터로 입력한 키가 있는지 확인한다.
	
	@method hasKey
	@param {String+|Numeric} sKey 검색할 키.
	@return {Boolean} 키의 존재 여부. 존재하면 true 없으면 false를 반환한다.
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.hasKey("four"); // false
		h.hasKey("one"); // true
  ]]></comment>
  <comment id="hasValue"><![CDATA[
	hasValue() 메서드는 해시에 파라미터로로 입력한 값이 있는지 확인한다.
	
	@method hasValue
	@param {Variant} vValue 해시에서 검색할 값.
	@return {Boolean} 값의 존재 여부. 존재하면 true 없으면 false를 반환한다.
  ]]></comment>
  <comment id="sort"><![CDATA[
	sort() 메서드는 값을 기준으로 해시의 원소를 오름차순 정렬한다.
	다만, 실제 값이 변경되는 것이 아니라 $H#forEach을 사용해야지만
	정렬된 결과를 사용할 수 있다.
	
	@method sort
	@param {Function} [sortFunc] 직접 정렬할 수 있도록 함수를 넣을 수 있다.
		@param {Variant} [sortFunc.preVal] 앞의 값
		@param {Variant} [sortFunc.foreVal] 뒤의 값
		
	@return {this} 원소를 정렬한 인스턴스 자신
	@see jindo.$H#ksort
	@see jindo.$H#forEach
	@example
		var h = $H({one:"하나", two:"둘", three:"셋"});
		h.sort ();
		h.forEach(function(v){
			//둘
			//셋
			//하나
		});
	@example
		var h = $H({one:"하나", two:"둘", three:"셋"});
		h.sort(function(val, val2){
			return val === val2 ? 0 : val < val2 ? 1 : -1;
		});
		h.forEach(function(v){
			//하나
			//셋
			//둘
		});
  ]]></comment>
  <comment id="ksort"><![CDATA[
	ksort() 메서드는 키를 기준으로 해시의 원소를 오름차순 정렬한다.
	다만, 실제 값이 변경되는 것이 아니라 $H#forEach을 사용해야지만
	정렬된 결과를 사용할 수 있다.
	
	@method ksort
	@param {Function} [sortFunc] 직접 정렬할 수 있도록 함수를 넣을 수 있다.
		@param {Variant} [sortFunc.preKey] 앞의 키
		@param {Variant} [sortFunc.foreKey] 뒤의 키
	@return {this} 원소를 정렬한 인스턴스 자신
	@see jindo.$H#sort
	@see jindo.$H#forEach
	@example
		var h = $H({one:"하나", two:"둘", three:"셋"});
		h.ksort ();
		h.forEach(function(v){
			//하나
			//셋
			//둘
		});
	@example
		var h = $H({one:"하나", two:"둘", three:"셋"});
		h.ksort (function(key, key2){
			return key === key2 ? 0 : key < key2 ? 1 : -1;
		});
		h.forEach(function(v){
			//둘
			//셋
			//하나
		});
  ]]></comment>
  <comment id="keys"><![CDATA[
	keys() 메서드는 해시의 키를 배열로 반환한다.
	
	@method keys
	@return {Array} 해시 키의 배열.
	@see jindo.$H#values
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.keys ();
		// ["one", "two", "three"]
  ]]></comment>
  <comment id="values"><![CDATA[
	values() 메서드는 해시의 값을 배열로 반환한다.
	
	@method values
	@return {Array} 해시 값의 배열.
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.values();
		// ["first", "second", "third"]
  ]]></comment>
  <comment id="toQueryString"><![CDATA[
	toQueryString() 메서드는 해시를 쿼리 스트링(Query String) 형태로 만든다.
	
	@method toQueryString
	@return {String} 해시를 변환한 쿼리 스트링.
	@see http://en.wikipedia.org/wiki/Querystring Query String - Wikipedia
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.toQueryString();
		// "one=first&two=second&three=third"
  ]]></comment>
  <comment id="empty_1"><![CDATA[
	empty() 메서드는 해시를 비운다.
	
	@method empty
	@return {this} 비워진 인스턴스 자신
	@example
		var hash = $H({a:1, b:2, c:3});
		// hash => {a:1, b:2, c:3}
		
		hash.empty();
		// hash => {}
  ]]></comment>
  <comment id="break"><![CDATA[
	Break() 메서드는 forEach(), filter(), map() 메서드의 루프를 중단한다. 내부적으로는 강제로 예외를 발생시키는 구조이므로, try - catch 영역에서 이 메서드를 실행하면 정상적으로 동작하지 않을 수 있다.
	
	@method Break
	@static
	@see jindo.$H#Continue
	@see jindo.$H#forEach
	@see jindo.$H#filter
	@see jindo.$H#map
	@example
		$H({a:1, b:2, c:3}).forEach(function(v,k,o) {
		  ...
		  if (k == "b") $H.Break();
		   ...
		});
  ]]></comment>
  <comment id="continue"><![CDATA[
	Continue() 메서드는 forEach(), filter(), map() 메서드의 루프에서 나머지 명령을 실행하지 않고 다음 루프로 건너뛴다. 내부적으로는 강제로 예외를 발생시키는 구조이므로, try - catch 영역에서 이 메서드를 실행하면 정상적으로 동작하지 않을 수 있다.
	
	@method Continue
	@static
	@see jindo.$H#Break
	@see jindo.$H#forEach
	@see jindo.$H#filter
	@see jindo.$H#map
	@example
		$H({a:1, b:2, c:3}).forEach(function(v,k,o) {
		   ...
		   if (v % 2 == 0) $H.Continue();
		   ...
		});
  ]]></comment>
</comments>
