<comments name="ajax">
	<comment id="title"><![CDATA[
	@fileOverview jindo.$Ajax() 객체의 생성자 및 메서드를 정의한 파일
	@name Ajax.js
	@author NAVER Ajax Platform
	]]></comment>
	<comment id="desc"><![CDATA[
	jindo.$Ajax() 객체는 다양한 개발 환경에서 Ajax 요청과 응답을 쉽게 구현하기 위한 메서드를 제공한다.
	
	@class jindo.$Ajax
	@keyword ajax
	]]></comment>
	<comment id="constructor"><![CDATA[
	jindo.$Ajax() 객체는 서버와 브라우저 사이의 비동기 통신, 즉 Ajax 통신을 지원한다. jindo.$Ajax() 객체는 XHR 객체(XMLHTTPRequest)를 사용한 기본적인 방식과 함께 다른 도메인 사이의 통신을 위한 여러 방식을 제공한다.
	
	@constructor
	@param {String+} sUrl Ajax 요청을 보낼 서버의 URL.
	@param {Hash+} oOption $Ajax()에서 사용하는 콜백 함수, 통신 방식 등과 같은 다양한 정보를 정의한다.
		@param {String} [oOption.type="xhr"] Ajax 요청 방식.
			@param {String} [oOption.type."xhr"] 브라우저에 내장된 XMLHttpRequest 객체를 이용하여 Ajax 요청을 처리한다. 
					<ul>
						<li>text, xml, json 형식의 응답 데이터를 처리할 수 있다. </li>
						<li>요청 실패 시 HTTP 응답 코드를 통해 원인 파악이 가능하다.</li>
						<li>2.1.0 버전 이상에서는 크로스 도메인이 아닌 xhr의 경우 헤더에 "X-Requested-With" : "XMLHttpRequest"을 포함함. </li>
						<li>단, 크로스 도메인(Cross-Domain) 상황에서 사용할 수 없다.</li>
						<li>2.1.0 버전 이상은 모바일에서 가능. 반드시 서버설정이 필요. (자세한 사용법은 <auidoc:see content="http://devcafe.nhncorp.com/ajaxui/board_5/574863">devcafe</auidoc:see>를 참고)</li>
					</ul>
			@param {String} oOption.type."iframe" iframe 요소를 프록시로 사용하여 Ajax 요청을 처리한다.
					<ul>
						<li>크로스 도메인 상황에서 사용할 수 있다.</li>
						<li>iframe 요청 방식은 다음과 같이 동작한다.
							<ol class="decimal">
								<li>로컬(요청 하는 쪽)과 원격(요청 받는 쪽)에 모두 프록시용 HTML 파일을 만든다.</li>
								<li>로컬 프록시에서 원격 프록시로 데이터를 요청한다.</li>
								<li>원격 프록시가 원격 도메인에 XHR 방식으로 다시 Ajax 요청한다.</li>
								<li>응답을 받은 원격 프록시에서 로컬 프록시로 데이터를 전달한다.</li>
								<li>로컬 프록시에서 최종적으로 콜백 함수(onload)를 호출하여 처리한다.</li>
							</ol>
						</li>
						<li>로컬 프록시 파일과 원격 프록시 파일은 다음과 같이 작성할 수 있다.
							<ul>
								<li>원격 프록시 파일 : ajax_remote_callback.html</li>
								<li>로컬 프록시 파일 : ajax_local_callback.html</li>
							</ul>
						</li>
						<li>iframe 요소를 사용한 방식은 인터넷 익스플로러에서 "딱딱"하는 페이지 이동음이 발생할 수 있다. (요청당 2회)</li>
					</ul>
			@param {String} oOption.type."jsonp" JSON 형식과 &lt;script&gt; 태그를 사용하여 사용하여 Ajax 요청을 처리한다.
					<ul>
						<li>크로스 도메인 상황에서 사용할 수 있다.</li>
						<li>jsonp 요청 방식은 다음과 같이 동작한다.
							<ol class="decimal">
								<li>&lt;script&gt; 태그를 동적으로 생성한다. 이때 요청할 원격 페이지를 src 속성으로 입력하여 GET 방식으로 요청을 전송한다.</li>
								<li>요청 시에 콜백 함수를 매개 변수로 넘기면, 원격 페이지에서 전달받은 콜백 함수명으로 아래와 같이 응답을 보낸다.
									<ul>
										<li>function_name(...결과 값...)</li>
									</ul>
								</li>
								<li>응답은 콜백 함수(onload)에서 처리된다.</li>
							</ol>
						</li>
						<li>GET 방식만 가능하므로, 전송 데이터의 길이는 URL에서 허용하는 길이로 제한된다.</li>
					</ul>
			@param {String} oOption.type."flash" 플래시 객체를 사용하여 Ajax 요청을 처리한다.
					<ul>
						<li>크로스 도메인 상황에서 사용할 수 있다.</li>
						<li>이 방식을 사용할 때 원격 서버의 웹 루트 디렉터리에 crossdomain.xml 파일이 존재해야 하며 해당 파일에 접근 권한이 설정되어 있어야 한다.</li>
						<li>모든 통신은 플래시 객체를 통하여 주고 받으며 Ajax 요청을 시도하기 전에 반드시 플래시 객체를 초기화해야 한다.</li>
						<li>$Ajax.SWFRequest.write() 메서드를 사용하여 플래시 객체를 초기화하며 해당 메서드는 &lt;body&gt; 요소 안에 작성한다.</li>
						<li>만약 https에서 https 쪽으로 호출할 경우 &lt;allow-access-from domain="*" secure="true" /&gt; 처럼 secure을 true로 설정해야 하며 그 이외에는 false로 설정한다.</li>
					</ul>
		@param {String} [oOption.method="post"] HTTP 요청 방식으로 post, get, put, delete 방식을 지원한다.
			@param {String} [oOption.method."post"] post 방식으로 http 요청을 전달한다.
			@param {String} oOption.method."get" get 방식으로 http 요청을 전달한다. type 속성이 "jsonp" 방식으로 지정되면 HTTP 요청 방식은 "get"으로 설정된다.
			@param {String} oOption.method."put" put 방식으로 http 요청을 전달한다. (1.4.2 버전부터 지원).
			@param {String} oOption.method."delete" delete 방식으로 http 요청을 전달한다. (1.4.2 버전부터 지원).
		@param {Number} [oOption.timeout=0] 요청 타임 아웃 시간.  (단위 초)
				<ul>
					<li>비동기 호출인 경우에만 사용 가능하다.</li>
					<li>타임 아웃 시간 안에 요청이 완료되지 않으면 Ajax 요청을 중지한다.</li>
					<li>생략하거나 기본값(0)을 지정한 경우 타임 아웃을 적용하지 않는다. </li>
				</ul>
		@param {Boolean} [oOption.withCredentials=false] xhr에서 크로스 도메인 사용할 때 쿠키 사용여부
				<ul>
					<li>true로 설정하면 서버에서도  "Access-Control-Allow-Credentials: true" 헤더를 설정해야 한다.</li>
				</ul>
		@param {Object} [oOption.data=null] FormData 객체 데이터를 XHR2를 이용해 전송하는 경우 값을 설정
				<ul>
				    <li><b><u>사용시 주의사항 :</u></b></li>
					<li>Content-Type 헤더를 수동으로 설정하지 말아야 한다.</li>
                    <li>method가 POST인 경우에만 사용 가능하며, $Ajax.request(oData) 메서드에 전달되는 파라미터는 무시된다.</li>
				</ul>
		@param {Function} oOption.onload 요청이 완료되면 실행할 콜백 함수. 콜백 함수의 파라미터로 응답 객체인 <auidoc:see content="jindo.$Ajax.Response"/> 객체가 전달된다.
		@param {Function} [oOption.onerror="onload 속성에 지정한 콜백 함수"] 요청이 실패하면 실행할 콜백 함수. 생략하면 오류가 발생해도 onload 속성에 지정한 콜백 함수를 실행한다.
		@param {Function} [oOption.ontimeout=function(){}] 타임 아웃이 되었을 때 실행할 콜백 함수. 생략하면 타임 아웃 발생해도 아무런 처리를 하지 않는다.
		@param {String} oOption.proxy 로컬 프록시 파일의 경로. type 속성이 "iframe"일 때 사용.
		@param {String} [oOption.jsonp_charset="utf-8"] 요청 시 사용할 &lt;script&gt; 인코딩 방식. type 속성이 "jsonp"일 때 사용한다. (0.4.2 버전부터 지원).
		@param {String} [oOption.callbackid="랜덤한 ID"] 콜백 함수 이름에 사용할 ID.
				<ul>
					<li>type 속성이 "jsonp"일 때 사용한다. (1.3.0 버전부터 지원)</li>
					<li>jsonp 방식에서 Ajax 요청할 때 콜백 함수 이름에 랜덤한 ID 값을 덧붙여 만든 콜백 함수 이름을 서버로 전달한다. 이때 랜덤한 값을 ID로 사용하여 넘기므로 요청 URL이 매번 새롭게 생성되어 캐시 서버가 아닌 서버로 직접 데이터를 요청하게 된다. 따라서 ID 값을 지정하면 랜덤한 아이디 값으로 콜백 함수 이름을 생성하지 않으므로 캐시 서버를 사용하여 그에 대한 히트율을 높이고자 할 때 ID를 지정하여 사용할 수 있다.</li>
				</ul>
		@param {String} [oOption.callbackname="_callback"] 콜백 함수 이름. type 속성이 "jsonp"일 때 사용하며, 서버에 요청할 콜백 함수의 이름을 지정할 수 있다. (1.3.8 버전부터 지원).
		@param {Boolean} [oOption.sendheader=true] 요청 헤더를 전송할지 여부.<br>type 속성이 "flash"일 때 사용하며, 서버에서 접근 권한을 설정하는 crossdomain.xml에 allow-header가 설정되어 있지 않다면 반드시 false 로 설정해야 한다. (1.3.4 버전부터 지원).<br>
				<ul>
					<li>플래시 9에서는 allow-header가 false인 경우 get 방식으로만 ajax 통신이 가능하다.</li>
					<li>플래시 10에서는 allow-header가 false인 경우 get,post 둘다 ajax 통신이 안된다.</li>
					<li>allow-header가 설정되어 있지 않다면 반드시 false로 설정해야 한다.</li>
				</ul>
		@param {Boolean} [oOption.async=true] 비동기 호출 여부. type 속성이 "xhr"일 때 이 속성 값이 유효하다. (1.3.7 버전부터 지원).
		@param {Boolean} [oOption.decode=true] type 속성이 "flash"일 때 사용하며, 요청한 데이터 안에 utf-8 이 아닌 다른 인코딩이 되어 있을때 false 로 지정한다. (1.4.0 버전부터 지원). 
		@param {Boolean} [oOption.postBody=false] Ajax 요청 시 서버로 전달할 데이터를 Body 요소에 전달할 지의 여부.<br>
				type 속성이 "xhr"이고 method가 "get"이 아니어야 유효하며 REST 환경에서 사용된다. (1.4.2 버전부터 지원).
	@throws {jindo.$Except.REQUIRE_AJAX} 사용하는 타입의 ajax가 없는 경우. 
	@throws {jindo.$Except.CANNOT_USE_OPTION} 사용하지 못하는 옵션을 사용할 경우.
	@remark jindo.$Ajax() 객체의 기본적인 초기화 방식은 다음과 같다.
<pre class="code "><code class="prettyprint linenums">
	// 호출하는 URL이 현재 페이지의 URL과 다른 경우, CORS 방식으로 호출한다. XHR2 객체 또는 IE8,9는 XDomainRequest를 사용한다.
	var oAjax = new $Ajax('server.php', {
	    type : 'xhr',
	    method : 'get',     // GET 방식으로 통신
	    onload : function(res){ // 요청이 완료되면 실행될 콜백 함수
	      $('list').innerHTML = res.text();
	    },
	    timeout : 3,      // 3초 이내에 요청이 완료되지 않으면 ontimeout 실행 (생략 시 0)
	    ontimeout : function(){ // 타임 아웃이 발생하면 실행될 콜백 함수, 생략 시 타임 아웃이 되면 아무 처리도 하지 않음
	      alert("Timeout!");
	    },
	    async : true      // 비동기로 호출하는 경우, 생략하면 true
	});
	oAjax.request();
</code></pre><br>
	oOption 객체의 프로퍼티와 사용법에 대한 설명은 다음 표와 같다.<br>
		<h5>타입에 따른 옵션의 사용 가능 여부</h5>
		<table class="tbl_board">
			<caption class="hide">타입에 따른 옵션의 사용 가능 여부</caption>
			<thead>
				<th scope="col">옵션</th>
				<th scope="col">xhr</th>
				<th scope="col">jsonp</th>
				<th scope="col">flash</th>
				<th scope="col">iframe</th>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">method(get, post, put, delete)</td>
					<td>O</td>
					<td>get</td>
					<td>get, post</td>
					<td>iframe</td>
				</tr>
				<tr>
					<td class="txt bold">onload</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">timeout</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">ontimeout</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">onerror</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">async</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">postBody</td>
					<td>method가 post, put, delete만 가능</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">jsonp_charset</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">callbackid</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">callbackname</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">setheader</td>
					<td>O</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">decode</td>
					<td>X</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">proxy</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">withCredentials</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">data</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
				</tr>
			</tbody>
		</table>
		<h5>타입에 따른 메서드의 사용 가능 여부</h5>
		<table class="tbl_board">
			<caption class="hide">타입에 따른 메서드의 사용 가능 여부</caption>
			<thead>
				<th scope="col">메서드</th>
				<th scope="col">xhr</th>
				<th scope="col">jsonp</th>
				<th scope="col">flash</th>
				<th scope="col">iframe</th>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">abort</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">isIdle</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">option</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">request</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">header</td>
					<td>O</td>
					<td>X</td>
					<td>O</td>
					<td>O</td>
				</tr>
			</tbody>
		</table>
	@see jindo.$Ajax.Response
	@see http://dev.naver.com/projects/jindo/wiki/cross%20domain%20ajax Cross Domain Ajax 이해
	@example
		// 'Get List' 버튼 클릭 시, 서버에서 데이터를 받아와 리스트를 구성하는 예제
		// (1) 서버 페이지와 서비스 페이지가 같은 도메인에 있는 경우 - xhr
		
		// [client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList() {
						var oAjax = new $Ajax('server.php', {
							type : 'xhr',
							method : 'get',			// GET 방식으로 통신
							onload : function(res){	// 요청이 완료되면 실행될 콜백 함수
								$('list').innerHTML = res.text();
							},
							timeout : 3,			// 3초 이내에 요청이 완료되지 않으면 ontimeout 실행 (생략 시 0)
							ontimeout : function(){	// 타임 아웃이 발생하면 실행될 콜백 함수, 생략 시 타임 아웃이 되면 아무 처리도 하지 않음
								alert("Timeout!");
							},
							async : true			// 비동기로 호출하는 경우, 생략하면 true
						});
						oAjax.request();
					}
				</script>
			</head>
			<body>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [server.php]
		<?php
			echo "<li>첫번째</li><li>두번째</li><li>세번째</li>";
		?>
	
	@example
		// 'Get List' 버튼 클릭 시, 서버에서 데이터를 받아와 리스트를 구성하는 예제
		// (1-1) 서버 페이지와 서비스 페이지가 다른 도메인에 있는 경우 - xhr
		
		// [http://jindo.com/client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList() {
						var oAjax = new $Ajax('http://server.com/some/server.php', {
							type : 'xhr',
							method : 'get',			// GET 방식으로 통신
							withCredentials : true, // 쿠키를 포함하여 설정
							onload : function(res){	// 요청이 완료되면 실행될 콜백 함수
								$('list').innerHTML = res.text();
							}
						});
						oAjax.request();
					}
				</script>
			</head>
			<body>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [server.php]
		 <?
		 	header("Access-Control-Allow-Origin: http://jindo.com"); // 크로스도메인으로 호출이 가능한 곳을 등록.
			header("Access-Control-Allow-Credentials: true"); // 쿠키를 허용할 경우.
			
			echo "<li>첫번째</li><li>두번째</li><li>세번째</li>";
		?>
	
	@example
		// 'Get List' 버튼 클릭 시, 서버에서 데이터를 받아와 리스트를 구성하는 예제
		// (2) 서버 페이지와 서비스 페이지가 같은 도메인에 있는 경우 - iframe
		
		// [http://local.com/some/client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList() {
						var oAjax = new $Ajax('http://server.com/some/some.php', {
							type : 'iframe',
							method : 'get',			// GET 방식으로 통신
													// POST로 지정하면 원격 프록시 파일에서 some.php 로 요청 시에 POST 방식으로 처리
							onload : function(res){	// 요청이 완료되면 실행될 콜백 함수
								$('list').innerHTML = res.text();
							},
							// 로컬 프록시 파일의 경로.
							// 반드시 정확한 경로를 지정해야 하며, 로컬 도메인의 경로라면 어디에 두어도 상관 없음
							// (※ 원격 프록시 파일은 반드시  원격 도메인 서버의 도메인 루트 상에 두어야 함)
							proxy : 'http://local.naver.com/some/ajax_local_callback.html'
						});
						oAjax.request();
					}
		
				</script>
			</head>
			<body>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [http://server.com/some/some.php]
		<?php
			echo "<li>첫번째</li><li>두번째</li><li>세번째</li>";
		?>
	
	@example
		// 'Get List' 버튼 클릭 시, 서버에서 데이터를 받아와 리스트를 구성하는 예제
		// (3) 서버 페이지와 서비스 페이지가 같은 도메인에 있는 경우 - jsonp
		
		// [http://local.com/some/client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList(){
						var oAjax = new $Ajax('http://server.com/some/some.php', {
							type: 'jsonp',
							method: 'get',			// type 이 jsonp 이면 get 으로 지정하지 않아도 자동으로 get 으로 처리함 (생략가능)
							jsonp_charset: 'utf-8',	// 요청 시 사용할 <script> 인코딩 방식 (생략 시 utf-8)
							onload: function(res){	// 요청이 완료되면 실행될 콜백 함수
								var response = res.json();
								var welList = $Element('list').empty();
		
								for (var i = 0, nLen = response.length; i < nLen; i++) {
									welList.append($("<li>" + response[i] + "</li>"));
								}
							},
							callbackid: '12345',				// 콜백 함수 이름에 사용할 아이디 값 (생략가능)
							callbackname: 'ajax_callback_fn'	// 서버에서 사용할 콜백 함수이름을 가지는 매개 변수 이름 (생략 시 '_callback')
						});
						oAjax.request();
					}
				</script>
			</head>
			<body>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [http://server.com/some/some.php]
		<?php
			$callbackName = $_GET['ajax_callback_fn'];
			echo $callbackName."(['첫번째','두번째','세번째'])";
		?>
	
	@example
		// 'Get List' 버튼 클릭 시, 서버에서 데이터를 받아와 리스트를 구성하는 예제
		// (4) 서버 페이지와 서비스 페이지가 같은 도메인에 있는 경우 - flash
		
		// [http://local.com/some/client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList(){
						var oAjax = new $Ajax('http://server.com/some/some.php', {
							type : 'flash',
							method : 'get',			// GET 방식으로 통신
							sendheader : false,		// 요청 헤더를 전송할지 여부. (생략 시 true)
							decode : true,			// 요청한 데이터 안에 utf-8 이 아닌 다른 인코딩이 되어 있을때 false. (생략 시 true)
							onload : function(res){	// 요청이 완료되면 실행될 콜백 함수
								$('list').innerHTML = res.text();
							},
						});
						oAjax.request();
					}
				</script>
			</head>
			<body>
				<script type="text/javascript">
					$Ajax.SWFRequest.write("swf/ajax.swf");	// Ajax 호출을 하기 전에 반드시 플래시 객체를 초기화
				</script>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [http://server.com/some/some.php]
		<?php
			echo "<li>첫번째</li><li>두번째</li><li>세번째</li>";
		?>

	@example
		// (5) XMLHttpRequest Level2 사용예제
		// https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html

		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getData(){
                        var formData = new FormData();          // FormData 설정
                        formData.append('username', 'John Doe');
                        formData.append('phone', 123456);

                        var oAjax = new jindo.$Ajax('attach.jpg', {
                            type : 'xhr',
                            method : 'post',                    // POST 방식으로 통신
                            data : formData,                    // FormData 값을 설정 (data 옵션은 FormData 값만 사용할 수 있다.)
                            onload : function(res) {
                                var oResponse = res.$value();   // 원래의 XHR 응답객체를 얻는다.
                                var blob = new Blob([oResponse.response], { type: 'image/jpeg' });
                                console.log(blob);
                            }
                        });

                        oAjax.$value().repsonseType = "blob";   // responseType을 "blob"로 설정
                        oAjax.request();  // data 옵션을 통해 FormData를 사용한 경우, request() 메서드에 값을 설정할 수 없다.
					}
				</script>
			</head>
			<body>
                ...
			</body>
		</html>
	]]></comment>
    <comment id="constructor_1"><![CDATA[
테스트를 위해 우선 적용가능한 설정 객체가 존재하면 적용
	]]></comment>
	<comment id="request"><![CDATA[
	request() 메서드는 Ajax 요청을 서버에 전송한다. 요청에 사용할 파라미터는 jindo.$Ajax() 객체 생성자에서 설정하거나 option() 메서드를 사용하여 변경할 수 있다. 
	요청 타입(type)이 "flash"면 이 메서드를 실행하기 전에 body 요소에서 <auidoc:see content="jindo.$Ajax.SWFRequest#write"/>() 메서드를 반드시 실행해야 한다.
	
	@method request
	@syntax oData
	@syntax oData2
	@param {String+} [oData] 서버로 전송할 데이터. (postbody가 true, type이 xhr, method가 get이 아닌 경우, FormData를 사용한 요청이 아닌 경우에만 사용가능)
	@param {Hash+} oData2 서버로 전송할 데이터.
	@return {this} 인스턴스 자신
	@see jindo.$Ajax#option
	@see jindo.$Ajax.SWFRequest#write
	@example
		var ajax = $Ajax("http://www.remote.com", {
		   onload : function(res) {
		      // onload 핸들러
		   }
		});
		
		ajax.request( {key1:"value1", key2:"value2"} );	// 서버에 전송할 데이터를 매개변수로 넘긴다.
		ajax.request( );
	
	@example
		var ajax2 = $Ajax("http://www.remote.com", {
		   type : "xhr",
		   method : "post",
		   postBody : true
		});
		
		ajax2.request({key1:"value1", key2:"value2"});
		ajax2.request("{key1:\"value1\", key2:\"value2\"}");
	]]></comment>
    <comment id="request_1"><![CDATA[
XHR GET 방식 요청인 경우 URL에 파라미터 추가
	]]></comment>
    <comment id="request_1a"><![CDATA[
data옵션 값으로 FormData가 사용된 경우, data 값을 FormData로 설정
	]]></comment>
    <comment id="request_2"><![CDATA[
xhr인 경우 IE에서는 GET으로 보낼 때 브라우져에서 자체 cache하여 cache을 안되게 수정.
	]]></comment>
    <comment id="request_3"><![CDATA[
 * opera 10.60에서 XMLHttpRequest에 addEventListener기 추가되었지만 정상적으로 동작하지 않아 opera는 무조건 dom1방식으로 지원함.
 * IE9에서도 opera와 같은 문제가 있음.
	]]></comment>
    <comment id="request_4"><![CDATA[
 * IE6에서는 onreadystatechange가 동기적으로 실행되어 timeout이벤트가 발생안됨.
 * 그래서 interval로 체크하여 timeout이벤트가 정상적으로 발생되도록 수정. 비동기 방식일때만
	]]></comment>
    <comment id="request_5"><![CDATA[
 * test을 하기 위한 url
	]]></comment>
    <comment id="isIdle"><![CDATA[
	isIdle() 메서드는 jindo.$Ajax() 객체가 현재 요청 대기 상태인지 확인한다.
	
	@method isIdle
	@return {Boolean} 현재 대기 중이면 true 를, 그렇지 않으면 false를 리턴한다.
	@since 1.3.5
	@example
		var ajax = $Ajax("http://www.remote.com",{
		     onload : function(res){
		         // onload 핸들러
		     }
		});
		
		if(ajax.isIdle()) ajax.request();
    ]]></comment>
    <comment id="abort"><![CDATA[
	abort() 메서드는 서버로 전송한 Ajax 요청을 취소한다. Ajax 요청의 응답 시간이 길거나 강제로 Ajax 요청을 취소할 경우 사용한다.
	
	@method abort
	@remark type이 jsonp일 경우 abort를 해도 요청을 멈추진 않는다.
	@return {this} 전송을 취소한 인스턴스 자신
	@example
		var ajax = $Ajax("http://www.remote.com", {
			timeout : 3,
			ontimeout : function() {
				stopRequest();
			}
			onload : function(res) {
				// onload 핸들러
			}
		}).request( {key1:"value1", key2:"value2"} );
		
		function stopRequest() {
		    ajax.abort();
		}
    ]]></comment>
	<comment id="url"><![CDATA[
	url()메서드는 url을 반환한다.
	
	@method url
	@return {String} URL의 값.
	@since 2.0.0
	]]></comment>
	<comment id="url2"><![CDATA[
	url()메서드는 url을 변경한다.
	
	@method url
	@param {String+} url
	@return {this} 인스턴스 자신
	@since 2.0.0
	]]></comment>
    <comment id="option"><![CDATA[
	option() 메서드는 jindo.$Ajax() 객체의 옵션 객체(oOption) 속성에 정의된 Ajax 요청 옵션에 대한 정보를 가져온다.
	
	@method option
	@param {String+} sName 옵션 객체의 속성 이름
	@return {Variant} 해당 옵션에 해당하는 값.
	@throws {jindo.$Except.CANNOT_USE_OPTION} 해당 타입에 적절한 옵션이 아닌 경우.
	]]></comment>
    <comment id="option2"><![CDATA[
	option() 메서드는 jindo.$Ajax() 객체의 옵션 객체(oOption) 속성에 정의된 Ajax 요청 옵션에 대한 정보를 설정한다. Ajax 요청 옵션을 설정하려면 이름과 값을, 혹은 이름과 값을 원소로 가지는 하나의 객체를 파라미터로 입력한다. 이름과 값을 원소로 가지는 객체를 입력하면 하나 이상의 정보를 한 번에 설정할 수 있다.
	
	@method option
	@syntax sName, vValue
	@syntax oOption
	@param {String+} sName 옵션 객체의 속성 이름
	@param {Variant} vValue 새로 설정할 옵션 속성의 값.
	@param {Hash+} oOption 속성 값이 정의된 객체.
	@return {this} 인스턴스 자신
	@throws {jindo.$Except.CANNOT_USE_OPTION} 해당 타입에 적절한 옵션이 아닌 경우.
	@example
		var ajax = $Ajax("http://www.remote.com", {
			type : "xhr",
			method : "get",
			onload : function(res) {
				// onload 핸들러
			}
		});
		
		var request_type = ajax.option("type");					// type 인 xhr 을 리턴한다.
		ajax.option("method", "post");							// method 를 post 로 설정한다.
		ajax.option( { timeout : 0, onload : handler_func } );	// timeout 을 으로, onload 를 handler_func 로 설정한다.
    ]]></comment>
    <comment id="header"><![CDATA[
	header() 메서드는 Ajax 요청에서 사용할 HTTP 요청 헤더를 가져온다. 헤더에서 특정 속성 값을 가져오려면 속성의 이름을 파라미터로 입력한다.
	
	@method header
	@param {String+} vName 헤더 이름
	@return {String} 문자열을 반환한다.
	@example
		var customheader = ajax.header("myHeader"); 		// HTTP 요청 헤더에서 myHeader 의 값
    ]]></comment>
    <comment id="header2"><![CDATA[
	header() 메서드는 Ajax 요청에서 사용할 HTTP 요청 헤더를 설정한다. 헤더를 설정하려면 헤더의 이름과 값을 각각 파라미터로 입력하거나 헤더의 이름과 값을 원소로 가지는 객체를 파라미터로 입력한다. 객체를 파라미터로 입력하면 하나 이상의 헤더를 한 번에 설정할 수 있다.<br>
	(* IE8/9에서 XDomainRequest 객체를 사용한 CORS 호출에서는 사용할 수 없다. XDomainRequest는 헤더를 설정할 수 있는 메서드가 존재하지 않는다.)
	
	@method header
	@syntax sName, sValue
	@syntax oHeader
	@param {String+} sName 헤더 이름
	@param {String+} sValue 설정할 헤더 값.
	@param {Hash+} oHeader 하나 이상의 헤더 값이 정의된 객체
	@return {this} 헤더 값을 설정한 인스턴스 자신
	@throws {jindo.$Except.CANNOT_USE_OPTION} jsonp 타입일 경우 header메서드를 사용시 할 때.
	@example
		ajax.header( "myHeader", "someValue" );				// HTTP 요청 헤더의 myHeader 를 someValue 로 설정한다.
		ajax.header( { anotherHeader : "someValue2" } );	// HTTP 요청 헤더의 anotherHeader 를 someValue2 로 설정한다.
    ]]></comment>
    <comment id="value"><![CDATA[
	$value() 메서드는 원래의 XHR 객체를 반환한다.

	@method $value
	@return {Object} jindo.$Ajax() 객체가 감싸고 있는 XHR 요소.
	@see jindo.$Ajax
	@example
		var oAjax = new $Ajax("http://www.some.com/api.json");
		oAjax.$value(); // 원래의 XHR 객체가 반환된다.
    ]]></comment>
    <comment id="response_desc"><![CDATA[
	jindo.$Ajax.Response() 객체를 생성한다. jindo.$Ajax.Response() 객체는 jindo.$Ajax() 객체에서 request() 메서드의 요청 처리 완료한 후 생성된다. jindo.$Ajax() 객체를 생성할 때 onload 속성에 설정한 콜백 함수의 파라미터로 jindo.$Ajax.Response() 객체가 전달된다.

	@class jindo.$Ajax.Response
	@keyword ajaxresponse, ajax, response
    ]]></comment>
    <comment id="response"><![CDATA[
	Ajax 응답 객체를 래핑하여 응답 데이터를 가져오거나 활용하는데 유용한 기능을 제공한다.
	
	@constructor
	@param {Hash+} oReq 요청 객체
	@see jindo.$Ajax
    ]]></comment>
    <comment id="response_xml"><![CDATA[
	xml() 메서드는 응답을 XML 객체로 반환한다. XHR의 responseXML 속성과 유사하다.
	
	@method xml
	@return {Object} 응답 XML 객체. 
	@see https://developer.mozilla.org/en/XMLHttpRequest XMLHttpRequest - MDN Docs
	@example
		// some.xml
		<data>
			<li>첫번째</li>
			<li>두번째</li>
			<li>세번째</li>
		</data>
		
		// client.html
		var oAjax = new $Ajax('some.xml', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				var elData = cssquery.getSingle('data', res.xml());	// 응답을 XML 객체로 리턴한다
				$('list').innerHTML = elData.firstChild.nodeValue;
			},
		}).request();
    ]]></comment>
    <comment id="response_text"><![CDATA[
	text() 메서드는 응답을 문자열(String)로 반환한다. XHR의 responseText 와 유사하다.
	
	@method text
	@return {String} 응답 문자열. 
	@see https://developer.mozilla.org/en/XMLHttpRequest XMLHttpRequest - MDN Docs
	@example
		// some.php
		<?php
			echo "<li>첫번째</li><li>두번째</li><li>세번째</li>";
		?>
		
		// client.html
		var oAjax = new $Ajax('some.xml', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				$('list').innerHTML = res.text();	// 응답을 문자열로 리턴한다.
			},
		}).request();
    ]]></comment>
    <comment id="response_status"><![CDATA[
	status() 메서드는 HTTP 응답 코드를 반환한다. HTTP 응답 코드표를 참고한다.
	
	@method status
	@return {Numeric} 응답 코드.
	@see http://www.w3.org/Protocols/HTTP/HTRESP.html HTTP Status codes - W3C
	@example
		var oAjax = new $Ajax('some.php', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				if(res.status() == 200){	// HTTP 응답 코드를 확인한다.
					$('list').innerHTML = res.text();
				}
			},
		}).request();
    ]]></comment>
    <comment id="response_readyState"><![CDATA[
	readyState() 메서드는 응답 상태(readyState)를 반환한다.
	
	@method readyState
	@return {Numeric} readyState 값.
		@return .0 요청이 초기화되지 않은 상태 (UNINITIALIZED)
		@return .1 요청 옵션을 설정했으나, 요청하지 않은 상태 (LOADING)
		@return .2 요청을 보내고 처리 중인 상태. 이 상태에서 응답 헤더를 얻을 수 있다. (LOADED)
		@return .3 요청이 처리 중이며, 부분적인 응답 데이터를 받은 상태 (INTERACTIVE)
		@return .4 응답 데이터를 모두 받아 통신을 완료한 상태 (COMPLETED)
	@example
		var oAjax = new $Ajax('some.php', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				if(res.readyState() == 4){	// 응답의 readyState 를 확인한다.
					$('list').innerHTML = res.text();
				}
			},
		}).request();
    ]]></comment>
    <comment id="response_json"><![CDATA[
	json() 메서드는 응답을 JSON 객체로 반환한다. 응답 문자열을 자동으로 JSON 객체로 변환하여 반환한다. 변환 과정에서 오류가 발생하면 빈 객체를 반환한다.
	
	@method json
	@return {Object} JSON 객체.
	@throws {jindo.$Except.PARSE_ERROR} json파싱할 때 에러 발생한 경우.
	@example
		// some.php
		<?php
			echo "['첫번째', '두번째', '세번째']";
		?>
		
		// client.html
		var oAjax = new $Ajax('some.php', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				var welList = $Element('list').empty();
				var jsonData = res.json();	// 응답을 JSON 객체로 리턴한다
		
				for(var i = 0, nLen = jsonData.length; i < nLen; i++){
					welList.append($("<li>" + jsonData[i] + "</li>"));
				}
			},
		}).request();
    ]]></comment>
    <comment id="response_header"><![CDATA[
	header() 메서드는 응답 헤더를 가져온다.
	
	@method header
	@syntax sName
	@param {String+} [sName] 가져올 응답 헤더의 이름. 이 옵션을 입력하지 않으면 헤더 전체를 반환한다.
	@return {String | Object} 해당하는 헤더 값(String) 또는 헤더 전체(Object)

	@example
		var oAjax = new $Ajax('some.php', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				res.header("Content-Length")	// 응답 헤더에서 "Content-Length" 의 값을 리턴한다.
			},
		}).request();
    ]]></comment>
    <comment id="response_value"><![CDATA[
	$value() 메서드는 원래의 XHR 응답객체를 반환한다.

	@method $value
	@return {Object} jindo.$Ajax.Response() 객체가 감싸고 있는 XHR 응답객체
	@see jindo.$Ajax
	@example
		var oAjax = new $Ajax("http://www.some.com/api.json", {
		    onload: function(res) {
                res.$value(); // 원래의 XHR 응답 객체가 반환된다.
		    }).request();
    ]]></comment>
</comments>
