<comments name="cssquery">
  <comment id="title"><![CDATA[
	@fileOverview An optional engine that uses a CSS selector.
	@name cssquery.js
	@author  AjaxUI lab
  ]]></comment>
  <comment id="desc"><![CDATA[
	Built-In Namespace _global_
	
	@class jindo
	@static
  ]]></comment>
  <comment id="cssquery"><![CDATA[
	The $$() function (cssquery) uses the CSS selector to search for objects. cssquery() can be used instead of $$().
	
	@method $$
	@syntax sSelector, elBaseElement
	@syntax sSelector, sBaseElement
	@param {String+} sSelector CSS selector.
	@param {Element+} [elBaseElement] The DOM element to search for. Searches for the object from the subnodes of the specified element.
	@param {String+} sBaseElement The ID character string of the DOM element to search for. Searches for the object from the subnodes of the specified element.
	@return {Array} Returns the element that matches the condition in the array format.
	@remark There are two patterns that can be used as a CSS selector: standard and non-standard. The standard pattern supports the patterns in the CSS Level3 specification. The standard pattern supports the patterns in the CSS Level3 specification. For the description on the pattern of the selector, see the following table and the See Also section.<br>
		<h5>The element, ID, class, and selector</h5>
		<table class="tbl_board">
			<caption class="hide">The element, ID, class, and selector</caption>
			<thead>
				<tr>
					<th scope="col" style="width:20%">Pattern</th>
					<th scope="col">Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">*</td>
					<td class="txt">Every element
<pre class="code "><code class="prettyprint linenums">
	$$("*");
	// Every element in a document
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">HTML Tagname</td>
					<td class="txt">Specified HTML tags
<pre class="code "><code class="prettyprint linenums">
	$$("div");
	// Every &lt;div&gt; element in a document
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">#id</td>
					<td class="txt">Element of which the ID is specified
<pre class="code "><code class="prettyprint linenums">
	$$("#application")
	// Element of which the ID is application
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">.classname</td>
					<td class="txt">Element of which the class is specified
<pre class="code "><code class="prettyprint linenums">
	$$(".img");
	// Element of which the class is img
</code></pre>
					</td>
				</tr>
			</tbody>
		</table>
		<h5>The attribute selector</h5>
		<table class="tbl_board">
			<caption class="hide">The attribute selector</caption>
			<thead>
				<tr>
					<th scope="col" style="width:20%">Pattern</th>
					<th scope="col">Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">[type]</td>
					<td class="txt">Element that has a specified attribute
<pre class="code "><code class="prettyprint linenums">
	$$("input[type]");
	// The &lt;input&gt; elelment that has the type attribute
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type=value]</td>
					<td class="txt">Element of which the attribute is identical to value
<pre class="code "><code class="prettyprint linenums">
	$$("input[type=text]");
	// The &lt;input&gt; element of which value of the type attribute is text
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type^=value]</td>
					<td class="txt">Element of which the attribute value begins with a specific value
<pre class="code "><code class="prettyprint linenums">
	$$("input[type^=hid]");
	//The &lt;input&gt; element of which value of the type attribute begins with hid
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type$=value]</td>
					<td class="txt">Element of which the attribute value ends with a specific value
<pre class="code "><code class="prettyprint linenums">
	$$("input[type$=en]");
	//The &lt;input&gt; element of which value of the type attribute ends with en
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type~=value]</td>
					<td class="txt">Element that has only one value when multiple values separated by space exist
<pre class="code "><code class="prettyprint linenums">
	&lt;img src="..." alt="welcome to naver"&gt;
	$$("img[alt~=welcome]"); // Yes
	$$("img[alt~=naver]"); // Yes
	$$("img[alt~=wel]"); // No
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type*=value]</td>
					<td class="txt">Element that has value identical to one of its attributes
<pre class="code "><code class="prettyprint linenums">
	$$("img[alt*=come]"); // Yes
	$$("img[alt*=nav]"); // Yes
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[type!=value]</td>
					<td class="txt">Element of which value is not identical to specified value
<pre class="code "><code class="prettyprint linenums">
	$$("input[type!=text]");
	// Value of the type attribute is not text
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">[@type]</td>
					<td class="txt">As a selector exclusively used for cssquery, it uses the style attribute of the element instead of the attribute of the element. All the characteristics of the CSS attribute selector can be used.
<pre class="code "><code class="prettyprint linenums">
	$$("div[@display=block]");
	//  Element of which the display style attribute value is block
</code></pre>
					</td>
				</tr>
			</tbody>
		</table>
		<h5>The virtual class selector</h5>
		<table class="tbl_board">
			<caption class="hide">The virtual class selector</caption>
			<thead>
				<tr>
					<th scope="col" style="width:20%">Pattern</th>
					<th scope="col">Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">:nth-child(n)</td>
					<td class="txt">Selects the element based on the nth-child.
<pre class="code "><code class="prettyprint linenums">
	$$("div:nth-child(2)");
	// The &lt;div&gt; element, the second child element
	
	$$("div:nth-child(2n)");
	$$("div:nth-child(even)");
	// All &lt;div&gt; elements, every even-numbered child elements
	
	$$("div:nth-child(2n+1)");
	$$("div:nth-child(odd)");
	// All &lt;div&gt; elements, every odd-numbered child elements
	
	$$("div:nth-child(4n)");
	// All &lt;div&gt; elements, every multiple of 4 for child elements
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:nth-last-child(n)</td>
					<td class="txt">It is the same as the nth-child but selects backword from the end of the elements.
<pre class="code "><code class="prettyprint linenums">
	$$("div:nth-last-child(2)");
	// All &lt;div&gt; elements, second position from the end of the child elements
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:last-child</td>
					<td class="txt">Selects the element based on the last child .
<pre class="code "><code class="prettyprint linenums">
	$$("div:last-child");
	// All the &lt;div&gt; elements, the last child elements
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:nth-of-type(n)</td>
					<td class="txt">Selects the element detected as nth.
<pre class="code "><code class="prettyprint linenums">
	&lt;div&gt;
		&lt;p&gt;1&lt;/p&gt;
		&lt;span&gt;2&lt;/span&gt;
		&lt;span&gt;3&lt;/span&gt;
	&lt;/div&gt;
</code></pre>
						If the DOM shown above exists, $$("span:nth-child(1)") does not return the result value because no element of which &lt;span&gt; is firstChild exists. However, $$("span:nth-of-type(1)") gets &lt;span&gt;2&lt;/span&gt;, the first &lt;span&gt; element among &lt;span&gt; elements.<br>Like the nth-child, the odd/even expressions can be used.
					</td>
				</tr>
				<tr>
					<td class="txt bold">:first-of-type</td>
					<td class="txt">Selects the first element among the sibling elements with the same tag name.<br>The result value returned is the same with the nth-of-type(1).</td>
				</tr>
				<tr>
					<td class="txt bold">:nth-last-of-type</td>
					<td class="txt">Identical with nth-of-type, but it selects the elements from the last.</td>
				</tr>
				<tr>
					<td class="txt bold">:last-of-type</td>
					<td class="txt">Selects the last element among the sibling elements with the same tag name.<br>The result value returned is the same with the nth-last-of-type(1).</td>
				</tr>
				<tr>
					<td class="txt bold">:contains</td>
					<td class="txt">Selects the element based on whether it includes a specific character string in the text node.
<pre class="code "><code class="prettyprint linenums">
	$$("span:contains(Jindo)");
	// The &lt;span&gt; element that includes the "Jindo" character string
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:only-child</td>
					<td class="txt">Selects elements with no sibling elements.
<pre class="code "><code class="prettyprint linenums">
	&lt;div&gt;
		&lt;p&gt;1&lt;/p&gt;
		&lt;span&gt;2&lt;/span&gt;
		&lt;span&gt;3&lt;/span&gt;
	&lt;/div&gt;
</code></pre>
						In the above DOM, $$("div:only-child") has a return value. But neither $$("p:only-child") nor $$("span:only-child") has a return value. This means that only the &lt;div&gt; element without sibling elements will be selected.
					</td>
				</tr>
				<tr>
					<td class="txt bold">:empty</td>
					<td class="txt">Selects the empty element.
<pre class="code "><code class="prettyprint linenums">
	$$("span:empty");
	// The &lt;span&gt; element without a text node or a subnode.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">:not</td>
					<td class="txt">Selects the elememt of which the condition is opposite to that of the selector.
<pre class="code "><code class="prettyprint linenums">
	$$("div:not(.img)");
	// The &lt;div&gt; element without an img class.
</code></pre>
					</td>
				</tr>
			</tbody>
		</table>
		<h5>The combinator selector</h5>
		<table class="tbl_board">
			<caption class="hide">The combinator selector</caption>
			<thead>
				<tr>
					<th scope="col" style="width:20%">Pattern</th>
					<th scope="col">Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">Space</td>
					<td class="txt">It means all the sub elements.
<pre class="code "><code class="prettyprint linenums">
	$$("body div");
	// All the &lt;div&gt; sub elements of the &lt;body&gt; element
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">&gt;</td>
					<td class="txt">It means all the elements that belong to the child node.
<pre class="code "><code class="prettyprint linenums">
	$$("div &gt; span");
	// All the &lt;span&gt; elements among the child elements of the &lt;div&gt; element
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">+</td>
					<td class="txt">It means all elements that belong to the next sibling element of the specified element.
<pre class="code "><code class="prettyprint linenums">
	$$("div + p");
	// All the &lt;p&gt; elements that belong to the nextSibling of the &lt;div&gt; element.
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">~</td>
					<td class="txt">Identical with the + pattern, but it means all the elements that come after the specified node, as well as the next sibling element.
<pre class="code "><code class="prettyprint linenums">
	$$("div ~ p");
	// All the &lt;p&gt; element that belong to the sibling element that occurs after the &lt;div&gt; element
</code></pre>
					</td>
				</tr>
				<tr>
					<td class="txt bold">!</td>
					<td class="txt">Exclusive for cssquery, it starts searching from the opposite direction of the combinator to search for the element.
<pre class="code "><code class="prettyprint linenums">
	$$("span ! div");
	// All the &lt;div&gt; super elements of the &lt;span&gt; element
</code></pre>
					</td>
				</tr>
			</tbody>
		</table>
	@see jindo.$Document#queryAll
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 Specification - W3C
	@history 2.4.0 Support mobile버전 JindoJS에서 ! 콤비네이터 지원(!, !>, !~, !+)
	@example
		// Searches IMG tags in a document.
		var imgs = $$('IMG');
		
		// Searches IMG tags under div section.
		var imgsInDiv = $$('IMG', $('div'));
		
		// Searches the first element of IMG tags in a document.
		var firstImg = $$.getSingle('IMG');
  ]]></comment>
  <comment id="cssquery_1"><![CDATA[
Configures querySelector.
  ]]></comment>
  <comment id="cssquery_2"><![CDATA[
Configures a unique key value for quick processing.
  ]]></comment>
  <comment id="backupKeys"><![CDATA[
Replaces strings that may cause problems while parsing such as double quotes, [], and so on.
  ]]></comment>
  <comment id="backupKeys_1"><![CDATA[
Replaces single quotations.
  ]]></comment>
  <comment id="backupKeys_2"><![CDATA[
Replaces double quotations.
  ]]></comment>
  <comment id="backupKeys_3"><![CDATA[
Replaces [].
  ]]></comment>
  <comment id="backupKeys_4"><![CDATA[
Replaces ().
  ]]></comment>
  <comment id="restoreKeys"><![CDATA[
Restores the replaced strings.
  ]]></comment>
  <comment id="restoreKeys_1"><![CDATA[
Removes ( ). 
  ]]></comment>
  <comment id="restoreString"><![CDATA[
Returns all strings except Quot in the replaced strings.
  ]]></comment>
  <comment id="getNodeIndex"><![CDATA[
If node indexes are not obtained
  ]]></comment>
  <comment id="oNodeIndexes"><![CDATA[
The below describes how to configure the child node.
  ]]></comment>
  <comment id="pseudoe"><![CDATA[
A virtual class
  ]]></comment>
  <comment id="getExpression"><![CDATA[
Gets an expression from the body of a single part.
  ]]></comment>
  <comment id="getExpression_1"><![CDATA[
Gets the conditions of pseudo classes.
  ]]></comment>
  <comment id="getExpression_2"><![CDATA[
Parses the value in parentheses recursively.
  ]]></comment>
  <comment id="getExpression_3"><![CDATA[
Gets [key=value] pattern.
  ]]></comment>
  <comment id="getExpression_4"><![CDATA[
Gets class conditions.
  ]]></comment>
  <comment id="getExpression_5"><![CDATA[
Gets id conditions.
  ]]></comment>
  <comment id="getExpression_6"><![CDATA[
Creates the code of a match function.
  ]]></comment>
  <comment id="getExpression_7"><![CDATA[
Uses unshift so that the pseudo-class condition check can move to the end.
  ]]></comment>
  <comment id="splitToParts"><![CDATA[
Truncates queries by operator.
  ]]></comment>
  <comment id="compileParts"><![CDATA[
Compiles the truncated part by function.
  ]]></comment>
  <comment id="compileParts_1"><![CDATA[
Creates conditions for the truncates part.
  ]]></comment>
  <comment id="parseQuery"><![CDATA[
Converts queries to a match function.
  ]]></comment>
  <comment id="parseTestQuery"><![CDATA[
Converts test queries to a match function.
  ]]></comment>
  <comment id="old_cssquery_1"><![CDATA[
Finds ownerDocument.
  ]]></comment>
  <comment id="old_cssquery_2"><![CDATA[
Internet Explorer 5.5 or earlier
  ]]></comment>
  <comment id="old_cssquery_3"><![CDATA[
Checks whether it is XMLDocument.
  ]]></comment>
  <comment id="old_cssquery_4"><![CDATA[
Separates queries by a comma.
  ]]></comment>
  <comment id="old_cssquery_5"><![CDATA[
Separates query loop by a comma.
  ]]></comment>
  <comment id="old_cssquery_6"><![CDATA[
Searches a result cache.
  ]]></comment>
  <comment id="old_cssquery_7"><![CDATA[
Checks whether the parents of cached items are the same, and if so, substitutes them for aSingleQueryResult.
  ]]></comment>
  <comment id="old_cssquery_8"><![CDATA[
Stores in cache if a result cache is being used.
  ]]></comment>
  <comment id="cssquery_desc"><![CDATA[
 @lends $$
  ]]></comment>
	<comment id="cssquery_desc_1"><![CDATA[
	documentFragment일 때 는 복사해서 찾음.
	]]></comment>
	<comment id="cssquery_desc_2"><![CDATA[
	돔이 붙은 경우는 상위 엘리먼트를 기준으로
	]]></comment>
	<comment id="cssquery_desc_3"><![CDATA[
	돔이 떨어진 경우에는 상위 엘리먼트를 만들어서 탐색.
	]]></comment>
	<comment id="cssquery_desc_4"><![CDATA[
	!= 는 아니면서, '!' 가 있으면(!, !>, !+, !~ 의 경우)
	]]></comment>
  <comment id="test"><![CDATA[
	The test() method determines whether a specific element complies to the CSS selector and returns it as a Boolean value.
	
	@method $$.test
	@static
	@param {Element+} element Elements to be examined
	@param {String+} sCSSSelector CSS selector. There are two patterns that can be used as a CSS selector: standard and non-standard. The standard pattern supports the patterns in the CSS Level3 specification.
	@return {Boolean} Returns true if the condition is met, false, if not.
	@remark 
		<ul class="disc">
			<li>Please note that connectors cannot be used with CSS selector.</li>
			<li>For the description on the pattern of the selector, see the $$() function and the See Also section.</li>
		</ul>
	@see jindo.$$
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 Specification - W3C
	@example
		// Checks whether oEl is an element in which the div tag, p tag, or align attribute is specified as center.
		if (cssquery.test(oEl, 'div, p, [align=center]'))
		alert('satisfies the condition');
  ]]></comment>
  <comment id="useCache"><![CDATA[
	The useCache() method determines whether cache is used when using the $$() function (cssquery). If an identical selector is used to search when using cache, no search is made and the existing search result is returned. Therefore, the user can easily and quickly use it regardless of the variable cache. However, it should be used only when the DOM structure does not dynamically change for reliability concerns.
	
	@method $$.useCache
	@static
	@param {Boolean} [bFlag] Specifies whether cache is used. If it is omitted, returns the cache usage state only.
	@return {Boolean} Returns the cache usage state.
	@see jindo.$$.clearCache
  ]]></comment>
  <comment id="clearCache"><![CDATA[
	The clearCache() method empties caches when using caches in the $$() function. It can be used when no credibility is guaranteed for the existing cache data because the DOM structure dynamically changes.
	
	@method $$.clearCache
	@static
	@see jindo.$$.useCache
  ]]></comment>
  <comment id="getSingle"><![CDATA[
	The getSingle() method retrieves the first element that satisfies the condition by using CSS selector. The return value is not an array but an object or null. When an element that satisfies the condition is found, the search stops immediately. Therefore, the result can be quickly achieved if it is certain that only one result exists.
	
	@method $$.getSingle
	@static
	@syntax sSelector, oBaseElement, oOption
	@syntax sSelector, sBaseElement, oOption
	@param {String+} sSelector CSS selector. There are two patterns that can be used as a CSS selector: standard and non-standard. The standard pattern supports the patterns in the CSS3 Level3 specification. For the description on the pattern of the selector, see the $$() function and the See Also section.
	@param {Element+} [oBaseElement] The DOM element to search for. Searches for the object from the subnodes of the specified element. If it is omitted, searches from the documents.
	@param {Hash+} [oOption] If the oneTimeOffCache attribute of the option object is set to true, cache is not used when searching.
	@param {String+} [sBaseElement] The ID of the DOM element to search for. Searches for the object from the subnodes of the specified element. If it is omitted, searches from the documents. It can contain id.
	@return {Element | Boolean} Returns null if no result is found.
	@see jindo.$Document#query	 
	@see jindo.$$.useCache
	@see jindo.$$
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 Specification - W3C
  ]]></comment>
  <comment id="xpath"><![CDATA[
	The xpath() method retrieves the element that satisfies the XPath syntax. It is recommended to use it only for specific cases because it supports limited syntax.
	
	@method $$.xpath
	@static
	@param {String+} sXPath The XPath value
	@param {Element} [elBaseElement] The DOM element to search for. Searches for the object from the subnodes of the specified element. 
	@return {Array | Boolean} XPath The array which has the elements that satisfy the XPath syntax. Returns null if no result is found.
	@filter desktop
	@see jindo.$Document#xpathAll
	@see http://www.w3.org/standards/techs/xpath#w3c_all XPath Document - W3C
  ]]></comment>
  <comment id="debug"><![CDATA[
	The debug() method provides functionalities of measuring the performance of the $$() function (cssquery). Measures the performance by using the callback function entered as a parameter.
	
	@method $$.debug
	@static
	@param {Function} fCallback A function that checks the cost and time taken to executing the selector. If false is entered, instead of function, to the parameter, performance measurement mode (debug) is not used.
	@param {Numeric} [nRepeat] The number of times to execute a single selector. It can be used to purposefully slow down the execution speed.
	@filter desktop
	@remark The fCallback callback function has query, cost, and executeTime as its parameters.<br>
		<ul class="disc">
			<li>query is the selector used for execution.</li>
			<li>index is the cost used for search (the number of loops).</li>
			<li>executeTime is the time spent searching.</li>
		</ul>
	@example
		cssquery.debug(function(sQuery, nCost, nExecuteTime) {
			if (nCost > 5000)
				console.warn('the cost is over 5000?! let's check -> ' + sQuery + '/' + nCost);
			else if (nExecuteTime > 200)
				console.warn('taking more than 0.2 seconds?! let's check -> ' + sQuery + '/' + nExecuteTime);
		}, 20);
		
		....
		
		cssquery.debug(false);
  ]]></comment>
  <comment id="safeHTML"><![CDATA[
	The safeHTML() method prevents the _cssquery_UID value from being displayed when the innerHTML attribute is used by the Internet Explorer. When it is set to true, the innerHTML attribute has no _cssquery_UID. However, the search speed will slow down.
	
	@method $$.safeHTML
	@static
	@param {Boolean} bFlag Determines whether _cssquery_UID is displayed. When it is set to true, _cssquery_UID is not displayed.
	@return {Boolean} Returns the _cssquery_UID display state. Returns true when _cssquery_UID is displayed, otherwise, false.
	@filter desktop
  ]]></comment>
  <comment id="version"><![CDATA[
	The version attribute is a character string that includes the version information of cssquery.
	
	@property $$.version
	@type String
	@field
	@static
	@filter desktop
  ]]></comment>
  <comment id="release"><![CDATA[
	Adds a module to handle the memory leak caused by using validUID or cache in IE.
  ]]></comment>
  <comment id="getCacheInfo"><![CDATA[
	A function that checks whether cache can be deleted
	
	@method $$._getCacheInfo
	@filter desktop
	@ignore
  ]]></comment>
  <comment id="resetUID"><![CDATA[
	A function for testing
	
	@method $$._resetUID
	@filter desktop
	@ignore
  ]]></comment>
  <comment id="extreme"><![CDATA[
	If extreme is executed in a browser with querySelector, the querySelector coverage increases, which is resulting in speedup.
	However, if elements without IDs are used as base element, IDs are randomly assigned to base elements.
	
	@method $$.extreme
	@static
	@ignore
	@param {Boolean} bExtreme true
  ]]></comment>
  <comment id="_commaRevise"><![CDATA[
	다중 선택 쿼리(콤마(,)가 들어 감)의 경우 첫번째 콤마 뒤에 있는 쿼리부터 부모의 식별자를 추가한다.
	아래처럼 쿼리를 날릴 경우
	$$("span, div", $("bumo"));
	sQuery 매개변수엔 "#bumo span, div"가 지정되고,
	sChange 매개벼수엔 ", #bumo"가 지정되어, 치환되고 나면
	"#bumo span, #bumo div"과 같은 형태가 된다.
	
	@ignore
	@method _commaRevise
	@param {String} sQuery 쿼리 문자열
	@param {String} sChange 교체할 문자열
	]]></comment>
	<comment id="_trim"><![CDATA[
	문자열의 앞뒤 공백 문자를 제거한다.
	
	@ignore
	@method _trim
	@param {String} str
	]]></comment>
	<comment id="_getParentElement"><![CDATA[
	부모 요소를 반환한다.
	
	@ignore
	@method _getParentElement
	@param {Object} oParent
	]]></comment>
	<comment id="_cssquery4Excl"><![CDATA[
	!, !> 콤비네이터가 존재하는 경우에만 호출된다. ! : 특정 요소에서부터 상위로 한단계씩 끝까지 올라가면서 부합되는 요소들만 모두 반환한다. !> : 특정 요소의 부합되는 직계 부모 요소를 반환한다. 직계 부모가 부합되지 않으면 빈 배열이 반환된다. 메서드 이름은 '느낌표(exclamation mark)를 위한 cssquery'을 의미한다.
	
	@ignore
	@method _cssquery4Excl
	@param {String} sQuery 쿼리 전체 문자열 (콤마로 구분되어 있을 수 있음)
	@param {HTMLElement} elParent 검색할 기준 요소
	@param {Object} oOptions 옵션
	]]></comment>
	<comment id="_processSingleQuery"><![CDATA[
	단일 쿼리를 처리한다.
	
	@ignore
	@method _processSingleQuery
	@param {String} sQuery 쿼리 전체 문자열
	@param {HTMLElement} elParent 검색할 기준 요소
	@param {Object} oOptions 옵션
	@return {Array} 선택되어진 요소를 원소로 갖는 배열
	]]></comment>
	<comment id="_splitQueryToObject"><![CDATA[
	쿼리를 !, !>, !+, !~ 기준으로 쪼개어서 좌측 쿼리와(자식 혹은 형제), 우측 쿼리(부모 혹은 형제) 그리고 콤비네이터를 속성으로 가지고 있는 오브젝트를 원소로 가지는 배열을 반환한다.
	
	@ignore
	@method _splitQueryToObject
	@param {String} sQuery
	@return {Array} 자식 혹은 형제 선택 쿼리(sLeftQuery), 부모 혹은 형제 선택자(sRightSelector), 콤비네이터(sCombinator)를 속성으로 가지는 오브젝트를 원소로 갖는 배열
	]]></comment>
	<comment id="_splitQueryToObject_1"><![CDATA[
	맨 끝에 남은 선택자가 하나 이상인 경우만 담는다.
	]]></comment>
	<comment id="_getFirstSelector"><![CDATA[
	쿼리의 첫번째 선택자를 반환한다.
	
	@ignore
	@method _getFirstSelector
	@param {String} sQuery 쿼리 문자열
	@return {String} 첫번째 선택자
	]]></comment>
	<comment id="_removeFirstSelector"><![CDATA[
	쿼리의 첫번째 선택자를 제거한다.
	
	@ignore
	@method _removeFirstSelector
	@param {String} sQuery 쿼리 문자열
	@return {String} 첫번째 선택자를 제거한 문자열
	@example
		var sQuery = "p ~ img";
		_removeFirstSelector(sQuery); // "~ img"
	]]></comment>
	<comment id="_getMatchedElement"><![CDATA[
	!, !> 기준으로 좌측과 우측 쿼리는 네이티브 메서드를 사용하여 요소를 찾고, 바로 우측의 첫 셀렉터의 결과 요소들이 좌측 셀렉터의 결과 요소들을 포함하는지를 검사하여 포함하는 요소를 반환한다.
		
		@ignore
		@method _getMatchedElement
		@param {Object} oQuery !, !>, !+, !~ 기준으로 좌측의 쿼리와 바로 우측의 셀렉터 하나, 콤비네이터를 속성으로 가지는 오브젝트
			@param {String} oQuery.sCombinator 콤비네이터
			@param {String} oQuery.sLeftQuery 좌측 자식 혹은 형제 선택 쿼리
			@param {String} oQuery.sRightSelector 우측 부모 혹은 형제 선택자
		@param {HTMLElement} elParent
		@param {Object} oOptions 옵션 객체
		@param {Array} aResult 앞의 쿼리에서 선택되어진 요소들을 원소로 갖는 배열
		@return {Array} 매치결과 배열
	]]></comment>
	<comment id="_getMatchedElement_1"><![CDATA[
	쿼리가 "div span ! p + img" 라면, 아래 조건을 만족하는 것은 "p + img" 일때 이다.
	우측 선택자가 없으므로 aResult를 바로 반환하면 된다.
	]]></comment>
	<comment id="_getPreviousSiblingElementForExcl"><![CDATA[
	!+, !~ 콤비네이터를 기준으로 좌측과 우측 쿼리는 네이티브 메서드를 사용하여 요소를 찾고, 바로 우측의 첫 셀렉터의 결과 요소들이 좌측 셀렉터의 결과 요소들을 포함하는지를 검사하여 포함하는 요소를 반환한다. 메서드명 끝에 붙은 Excl은 exclamation mark(느낌표)의 앞 4글자이다.
	
	@ignore
	@method _getPreviousSiblingElementForExcl
	@param {Array} aLeftEl 좌측 쿼리에서 검색된 요소들
	@param {Object} oQuery !, !>, !+, !~ 기준으로 좌측의 쿼리와 바로 우측의 셀렉터 하나, 콤비네이터를 속성으로 가지는 오브젝트
		@param {String} oQuery.sCombinator 콤비네이터
		@param {String} oQuery.sLeftQuery 좌측 자식 혹은 형제 선택 쿼리
		@param {String} oQuery.sRightSelector 우측 부모 혹은 형제 선택자
	@param {Object} oOptions 옵션 객체
	@param {HTMLElement} elBaseParent 요소를 검색할 기준 요소
	@return {Array} 매치결과 배열
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl"><![CDATA[
	aChild의 요소 하나당 aRightEl의 모든 요소에 대해 반복하면서 자식 요소를 포함하는 부모 요소를 찾아 반환한다.  메서드명 끝에 붙은 Excl은 exclamation mark(느낌표)의 앞 4글자이다.
	
	@ignore
	@method _getParentElementIncludesChildForExcl
	@param {Array} aChild
	@param {Object} oQuery !, !>, !+, !~ 기준으로 좌측의 쿼리와 바로 우측의 셀렉터 하나, 콤비네이터를 속성으로 가지는 오브젝트
		@param {String} oQuery.sCombinator 콤비네이터
		@param {String} oQuery.sLeftQuery 좌측 자식 혹은 형제 선택 쿼리
		@param {String} oQuery.sRightSelector 우측 부모 혹은 형제 선택자
	@param {Object} oOptions
	@param {HTMLElement} elBaseParent 요소를 검색할 기준 요소
	@return {Array} 자식 요소를 포함하는 부모 요소를 원소로 갖는 배열
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_1"><![CDATA[
	elParent와 elChild가 같을때에도 contains() 메서드는 true를 반환한다.
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_2"><![CDATA[
	콤비네이터가 !> 라면 바로 상위의 부모만 담는다.
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_3"><![CDATA[
	aParent.splice(j, 1); 하면 안되는 이유 : elChild를 포함하는 요소는 1개 이상인데, 여기서 빼버리면 이 인덱스 바로 뒤에 있는 요소를 담지 못함.
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_4"><![CDATA[
	각각의 배열을 뒤집어야 올바른 순서가 된다. 위의 안쪽 for문을 반대로 돌린다고 해서 올바른 결과를 찾지 못한다.각 그룹별로 역순이 되어야 하기 때문이다.
	]]></comment>
	<comment id="_getParentElementIncludesChildForExcl_5"><![CDATA[
	앞의 이중 for문의 안쪽 for문에서 break를 하지 않는 이유는, 일단 한 세트가 배열에 담겨 순서를 뒤집어야 하기 때문이다.
	]]></comment>
	<comment id="_getLeftElementForExcl"><![CDATA[
	쿼리에서 좌측에 해당하는 요소를 찾아 반환한다. "div span ! p" 에서 "div span"이 해당된다. 메서드명 끝에 붙은 Excl은 exclamation mark(느낌표)의 앞 4글자이다.
	
	@ignore
	@method _getLeftElementForExcl
	@param {Object} oQuery !, !>, !+, !~ 기준으로 좌측의 쿼리와 바로 우측의 셀렉터 하나, 콤비네이터를 속성으로 가지는 오브젝트
		@param {String} oQuery.sCombinator 콤비네이터
		@param {String} oQuery.sLeftQuery 좌측 자식 혹은 형제 선택 쿼리
		@param {String} oQuery.sRightSelector 우측 부모 혹은 형제 선택자
	@param {HTMLElement} elBaseParent
	@param {Array} aPrevResult 앞서 쿼리에서 선택된 요소를 원소로 답고 있는 배열
	@return {Array} 검색된 자식 요소를 원소로 갖는 배열
	]]></comment>
	<comment id="_getLeftElementForExcl_1"><![CDATA[
	좌측 선택 쿼리가 선택자 하나라면 aPrevResult를 바로 반환한다. 선택자가 하나인 것은 aPrevResult자체를 의미하기 때문이다.
	쿼리가 "div span ! p ! img" 라면, "p ! img" 쿼리에서 "p"가 이에 해당된다.
	]]></comment>
	<comment id="_addQueryId"><![CDATA[
	요소 탐색용 id attribute를 추가한다.
	
	@ignore
	@method _addQueryId
	@param {HTMLElement} el 요소 탐색용 id attribute를 추가할 요소
	@param {String} sIdName 요소 탐색용 id attribute의 이름
	@return {String} 요소 탐색용 id attribute가 적용된 쿼리 선택자
	]]></comment>
	<comment id="_removeQueryId"><![CDATA[
	추가했던 요소 탐색용 id를 제거한다.
	
	@ignore
	@method _removeQueryId
	@param {HTMLElement} el 요소 탐색용 id attribute를 제거할 요소
	@param {String} sIdName 요소 탐색용 id attribute의 이름
	]]></comment>
	<comment id="_removeQueryIdToArray"><![CDATA[
	배열에 담긴 요소들의 탐색용 id를 제거한다.
	
	@ignore
	@method _removeQueryIdToArray
	@param {Array} aEl 요소가 담긴 배열 요소
	@param {String} sIdName 쿼리 id 문자열
	]]></comment>
</comments>
