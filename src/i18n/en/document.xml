<comments name="document">
  <comment id="title"><![CDATA[
	@fileOverview A file to define the constructor and method of $Document
	@name document.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	The jindo.$Document() object provides document-related information.
	
	@class jindo.$Document
	@keyword document
  ]]></comment>
  <comment id="constructor"><![CDATA[
	Creates the jindo.$Document() object. If any parameter is not specified, the document element of a current document is specified by default.
	
	@constructor
	@syntax elDocument
	@param {Element} [elDocument] Document elements
  ]]></comment>
  <comment id="value"><![CDATA[
	The $value() method returns the original document elements.
	
	@method $value
	@return {Element} A document element
  ]]></comment>
  <comment id="scrollSize"><![CDATA[
	The scrollSize() method returns an object that contains information about document width and height.
	
	@method scrollSize
	@return {Object} An object that contains information about document width and height
		@return {Number} .width Document width information. (unit: pixels)
		@return {Number} .top Document height information. (unit: pixels)
	@see jindo.$Document#clientSize
	@example
		var size = $Document().scrollSize();
		alert('width : ' + size.width + ' / height : ' + size.height);
  ]]></comment>
  <comment id="scrollSize_1"><![CDATA[
body must be used to get the normal scroll size even in Standard mode for webkit.
  ]]></comment>
  <comment id="scrollPosition"><![CDATA[
	The scrollPosition() method gets the current scroll position of the document.
	
	@method scrollPosition
	@return {Object} Returns left representing horizontal position and top representing vertical position as key values.
		@return {Number} .left Horizontal scroll position. (unit: pixels)
		@return {Number} .height Vertical scroll position. (unit: pixels)
	@since 1.3.5
	@example
		var size = $Document().scrollPosition();
		alert('horizontal : ' + size.left + ' / vertical : ' + size.top);
  ]]></comment>
  <comment id="scrollPosition_1"><![CDATA[
body must be used to get the normal scroll Size even in Standard mode for webkit.
  ]]></comment>
  <comment id="clientSize"><![CDATA[
	The clientSize() method returns an object that contains inner width and height values of the document.
	(*to get viewport's size, use 'window.innerWidth/innerHeight' native properties values instead of using this method.)
	
	@method clientSize
	@return {Object} An object which contains width and height values.
		@return {Number} document's inner width. (unit: pixels)
		@return {Number} document's inner height. (unit: pixels)
	@see jindo.$Document#scrollSize
	@example
		var size = $Document(document).clientSize();
		alert('width : ' + size.width + ' / height : ' + size.height);
  ]]></comment>
  <comment id="renderingMode"><![CDATA[
	The renderingMode() method returns the document rendering.
	
	@method renderingMode
	@return {String} Rendering mode.
		@return {String} ."Standards" Standard mode
		@return {String} ."Almost" Almost standard mode. Returned on every web browser except Internet Explorer when the Document Type Declaration (DTD) is not properly specified.
		@return {String} ."Quirks" Quirks mode
	@filter desktop
	@see http://hsivonen.iki.fi/doctype/ Differences of rendering according to browser and DTD are described.
	@example
		var mode = $Document().renderingMode();
		alert('rendering mode : ' + mode);
  ]]></comment>
  <comment id="queryAll"><![CDATA[
	Returns array elements that satisfy the specified document selectors. An empty array is returned if any element satisfying the given selector does not exist. Specifying document as an elBaseElement parameter in the $$() function is the same way to use this.
	
	@method queryAll
	@param {String+} sSelector CSS selectors. There are two types of patterns that can be used as CSS selectors: standard and non-standard patterns. The standard pattern is supported by the CSS Level 3 specification. For more information about pattern of given selector, see the $$() function and See Also section.
	@return {Array} The array elements that satisfy conditions of given selector
	@see _global_.html#$$
	@see http://www.w3.org/TR/css3-selectors/ CSS Level 3 Specification - W3C
	@example
		$Document().queryAll("span");  // Selects every <span> element in a document.
  ]]></comment>
  <comment id="query"><![CDATA[
	Returns a first element that satisfies the given selector in a document. null is returned if any element satisfying the given selector does not exist. Specifying document as an elBaseElement parameter in the $$.getSingle function is the same way to use this.
	
	@method query
	@param {String+} sSelector CSS selectors. There are two types of patterns that can be used as CSS selectors: standard and non-standard patterns. The standard pattern is supported by the CSS Level 3 specification. For more information about pattern of given selector, see the $$() function and See Also section.
	@return {Element} A first element that satisfies conditions of given selector
	@see _global_.html#.$$.getSingle
	@see _global_.html#$$
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 Specification - W3C
	@example
		$Document().query("body");  // Select the <body> element.
  ]]></comment>
  <comment id="xpathAll"><![CDATA[
	Gets elements that satisfy the XPath syntax in a document. It is recommended to use only in certain circumstances because supported syntaxes are limited. Specifying document as an elBaseElement parameter in the $$.xpath() function is the same way to use this.
	
	@method xpathAll
	@param {String+} sXPath The XPath value
	@return {Array} The array that has elements satisfying the XPath syntax as its components
	@see _global_.html#.$$.xpath
	@see http://www.w3.org/standards/techs/xpath#w3c_all XPath Document - W3C
	@example
		var oDocument = $Document();
		alert (oDocument.xpathAll("body/div/div").length);
  ]]></comment>
</comments>
