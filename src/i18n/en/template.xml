<comments name="template">
  <comment id="title"><![CDATA[
	@fileOverview A file to define the constructor and methods of the jindo.$Template() object
	@name template.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
  	The jindo.$Template() object interprets a template and applies data in a template dynamically.
	
	@class jindo.$Template
	@keyword template
  ]]></comment>
  <comment id="constructor"><![CDATA[
	Creates the jindo.$Template() object.

	@constructor
	@syntax sTemplate, sEngineName
	@syntax elTemplate, sEngineName
	@param {String+} sTemplate A string to be used as a template or the id of HTML elements.<br />
		If a parameter is string, it operates in two ways.
		<ul class="disc">
			<li>If a string is the id of HTML elements, innerHTML of the HTML elements is used as a template.</li>
			<li>If it is a string, the string itself is used as a template.</li>
		</ul>
	@param {Element+} elTemplate HTML elements as a template. If a parameter is the HTML element, only EXTAREA and SCRIPT can be used.
		<ul class="disc">
			<li>If HTML elements are part of the SCRIPT element, the type attribute must be specified as "text/template."</li>
			<li>If value of HTML elements is used as a template. If value does not exist, innerHTML of the HTML elements is used as a template.</li>
		</ul>
	@param {String+} [sEngineName="default"] 사용할 컴파일 엔진의 이름. 정적 메서드 jindo.$Template.addEngine()를 사용하여 사용자가 원하는 엔진을 등록하여 사용할 수 있다. 각 엔진별로 그에 상응하는 문법의 템플릿을 사용해야 한다.
		@param {String+} [sEngineName."default"] 기존 $Template 엔진. sEngineName 파라미터 생략시 "default" 엔진을 사용한다.
		@param {String+} sEngineName."micro" John Resig의 <auidoc:see content="http://ejohn.org/blog/javascript-micro-templating/">Micro-Templating 엔진</auidoc:see>.
		@param {String+} sEngineName."handlebars" <auidoc:see content="http://handlebarsjs.com/">handlebars 엔진</auidoc:see>.<br />
				handlebars 엔진을 사용하기 위해서는 별도로 해당 js 파일을 삽입해야 한다. 삽입하지 않고 handlebars 엔진으로 인스턴스 생성 후, $Template#process 메서드를 호출 하면 jindo.$Except.NOT_FOUND_HANDLEBARS 오류가 발생한다.
		@param {String+} sEngineName."simple" 2.4.0 버전에 새롭게 추가된, 단순 문자열 치환 엔진.<br />
				simple 엔진의 템플릿 문법은 치환하고자 하는 문자열을 중괄호 2개로 감싸주면 된다. if 문이나 for 문등은 지원하지 않는다. ex) {{replaced}}
	@see jindo.$Template.addEngine
	@history 2.4.0 Update 기존 컴파일 엔진 외에 John Resig의 Micro-Templating 엔진, handlebars 엔진, simple 엔진을 지원한다. 템플릿 문자열을 파싱한 함수를 내부적으로 캐시하므로 성능이 향상되었다.
	@example
		// If a parameter is a string,
		var tpl = $Template("{=service} : {=url}");
	@example
		<textarea id="tpl1">
			{=service} : {=url}
		</textarea>
		
		// the same TEXTAREA element is used as a template.
		var template1 = $Template("tpl1");		// If a parameter is the id of the HTML element
		var template2 = $Template($("tpl1"));	// If a parameter is a TEXTAREA element
	@example
		<script type="text/template" id="tpl2">
			{=service} : {=url}
		</script>
		
		// the same SCRIPT element is used as a template.
		var template1 = $Template("tpl2");		// If a parameter is the id of the HTML element
		var template2 = $Template($("tpl2"));	// If a parameter is a SCRIPT element
	@example
		<script type="text/template" id="tpl3">
			<%=service%> : <%=url%>
		</script>
		
		// Micro-Templating 엔진을 사용하는 인스턴스로 생성.
		var template = $Template("tpl3", "micro");
	@example
		<script type="text/template" id="tpl4">
			{{service}} : {{url}}
		</script>
		
		// handlebars 엔진을 사용하는 인스턴스로 생성.
		var template = $Template("tpl4", "handlebars");
	@example
		<script type="text/template" id="tpl5">
			{{service}} : {{url}}
		</script>
		
		// simple 엔진을 사용하는 인스턴스로 생성.
		var template = $Template("tpl5", "simple");
	@example
		<script type="text/template" id="tpl6">
			{=service} : {=url}
		</script>
		
		// 사용자 정의 커스텀 엔진을 사용하는 인스턴스로 생성.
		jindo.$Template.addEngine("custom", function(sTemplate){
			return function(htData){
				return sTemplate.replace(/{=([^{}]*)}/g, function(a,b){
					return (typeof htData[b] == "undefined") ? "" : htData[b];
				});
			}
		});
		var template = $Template("tpl6", "custom");
  ]]></comment>
  <comment id="addEngine"><![CDATA[
	템플릿 문자열을 해석할 컴파일 엔진을 등록한다.
	
	@method addEngine
	@static
	@param {String+} sEngineName 등록하려는 컴파일 엔진의 이름 문자열
	@param {Function+} fnEngine 컴파일러 함수를 반환하는 함수
	@example
		// 사용자 정의 커스텀 엔진 등록
		jindo.$Template.addEngine("custom", function(sTemplate){
			return function(htData){
				return sTemplate.replace(/{=([^{}]*)}/g, function(a,b){
					return (typeof htData[b] == "undefined") ? "" : htData[b];
				});
			}
		});
  ]]></comment>
  <comment id="getEngine"><![CDATA[
	$Template.addEngine 에서 등록한 컴파일 엔진을 반환한다.
	
	@method getEngine
	@static
	@param {String+} sEngineName 반환받고자하는 컴파일 엔진의 이름 문자열
	@return {Function} 등록된 컴파일 엔진
	@example
		// 등록한 사용자 정의 커스텀 엔진을 반환받음
		var fComplier = jindo.$Template.getEngine("custom");
  ]]></comment>
  <comment id="process"><![CDATA[
	The process() method interprets a template and create a new string by applying data.
	
	@method process
	@param {Hash+} [oDdata] An object that has data to be applied to a template. Part that data is applied to can be found by the name of object attribute.
	@return {String} A string that interprets and applies data
	@remark Processes string replacement if no syntax exists in the template. If syntax is used in a template when the template is interpreted, template interpretation varies depending on the syntax. See the table below to get syntax interpretation.<br>
		<h5>Template syntax</h5>
		<table class="tbl_board">
			<caption class="hide">Template syntax</caption>
			<thead>
				<tr>
					<th scope="col" style="width:30%">Category</th>
					<th scope="col">Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">{=variable}</td>
					<td class="txt">Displays the attribute value that has the same name as the variable in the data object which is specified as a parameter.</td>
				</tr>
				<tr>
					<td class="txt bold">{if condition}<br>{elseif condition}<br>{else}<br>{/if}</td>
					<td class="txt">Selects a template's content to be displayed based on conditions.</td>
				</tr>
				<tr>
					<td class="txt bold">{for [index:]variable in array}<br>{/for}</td>
					<td class="txt">Displays a template's content in the for statement repeatedly.</td>
				</tr>
				<tr>
					<td class="txt bold">{set variable = value}</td>
					<td class="txt">Allocates a value to the temporary variable to be used in a template.</td>
				</tr>
				<tr>
					<td class="txt bold">{gset variable = value}</td>
					<td class="txt">It can be used in {js} by allocating it for local variables unlike set(available in version 2.0.0 and higher).</td>
				</tr>
				<tr>
					<td class="txt bold">{js function}</td>
					<td class="txt">Calls a specific function in a template.</td>
				</tr>
			</tbody>
		</table>
	@example
		// Replaces a string.
		// Replaces a value of {=value}.
		var tpl  = $Template("Value1 : {=val1}, Value2 : {=val2}");
		var data = { val1: "first value", val2: "second value" };
		
		document.write( tpl.process(data) );
		
		// Result
		// Value1 : first value, Value2 : second value
	@example
		// if/elseif/else: Conditional statement
		// Processes conditional statements when interpreting a template.
		var tpl= $Template("{if num >= 7} equal to or greater than 7.{elseif num <= 5} equal to or less than 5.{else} else 6?{/if}");
		var data = { num: 5 };
		
		document.write( tpl.process(data) );
		
		// Result
		// equal to or less than 5
	@example
		// set: Uses a temporary variable.
		// If it is set to val=1, {=val} is replaced with 1.
		var tpl  = $Template("{set val3=val1}Value1 : {=val1}, Value2 : {=val2}, Value3 : {=val3}");
		var data = { val1: "first value", val2: "second value" };
		
		document.write( tpl.process(data) );
		
		// Result
		// Value1 : first value, Value2 : second value, Value3 : first value
	@example
		// gset : Assigns as a local variable.
		// gset If it is set to val=1, it is possible to access by using {js}.
		var tpl  = $Template("{gset length=(=books).length}{for num:book in books}{js length}.{=book}\n{/for}");
		var data = {"books":[1,2,3]};
		
		document.write( tpl.process(data) );
		
		// Result
		// 3.1
		// 3.2
		// 3.3
	@example
		// js: Uses JavaScript.
		// Executes JavaScript when interpreting a template.
		var tpl  = $Template("Value1 : {js $S(=val1).bytes()}, Value2 : {=val2}")
		var data = { val1: "first value", val2: "second value" };
		
		document.write( tpl.process(data) );
		
		// Result
		// Value1: 11, Value2: second value
	@example
		// for in: loop statement (in the event of not using indexes)
		var tpl  = $Template("<h1>Portal Site</h1>\n<ul>{for site in portals}\n<li><a href='{=site.url}'>{=site.name}</a></li>{/for}\n</ul>");
		var data = { portals: [
			{ name: "Naver", url : "http://www.naver.com" },
			{ name: "Daum",  url : "http://www.daum.net" },
			{ name: "Yahoo",  url : "http://www.yahoo.co.kr" }
		]};
		
		document.write( tpl.process(data) );
		
		// Result
		//<h1>Portal Site</h1>
		//<ul>
		//<li><a href='http://www.naver.com'>Naver</a></li>
		//<li><a href='http://www.daum.net'>Daum</a></li>
		//<li><a href='http://www.yahoo.co.kr'>Yahoo</a></li>
		//</ul>
	@example
		// for: loop statement (in the event of using indexes)
		var tpl  = $Template("{for num:word in numbers}{=word}({=num}){/for}");
		var data = { numbers: ["zero", "one", "two", "three"] };
		
		document.write( tpl.process(data) );
		
		// Result
		// zero(0) one(1) two(2) three(3)
	@example
		// Micro-Templating 엔진을 사용하여 for 반복문을 사용하는 예제
		var str = '<h1>포탈 사이트</h1><ul><% for ( var i = 0; i < portals.length; i++ ) { %><li><a href="<%=portals[i].url%>"><%=portals[i].name%></a></li><% } %></ul>';
		var tpl = $Template(str, "micro");
		var data = { portals: [
			{ name: "네이버", url : "http://www.naver.com" },
			{ name: "다음",  url : "http://www.daum.net" },
			{ name: "야후",  url : "http://www.yahoo.co.kr" }
		]};
		
		document.write(tpl.process(data));
		
		// 결과
		//<h1>포탈 사이트</h1>
		//<ul>
		//<li><a href='http://www.naver.com'>네이버</a></li>
		//<li><a href='http://www.daum.net'>다음</a></li>
		//<li><a href='http://www.yahoo.co.kr'>야후</a></li>
		//</ul>
	@example
		// handlebars 엔진을 사용하여 for 반복문을 사용하는 예제
		var str = '<h1>포탈 사이트</h1><ul>{{#each portals}}<li><a href="{{url}}">{{name}}</a></li>{{/each}}</ul>';
		var tpl = $Template(str, "handlebars");
		var data = { portals: [
			{ name: "네이버", url : "http://www.naver.com" },
			{ name: "다음",  url : "http://www.daum.net" },
			{ name: "야후",  url : "http://www.yahoo.co.kr" }
		]};
		
		document.write(tpl.process(data));
		
		// 결과
		//<h1>포탈 사이트</h1>
		//<ul>
		//<li><a href='http://www.naver.com'>네이버</a></li>
		//<li><a href='http://www.daum.net'>다음</a></li>
		//<li><a href='http://www.yahoo.co.kr'>야후</a></li>
		//</ul>
	@example
		// simple 엔진을 사용하는 예제
		var str = '<h1>포탈 사이트</h1><ul><li><a href="{{url0}}">{{name0}}</a></li><li><a href="{{url1}}">{{name1}}</a></li><li><a href="{{url2}}">{{name2}}</a></li></ul>';
		var tpl = $Template(str, "simple");
		var data = {
			url0 : "http://www.naver.com",
			url1 : "http://www.daum.net",
			url2 : "http://www.yahoo.co.kr",
			name0 : "네이버",
			name1 : "다음",
			name2 : "야후"
		}
		
		document.write(tpl.process(data));
		
		// 결과
		//<h1>포탈 사이트</h1>
		//<ul>
		//<li><a href='http://www.naver.com'>네이버</a></li>
		//<li><a href='http://www.daum.net'>다음</a></li>
		//<li><a href='http://www.yahoo.co.kr'>야후</a></li>
		//</ul>
  ]]></comment>
</comments>