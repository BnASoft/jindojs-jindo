<comments name="json">
  <comment id="title"><![CDATA[
	@fileOverview A file to define the constructor and methods of jindo.$Json() object
	@name json.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	The jindo.$Json() object provides various functionalities to handle the JavaScript Object Notation (JSON). An object or string is specified as parameters in a creator. To create the jindo.$Json() object in XML format, use the fromXML() method.
	
	@class jindo.$Json
	@keyword json
  ]]></comment>
  <comment id="constructor"><![CDATA[
	Creates the jindo.$Json() object.
	
	@constructor
	@param {Varaint} Various types
	@return {jindo.$Json} The jindo.$Json() object that encodes arguments
	@see jindo.$Json#fromXML
	@see http://www.json.org/json-en.html json.org
	@example
		var oStr = $Json ('{ zoo: "myFirstZoo", tiger: 3, zebra: 2}');
		
		var d = {name : 'nhn', location: 'Bundang-gu'}
		var oObj = $Json (d);
  ]]></comment>
  <comment id="sign_oldMakeJSON"><![CDATA[
native json is not used because parsing performance decreases with it.    
  ]]></comment>
  <comment id="fromXML"><![CDATA[
	The fromXML() method encodes a XML-formatted string into a jindo.$Json() object. If the XML elements contain attributes in the XML-formatted string, the content corresponding to element information is represented as subelements. At this time, if the elements contain the CDATA values, values are stored as the $cdata attribute.
	
	@static
	@method fromXML
	@param {String+} sXML The XML-formatted string
	@return {jindo.$Json} The jindo.$Json() object
	@throws {jindo.$Except.PARSE_ERROR} The exception occurs when an error occurs while parsing the json object
	@example
		var j1 = $Json.fromXML('<data>only string</data>');
		
		// Result :
		// {"data":"only string"}
		
		var j2 = $Json.fromXML('<data><id>Faqh%$</id><str attr="123">string value</str></data>');
		
		// Result :
		// {"data":{"id":"Faqh%$","str":{"attr":"123","$cdata":"string value"}}}
  ]]></comment>
  <comment id="fromXML_1"><![CDATA[
$0: All
$1: Tag Name
$2: Attribute string
$3: Close tag
$4: CDATA body value
$5: Other body values 
  ]]></comment>
  <comment id="get"><![CDATA[
	The get() method returns the jindo.$Json() object's value corresponding to a specific path.
	
	@method get
	@param {String+} sPath A string to specify a path
	@return {Array} An array that has a value corresponding to a specified path as its element
	@throws {jindo.$Except.PARSE_ERROR} The exception occurs when an error occurs while parsing the json object
	@example
		var j = $Json.fromXML('<data><id>Faqh%$</id><str attr="123">string value</str></data>');
		var r = j.get ("/data/id");
		
		// Result :
		// [Faqh%$]
  ]]></comment>
  <comment id="toString"><![CDATA[
	The toString() method returns the jindo.$Json() object as a JSON string.
	
	@method toString
	@return {String} A JSON string
	@see jindo.$Json#toObject
	@see jindo.$Json#toXML
	@see http://www.json.org/json-en.html json.org
	@example
		var j = $Json({foo:1, bar: 31});
		document.write (j.toString());
		document.write (j);
		
		// Result :
		// {"bar":31,"foo":1}{"bar":31,"foo":1}
  ]]></comment>
  <comment id="toXML"><![CDATA[
	The toXML method returns the jindo.$Json() object in an XML format string.
	
	@method toXML
	@return {String} An XML format string
	@throws {jindo.$Except.PARSE_ERROR} The exception occurs when an error occurs while parsing the json object
	@see jindo.$Json#toObject
	@see jindo.$Json#toString
	@example
		var json = $Json({foo:1, bar: 31});
		json.toXML();
		
		// Result :
		// <foo>1</foo><bar>31</bar>
  ]]></comment>
  <comment id="toObject"><![CDATA[
	The toObject() method returns the jindo.$Json() object as the original data object.
	
	@method toObject
	@return {Object} The original data object
	@throws {jindo.$Except.PARSE_ERROR} The exception occurs when an error occurs while parsing the json object
	@see jindo.$Json#toObject
	@see jindo.$Json#toString
	@see jindo.$Json#toXML
	@example
		var json = $Json({foo:1, bar: 31});
		json.toObject();
		
		// Result :
		// {foo: 1, bar: 31}
  ]]></comment>
  <comment id="compare"><![CDATA[
	The compare() method compares values in two Json objects against each other.
	
	@method compare
	@param {Varaint} oData Json formatted object to be compared
	@return {Boolean} Result. Returns true if two values are equal; otherwise, returns false.
	@throws {jindo.$Except.PARSE_ERROR} The exception occurs when an error occurs while parsing the json object
	@since  1.4.4
	@example
		$Json({foo:1, bar: 31}).compare({foo:1, bar: 31});
		
		// Result :
		// true
		
		$Json({foo:1, bar: 31}).compare({foo:1, bar: 1});
		
		// Result :
		// false
  ]]></comment>
  <comment id="sign_value"><![CDATA[
	The $value() method returns the original data object as the toObject() method does.
	
	@method $value
	@return {Object} The original data object
	@see jindo.$Json#toObject
  ]]></comment>
</comments>
