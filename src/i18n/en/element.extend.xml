<comments name="element.extend">
  <comment id="title"><![CDATA[
	@fileOverview A file to define the extended method of the jindo.$Element() object
	@name element.extend.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="sign_getTransition"><![CDATA[
	Checks the availability of the current transition. The function can be used in "appear" and "disappear."
	
	@method _getTransition
	@ignore
  ]]></comment>
  <comment id="sign_getTransition_1"><![CDATA[
Firefox does not support the transitionEnd APIs.
  ]]></comment>
  <comment id="appear"><![CDATA[
	The appear() method makes HTML elements slowly appear (fade-in effect).
	
	@method appear
	@param {Numeric} [nDuration] The time it takes for HTML elements to appear completely in seconds.
	@param {Function} [fCallback] The callback function to be executed after the HTML element have completely appeared
	@return {this} Fade-in 효과를 적용한 인스턴스 자신
	@remark
		<ul class="disc">
			<li>As filter is used in Internet Explorer 6, the elements disappear if they have the position attribute. In this case, the HTML element must have no position attribute.</li>
			<li>For Webkit-based browsers (Safari version 5 or higher, Mobile Safari, Chrome, Mobile Webkit) and Opera version 10.60 and higher, the CSS3 transition attribute is used. Use java scripts in all other browsers.</li>
		</ul>
	@see http://www.w3.org/TR/css3-transitions/ CSS Transitions - W3C
	@see jindo.$Element#show
	@see jindo.$Element#disappear
	@example
		$Element("sample1").appear(5, function(){
			$Element("sample2").appear(3);
		});
		
		//Before
		<div style="display: none; background-color: rgb(51, 51, 153); width: 100px; height: 50px;" id="sample1">
			<div style="display: none; background-color: rgb(165, 10, 81); width: 50px; height: 20px;" id="sample2">
			</div>
		</div>
		
		//After(1): sample1 element appears.
		<div style="display: block; background-color: rgb(51, 51, 153); width: 100px; height: 50px; opacity: 1;" id="sample1">
			<div style="display: none; background-color: rgb(165, 10, 81); width: 50px; height: 20px;" id="sample2">
			</div>
		</div>
		
		//After(2): sample2 element appears.
		<div style="display: block; background-color: rgb(51, 51, 153); width: 100px; height: 50px; opacity: 1;" id="sample1">
			<div style="display: block; background-color: rgb(165, 10, 81); width: 50px; height: 20px; opacity: 1;" id="sample2">
			</div>
		</div>
  ]]></comment>
  <comment id="disappear"><![CDATA[
	The disappear() method makes HTML elements slowly disappear (fade-out effect).
	
	@method disappear
	@param {Numeric} [nDuration] The time it takes for HTML elements to disappear completely in seconds.
	@param {Function} [fCallback] The callback function to be executed after the HTML element have completely disappeared.
	@return {this} Fade-out 효과를 적용한 인스턴스 자신
	@remark
		<ul class="disc">
			<li>If the HTML element has completely disappeared, the attribute of the element changes to "none."</li>
			<li>For Webkit-based browsers (Safari version 5 or higher, Mobile Safari, Chrome, Mobile Webkit) and Opera version 10.6 and higher, the CSS3 transition attribute is used. Use java scripts in all other browsers.</li>
		</ul>
	@see http://www.w3.org/TR/css3-transitions/ CSS Transitions - W3C
	@see jindo.$Element#hide
	@see jindo.$Element#appear
	@example
		$Element("sample1").disappear(5, function(){
			$Element("sample2").disappear(3);
		});
		
		//Before
		<div id="sample1" style="background-color: rgb(51, 51, 153); width: 100px; height: 50px;">
		</div>
		<div id="sample2" style="background-color: rgb(165, 10, 81); width: 100px; height: 50px;">
		</div>
		
		//After(1): sample1 element disappear.
		<div id="sample1" style="background-color: rgb(51, 51, 153); width: 100px; height: 50px; opacity: 1; display: none;">
		</div>
		<div id="sample2" style="background-color: rgb(165, 10, 81); width: 100px; height: 50px;">
		</div>
		
		//After(2): sample2 element disappears.
		<div id="sample1" style="background-color: rgb(51, 51, 153); width: 100px; height: 50px; opacity: 1; display: none;">
		</div>
		<div id="sample2" style="background-color: rgb(165, 10, 81); width: 100px; height: 50px; opacity: 1; display: none;">
		</div>
  ]]></comment>
  <comment id="disappear_1"><![CDATA[
Handled as below due to an Opera bug.
  ]]></comment>
  <comment id="offset"><![CDATA[
	The offset() method retrieves the position of HTML elements.
	
	@method offset
	@return {Object} Returns the position value of the HTML element as an object.
		@return {Number} .top 문서의 맨 위에서 HTML 요소의 윗 부분까지의 거리
		@return {Number} .left 문서의 왼쪽 가장자리에서 HTML 요소의 왼쪽 가장자리까지의 거리
	@remark
		<ul class="disc">
			<li>The offset used to determine the position is the corner of the left upper side of the page of the browser.</li>
			<li>It must be applied while the HTML elements are displayed. If elements are not displayed on the screen, the operation may not be normal.</li>
			<li>For some browsers in some situations, the position of the inline element cannot be correctly implemented. In this case, change the position attribute of the element to a relative value.</li>
		</ul>
	@example
		<style type="text/css">
			div { background-color:#2B81AF; width:20px; height:20px; float:left; left:100px; top:50px; position:absolute;}
		</style>
		
		<div id="sample"></div>
		
		// Searches the value of a position.
		$Element("sample").offset(); // { left=100, top=50 }
  ]]></comment>
  <comment id="offset2"><![CDATA[
	The offset() method sets the position of HTML elements.
	
	@method offset
	@param {Numeric} nTop The distance from the top of a document to the top of the HTML element in pixels.
	@param {Numeric} nLeft The distance from the left edge of a document to the left edge of HTML elements in pixels.
	@return {this} 위치 값을 반영한 인스턴스 자신
	@remark
		<ul class="disc">
			<li>The offset used to determine the position is the corner of the left upper side of the page of the browser.</li>
			<li>It must be applied while the HTML elements are displayed. If elements are not displayed on the screen, the operation may not be normal.</li>
			<li>For some browsers in some situations, the position of the inline element cannot be correctly implemented. In this case, change the position attribute of the element to a relative value.</li>
		</ul>
	@example
		<style type="text/css">
			div { background-color:#2B81AF; width:20px; height:20px; float:left; left:100px; top:50px; position:absolute;}
		</style>
		
		<div id="sample"></div>
		
		// Configures the value of a position.
		$Element("sample").offset(40, 30);
		
		//Before
		<div id="sample"></div>
		
		//After
		<div id="sample" style="top: 40px; left: 30px;"></div>
  ]]></comment>
  <comment id="evalScripts"><![CDATA[
	The evalScripts() method executes the JavaScript code included in the character string.<br>
	If the character string that contains the &lt;script&gt; tag is specified as a parameter, the content in the &lt;script&gt; is parsed and the eval() method is executed.
	
	@method evalScripts
	@param {String+} sHTML The HTML character string that contains the &lt;script&gt; element
	@return {this} 인스턴스 자신
	@example
		// Specifies a string that contains script tags.
		var response = "<script type='text/javascript'>$Element('sample').appendHTML('<li>4</li>')</script>";
		
		$Element("sample").evalScripts(response);
		
		//Before
		<ul id="sample">
			<li>1</li>
			<li>2</li>
			<li>3</li>
		</ul>
		
		//After
		<ul id="sample">
			<li>1</li>
			<li>2</li>
			<li>3</li>
		<li>4</li></ul>
  ]]></comment>
  <comment id="clone"><![CDATA[
  	Returns a duplicate of the node on which this method was called. same cloneNode method.
  	@method clone
  	@since 2.8.0
	@param {Boolean} [bDeep=true] true if the children of the node should also be cloned, or false to clone only the specified node.
	@return {jindo.$Element} cloned $Element
	@example

		<div id="sample">
		    <div>Hello</div>
		</div>
		
		//children node cloned
		$Element("sample").clone(); 
		-> 
		$Element(
			<div id="sample">
	    		<div>Hello</div>
			</div>
		);
		
		//specified node cloned
		$Element("sample").clone(false); 
		-> 
		$Element(
			<div id="sample">
			</div>
		);
  ]]></comment>
  <comment id="sign_append"><![CDATA[
	A function to append an element at the end

	@method _append
	@param {Element} elBase A base element
	@param {Element} elAppend The element to be appended
	@return {jindo.$Element} The element of a second parameter
	@ignore
  ]]></comment>
  <comment id="sign_prepend"><![CDATA[
	A function to prepend an element at the front
	
	@method _prepend
	@param {Element} elBase A base element
	@param {Element} elAppend The element to be prepended
	@return {jindo.$Element} The element of a second parameter
	@ignore
  ]]></comment>
  <comment id="append"><![CDATA[
	The append() method assigns the HTML element, specified as a parameter, as the last child node of the element included in the jindo.$Element() object.
	
	@method append
	@syntax sId
	@syntax vElement
	@param {String+} sId The ID of the HTML element to be assigned as the last child node
	@param {Element+ | Node} vElement The HTML element to be assigned as the last child node or the jindo.$Element() object can be specified as a parameter.
	@return {this} 인스턴스 자신
	@see jindo.$Element#prepend
	@see jindo.$Element#before
	@see jindo.$Element#after
	@see jindo.$Element#appendTo
	@see jindo.$Element#prependTo
	@see jindo.$Element#wrap
	@example
		// Adds the HTML Element that has an id with sample2
		// to the HTML Element that has an id with sample1.
		$Element("sample1").append("sample2");
		
		//Before
		<div id="sample2">
		    <div>Hello 2</div>
		</div>
		<div id="sample1">
		    <div>Hello 1</div>
		</div>
		
		//After
		<div id="sample1">
			<div>Hello 1</div>
			<div id="sample2">
				<div>Hello 2</div>
			</div>
		</div>
	@example
		// Adds a new DIV element
		// to the HTML Element that has an id with sample.
		var elChild = $("<div>Hello New</div>");
		$Element("sample").append(elChild);
		
		//Before
		<div id="sample">
			<div>Hello</div>
		</div>
		
		//After
		<div id="sample">
			<div>Hello </div>
			<div>Hello New</div>
		</div>
  ]]></comment>
  <comment id="prepend"><![CDATA[
	The prepend() method assigns the HTML element, specified as a parameter, as the first child node of the element included in the jindo.$Element() object.
	
	@method prepend
	@syntax sId
	@syntax vElement
	@param {String+} sId The ID of the HTML element to be assigned as the first child node
	@param {Element+ | Node} vElement The HTML element to be assigned as the first child node or the jindo.$Element() object can be specified as a parameter.
	@return {this} 인스턴스 자신
	@see jindo.$Element#append
	@see jindo.$Element#before
	@see jindo.$Element#after
	@see jindo.$Element#appendTo
	@see jindo.$Element#prependTo
	@see jindo.$Element#wrap
	@example
		// In the HTML Element that has an id with sample1,
		// moves the HTML Element that has an id with sample2 to the first child node.
		$Element("sample1").prepend("sample2");
		
		//Before
		<div id="sample1">
		    <div>Hello 1</div>
			<div id="sample2">
			    <div>Hello 2</div>
			</div>
		</div>
		
		//After
		<div id="sample1">
			<div id="sample2">
			    <div>Hello 2</div>
			</div>
		    <div>Hello 1</div>
		</div>
	@example
		// Adds a new DIV element
		// to the HTML Element that has an id with sample.
		var elChild = $("<div>Hello New</div>");
		$Element("sample").prepend(elChild);
		
		//Before
		<div id="sample">
			<div>Hello</div>
		</div>
		
		//After
		<div id="sample">
			<div>Hello New</div>
			<div>Hello</div>
		</div>
  ]]></comment>
  <comment id="replace"><![CDATA[
	The replace() method replaces the HTML element in the jindo.$Element() object with the element of the specified parameter.
	
	@method replace
	@syntax sId
	@syntax vElement
	@param {String+} sId The ID of the HTML element to be replaced
	@param {Element+ | Node} vElement The HTML element to be replaced or the jindo.$Element() object can be specified as a parameter.
	@return {this} 인스턴스 자신
	@example
		// Replaces it with HTML elements that have an id with sample2
		// with the HTML element that has an id with sample1.
		$Element('sample1').replace('sample2');
		
		//Before
		<div>
			<div id="sample1">Sample1</div>
		</div>
		<div id="sample2">Sample2</div>
		
		//After
		<div>
			<div id="sample2">Sample2</div>
		</div>
	@example
		// Replaces with a new DIV element.
		$Element("btn").replace($("<div>Sample</div>"));
		
		//Before
		<button id="btn">Sample</button>
		
		//After
		<div>Sample</div>
  ]]></comment>
  <comment id="appendTo"><![CDATA[
	The appendTo() method assigns the element included in the jindo.$Element() object as the last child element of the element specified as a parameter.
	
	@method appendTo
	@syntax sId
	@syntax vElement
	@param {String+} sId The ID of the HTML element to which the last child node is to be assigned
	@param {Element+ | Node} vElement The HTML element to be assigned as the last child node or the jindo.$Element() object can be specified as a parameter.
	@return {this} 인스턴스 자신
	@see jindo.$Element#append
	@see jindo.$Element#prepend
	@see jindo.$Element#before
	@see jindo.$Element#after
	@see jindo.$Element#prependTo
	@see jindo.$Element#wrap
	@example
		// Adds the HTML element that has an id with sample1
		// to the HTML element that has an id with sample2.
		$Element("sample1").appendTo("sample2");
		
		//Before
		<div id="sample1">
		    <div>Hello 1</div>
		</div>
		<div id="sample2">
		    <div>Hello 2</div>
		</div>
		
		//After
		<div id="sample2">
		    <div>Hello 2</div>
			<div id="sample1">
			    <div>Hello 1</div>
			</div>
		</div>
  ]]></comment>
  <comment id="prependTo"><![CDATA[
	The prependTo() method assigns the element included in the jindo.$Element() object as the first child node of the element specified as a parameter.
	
	@method prependTo
	@syntax sId
	@syntax vElement
	@param {String+} sId The ID of the HTML element to which the first child node is to be assigned
	@param {Element+ | Node} vElement The HTML element where the first child node will be assigned or the jindo.$Element() object can be specified as a parameter.
	@return {this} 인스턴스 자신
	@see jindo.$Element#append
	@see jindo.$Element#prepend
	@see jindo.$Element#before
	@see jindo.$Element#after
	@see jindo.$Element#appendTo
	@see jindo.$Element#wrap
	@example
		// Adds the HTML element that has an id with sample1
		// to the HTML element that has an id with sample2.
		$Element("sample1").prependTo("sample2");
		
		//Before
		<div id="sample1">
		    <div>Hello 1</div>
		</div>
		<div id="sample2">
		    <div>Hello 2</div>
		</div>
		
		//After
		<div id="sample2">
			<div id="sample1">
			    <div>Hello 1</div>
			</div>
		    <div>Hello 2</div>
		</div>
  ]]></comment>
  <comment id="before"><![CDATA[
	The before() method assigns the element, specified as a parameter, as the previous sibling node (previousSibling) of the element included in the jindo.$Element() object.
	
	@method before
	@syntax sId
	@syntax vElement
	@param {String+} sId The ID of the HTML element to be assigned as the previous sibling node
	@param {Element+ | Node} vElement The HTML element to be assigned as the previous sibling node or the jindo.$Element() object can be specified as a parameter.
	@return {this} 인스턴스 자신
	@see jindo.$Element#append
	@see jindo.$Element#prepend
	@see jindo.$Element#after
	@see jindo.$Element#appendTo
	@see jindo.$Element#prependTo
	@see jindo.$Element#wrap
	@example
		// Adds the HTML element that has an id with sample1
		// right before the HTML element that has an id with sample2.
		$Element("sample1").before("sample2"); // Returns the $Element that wraps sample2.
		
		//Before
		<div id="sample1">
		    <div>Hello 1</div>
			<div id="sample2">
			    <div>Hello 2</div>
			</div>
		</div>
		
		//After
		<div id="sample2">
			<div>Hello 2</div>
		</div>
		<div id="sample1">
		  <div>Hello 1</div>
		</div>
	@example
		// Adds a new DIV element.
		var elNew = $("<div>Hello New</div>");
		$Element("sample").before(elNew); // Returns $Element that wraps the elNew element.
		
		//Before
		<div id="sample">
			<div>Hello</div>
		</div>
		
		//After
		<div>Hello New</div>
		<div id="sample">
			<div>Hello</div>
		</div>
  ]]></comment>
  <comment id="after"><![CDATA[
	The after() method assigns the element, specified as a parameter, as the next sibling node (nextSibling) of the element included in the jindo.$Element() object.
	
	@method after
	@syntax sId
	@syntax vElement
	@param {String+} sId The ID of the HTML element to be assigned as the next sibling node
	@param {Element+ | Node} vElement The HTML element to be assigned as the next sibling node or the jindo.$Element() object can be specified as a parameter.
	@return {this} 인스턴스 자신
	@see jindo.$Element#append
	@see jindo.$Element#prepend
	@see jindo.$Element#before
	@see jindo.$Element#appendTo
	@see jindo.$Element#prependTo
	@see jindo.$Element#wrap
	@example
		// Adds the HTML element that has an id with sample2
		// right after the HTML element that has an id with sample1.
		$Element("sample1").after("sample2");  // Returns $Element that wraps sample2.
		
		//Before
		<div id="sample1">
		    <div>Hello 1</div>
			<div id="sample2">
			    <div>Hello 2</div>
			</div>
		</div>
		
		//After
		<div id="sample1">
			<div>Hello 1</div>
		</div>
		<div id="sample2">
			<div>Hello 2</div>
		</div>
	@example
		// Adds a new DIV element.
		var elNew = $("<div>Hello New</div>");
		$Element("sample").after(elNew); // Adds $Element that wraps the elNew element.
		
		//Before
		<div id="sample">
			<div>Hello</div>
		</div>
		
		//After
		<div id="sample">
			<div>Hello</div>
		</div>
		<div>Hello New</div>
  ]]></comment>
  <comment id="parent"><![CDATA[
	The parent() method searches for the element corresponding to the parent node of HTML elements.
	
	@method parent
	@param {Function+} [fCallback] The callback function that specifies the conditions to search for the parent element. If the parameter is omitted, returns the parent element; if the callback function is specified as a parameter, returns the parent element that returns true. At this time, the callback function returns the result as an array. The jindo.$Element() object of the parent element being searched is entered as the parameter of the callback function.
	@param {Numeric} [nLimit] The level of the parent element to search for. If the parameter is omitted, searches for all parent elements; if the parameter is set to null, searches for the parent element with the limited level without any condition.
	@return {Variant} The array of the parent element that satisfies the condition or the jindo.$Element() object that includes the parent element. If the parent element is returned omitting the parameter, returns the jindo.$Element() object; otherwise, returns the array that has jindo.$Element() object as an element.
	@see jindo.$Element#child
	@see jindo.$Element#prev
	@see jindo.$Element#next
	@see jindo.$Element#first
	@see jindo.$Element#last
	@see jindo.$Element#indexOf
	@example
		<div class="sample" id="div1">
			<div id="div2">
				<div class="sample" id="div3">
					<div id="target">
						Sample
						<div id="div4">
							Sample
						</div>
						<div class="sample" id="div5">
							Sample
						</div>
					</div>
					<div class="sample" id="div6">
						Sample
					</div>
				</div>
			</div>
		</div>
		
		<script type="text/javascript">
			var welTarget = $Element("target");
			var parent = welTarget.parent();
			// Returns $Element wrapping the DIV whose id div3.
		
			parent = welTarget.parent(function(v){
			        return v.hasClass("sample");
			    });
			// Returns an array that consists of $Elements that have wrapped the DIV in which the id is div3
			// and the array that includes the child element.
		
			parent = welTarget.parent(function(v){
			        return v.hasClass("sample");
			    }, 1);
			// Returns an array that has the jindo.$Element() object as an element.
		</script>
  ]]></comment>
  <comment id="child"><![CDATA[
	The child() method searches for element corresponding to subnodes of HTML elements.
	
	@method child
	@param {Function+} [fCallback] The callback function that specifies the conditions to search for the child element.<br>If the parameter is omitted, returns the child element; if the callback function is specified as a parameter, returns the child element that returns true. At this time, the callback function returns the result as an array. The jindo.$Element() object of the child element being searched is entered as the parameter of the callback function.
	@param {Numeric} [nLimit] The level of the child element to search for. If the parameter is omitted, searches for all child elements; if the parameter is set to null, searches for the child element with the limited level without any condition.
	@return {Variant} An array that includes a child element or an array of the child element that satisfies the condition. If one child element is returned, the jindo.$Element() object is returned; otherwise, the array that has the jindo.$Element() object as an element is returned.
	@see jindo.$Element#parent
	@see jindo.$Element#prev
	@see jindo.$Element#next
	@see jindo.$Element#first
	@see jindo.$Element#last
	@see jindo.$Element#indexOf
	@example
		<div class="sample" id="target">
			<div id="div1">
				<div class="sample" id="div2">
					<div id="div3">
						Sample
						<div id="div4">
							Sample
						</div>
						<div class="sample" id="div5">
							Sample
							<div class="sample" id="div6">
								Sample
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="sample" id="div7">
				Sample
			</div>
		</div>
		
		<script type="text/javascript">
			var welTarget = $Element("target");
			var child = welTarget.child();
			// Returns the $Element that has wrapped the DIV in which the id is div1
			// and Returns an array that consists of $Elements that have wrapped the DIV in which the id is div7.
		
			child = welTarget.child(function(v){
			        return v.hasClass("sample");
			    });
			// Returns the $Element that has wrapped the DIV in which the id is div2,
			// the $Element that has wrapped the DIV in which the id is div5,
			// the $Element that has wrapped the DIV in which the id is div6,
			// and an array that consists of $Elements that have wrapped the DIV in which the id is div7.
		
			child = welTarget.child(function(v){
			        return v.hasClass("sample");
			    }, 1);
			//  Returns an array that consists of $Elements that have wrapped the DIV in which the id is div7.
		
			child = welTarget.child(function(v){
			        return v.hasClass("sample");
			    }, 2);
			// Returns the $Element that has wrapped the DIV in which the id is div2
			// and an array that consists of $Elements that have wrapped the DIV in which the id is div7.
		</script>
  ]]></comment>
  <comment id="prev"><![CDATA[
	The prev() method searches for the element corresponding to the previous sibling node of HTML elements.
	
	@method prev
	@param {Function+} [fCallback] A callback function in which the search conditions of the previous sibling element are specified. If the callback function is specified as a parameter, returns the previous sibling element which returns true as the result of executing the callback. At this time, the callback function returns the result as an array. The jindo.$Element() object of the previous sibling element being searched is entered as the parameter of the callback function.
	@return {Variant} 조건을 만족하는 이전 형제 요소(jindo.$Element() object)를 원소로 갖는 배열(Array).<br>fCallback이 null인 경우 모든 이전 형제 요소의 배열(Array)을 반환한다. 파라미터를 생략하면 바로 이전 형제 요소가 담긴 jindo.$Element() object. 만약 엘리먼트가 없으면 null을 반환한다.
	@see jindo.$Element#parent
	@see jindo.$Element#child
	@see jindo.$Element#next
	@see jindo.$Element#first
	@see jindo.$Element#last
	@see jindo.$Element#indexOf
	@example
		<div class="sample" id="sample_div1">
			<div id="sample_div2">
				<div class="sample" id="sample_div3">
					Sample1
				</div>
				<div id="sample_div4">
					Sample2
				</div>
				<div class="sample" id="sample_div5">
					Sample3
				</div>
				<div id="sample_div">
					Sample4
					<div id="sample_div6">
						Sample5
					</div>
				</div>
				<div id="sample_div7">
					Sample6
				</div>
				<div class="sample" id="sample_div8">
					Sample7
				</div>
			</div>
		</div>
		
		<script type="text/javascript">
			var sibling = $Element("sample_div").prev();
			// Returns the $Element that has wrapped the DIV in which the id is sample_div5
		
			sibling = $Element("sample_div").prev(function(v){
			    return $Element(v).hasClass("sample");
			});
			// Returns the $Element that has wrapped the DIV in which the id is ample_div5
			// and an array that consists of $Elements that have wrapped the DIV in which the id is ample_div3.
		</script>
  ]]></comment>
  <comment id="next"><![CDATA[
	The next() method searches for the element corresponding to the next sibling node of HTML elements.
	
	@method next
	@param {Function+} [fCallback] A callback function in which the search conditions of the next sibling element are specified. If the callback function is specified as a parameter, returns the next sibling element which returns true as the result of executing the callback. At this time, the callback function returns the result as an array. The jindo.$Element() object of the next sibling element being searched is entered as the parameter of the callback function.
	@return {Variant} 조건을 만족하는 다음 형제 요소(jindo.$Element() object)를 원소로 갖는 배열(Array).<br>fCallback이 null인 경우 모든 다음 형제 요소의 배열(Array)을 반환한다. 파라미터를 생략하면 바로 다음 형제 요소가 담긴 jindo.$Element() object. 만약 엘리먼트가 없으면 null을 반환한다.
	@see jindo.$Element#parent
	@see jindo.$Element#child
	@see jindo.$Element#prev
	@see jindo.$Element#first
	@see jindo.$Element#last
	@see jindo.$Element#indexOf
	@example
		<div class="sample" id="sample_div1">
			<div id="sample_div2">
				<div class="sample" id="sample_div3">
					Sample1
				</div>
				<div id="sample_div4">
					Sample2
				</div>
				<div class="sample" id="sample_div5">
					Sample3
				</div>
				<div id="sample_div">
					Sample4
					<div id="sample_div6">
						Sample5
					</div>
				</div>
				<div id="sample_div7">
					Sample6
				</div>
				<div class="sample" id="sample_div8">
					Sample7
				</div>
			</div>
		</div>
		
		<script type="text/javascript">
			var sibling = $Element("sample_div").next();
			// Returns $Element wrapping DIV whose id is sample_div7.
		
			sibling = $Element("sample_div").next(function(v){
			    return $Element(v).hasClass("sample");
			});
			// Returns an array that has $Element wrapping DIV whose id is sample_div8.
		</script>
  ]]></comment>
  <comment id="first"><![CDATA[
	The first() method returns the first child node of the HTML element.
	
	@method first
	@return {jindo.$Element} The element corresponding to the first child node. Returns null if no element exists.
	@since 1.2.0
	@see jindo.$Element#parent
	@see jindo.$Element#child
	@see jindo.$Element#prev
	@see jindo.$Element#next
	@see jindo.$Element#last
	@see jindo.$Element#indexOf
	@example
		<div id="sample_div1">
			<div id="sample_div2">
				<div id="sample_div">
					Sample1
					<div id="sample_div3">
						<div id="sample_div4">
							Sample2
						</div>
						Sample3
					</div>
					<div id="sample_div5">
						Sample4
						<div id="sample_div6">
							Sample5
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<script type="text/javascript">
			var firstChild = $Element("sample_div").first();
			// Returns $Element wrapping DIV whose id is sample_div3.
		</script>
  ]]></comment>
  <comment id="last"><![CDATA[
	The last() method returns the first last node of the HTML element.
	
	@method last
	@return {jindo.$Element} The element corresponding to the last child node. Returns null if no element exists.
	@since 1.2.0
	@see jindo.$Element#parent
	@see jindo.$Element#child
	@see jindo.$Element#prev
	@see jindo.$Element#next
	@see jindo.$Element#first
	@see jindo.$Element#indexOf
	@example
		<div id="sample_div1">
			<div id="sample_div2">
				<div id="sample_div">
					Sample1
					<div id="sample_div3">
						<div id="sample_div4">
							Sample2
						</div>
						Sample3
					</div>
					<div id="sample_div5">
						Sample4
						<div id="sample_div6">
							Sample5
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<script type="text/javascript">
			var lastChild = $Element("sample_div").last();
			// Returns $Element wrapping DIV whose id is sample_div5.
		</script>
  ]]></comment>
  <comment id="sign_contain"><![CDATA[
	The reference API for ChildOf and isParentOf (For IE, use "contains," and for other browsers, use "compareDocumentPosition." If both are unavailable, use the legacy API.).
	
	@method _contain
	@param {HTMLElement} eParent	Parent node
	@param {HTMLElement} eChild	Child node
	@ignore
  ]]></comment>
  <comment id="isChildOf"><![CDATA[
	The isChildOf() method checks whether the element specified as a parameter is the parent node of the HTML element.
	
	@method isChildOf
	@syntax sElement
	@syntax elElement
	@param {String+} sElement ID of the HTML element to check whether the element is the parent node
	@param {Element+} elElement The HTML element of which parent node will be checked
	@return {Boolean} If the specified element is the parent element, returns true; otherwise, returns false.
	@see jindo.$Element#isParentOf
	@example
		<div id="parent">
			<div id="child">
				<div id="grandchild"></div>
			</div>
		</div>
		<div id="others"></div>
		
		// Checks parent/child.
		$Element("child").isChildOf("parent");		// Result: true
		$Element("others").isChildOf("parent");		// Result: false
		$Element("grandchild").isChildOf("parent");	// Result: true
  ]]></comment>
  <comment id="isParentOf"><![CDATA[
	The isParentOf() method checks whether the element specified as a parameter is the child node of the HTML elements.
	
	@method isParentOf
	@syntax sElement
	@syntax elElement
	@param {String+} sElement ID of the HTML element to check whether the element is the child node
	@param {Element+} elElement The HTML element of which child node will be checked
	@return {Boolean} If the specified element is the child element, returns true; otherwise, returns false.
	@see jindo.$Element#isChildOf
	@example
		<div id="parent">
			<div id="child"></div>
		</div>
		<div id="others"></div>
		
		// Checks parent/child.
		$Element("parent").isParentOf("child");		// Result: true
		$Element("others").isParentOf("child");		// Result: false
		$Element("parent").isParentOf("grandchild");// Result: true
  ]]></comment>
  <comment id="isEqual"><![CDATA[
  	The isEqual() method checks whether the element specified as a parameter is the equal node of the HTML elements.
	
	@method isEqual
	@syntax sElement
	@syntax vElement
	@param {String+} sElement ID of the HTML element to be compared
	@param {Element+} vElement HTML element to be compared
	@return {Boolean} If the specified element is equal to the element, returns true; otherwise, returns false.
	@remark 
		<ul class="disc">
			<li>Among the API in the DOM Level 3 specification, it is equal to the isSameNode function. It checks the reference.</li>
			<li>Be careful to use it because it is different from the isEqualNode() method.</li>
		</ul>
	@see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isSameNode isSameNode - W3C DOM Level 3 Specification
	@see jindo.$Element#isEqualnode
	@example
		<div id="sample1"><span>Sample</span></div>
		<div id="sample2"><span>Sample</span></div>
		
		// Checks whether it is the same HTML element.
		var welSpan1 = $Element("sample1").first();	// <span>Sample</span>
		var welSpan2 = $Element("sample2").first();	// <span>Sample</span>
		
		welSpan1.isEqual(welSpan2); // Result: false
		welSpan1.isEqual(welSpan1); // Result: true
  ]]></comment>
  <comment id="fireEvent"><![CDATA[
	The fireEvent() method generates an event to the HTML element. The type of the event to be generated and the attributes of the event object can be specified as a parameter.
	
	@method fireEvent
	@param {String+} sEvent Name of the event to generate. Omit on prefix.
	@param {Hash+} [oProps] Object where the attribute of the event object is specified. Attribute of the event to be generated can be set.
	@return {jindo.$Element} The jindo.$Element() object of the HTML element of which event has been generated
	@remark 
		<ul class="disc">
			<li>In version 1.4.1 and higher, the value of keyCode is configurable.</li>
			<li>For WebKit family browsers, the value of keyCode cannot be specified when generating a key event because the keyCode of an event object is read-only.</li>
		</ul>
	@example
		// Occurs a click event.
		$Element("div").fireEvent("click", {left : true, middle : false, right : false});
		
		// Occurs a mouseover event.
		$Element("div").fireEvent("mouseover", {screenX : 50, screenY : 50, clientX : 50, clientY : 50});
		
		// Occurs a keydown event.
		$Element("div").fireEvent("keydown", {keyCode : 13, alt : true, shift : false ,meta : false, ctrl : true});
  ]]></comment>
  <comment id="empty_1"><![CDATA[
	empty() 메서드는 HTML 요소의 자식 요소와 그 자식 요소들에 등록된 모든 이벤트 핸들러까지 제거한다.
	
	@method empty
	@return {this} 자식 노드를 모두 제거한 인스턴스 자신
	@see jindo.$Element#leave
	@see jindo.$Element#remove
	@example
		// Removes all child nodes.
		$Element("sample").empty();
		
		//Before
		<div id="sample"><span>Node</span> <span>Delete All</span></div>
		
		//After
		<div id="sample"></div>
  ]]></comment>
  <comment id="remove"><![CDATA[
	remove() 메서드는 HTML 요소의 특정 자식 노드를 제거한다. 파라미터로 지정한 자식 요소를 제거하며 제거되는 자식 요소의 이벤트 핸들러와 그 자식 요소의 모든 하위 요소의 모든 이벤트 핸들러도 제거한다.
	
	@method remove
	@syntax sElement
	@syntax vElement
	@param {String+} sElement ID of the HTML element of which child element will be removed
	@param {Element+} vElement The HTML element of which child element will be removed
	@return {this} 지정한 자식 노드를 제거한 인스턴스 자신
	@see jindo.$Element#empty
	@see jindo.$Element#leave
	@example
		// Removes a specific child node.
		$Element("sample").remove("child2");
		
		//Before
		<div id="sample"><span id="child1">Node</span> <span id="child2">Delete</span></div>
		
		//After
		<div id="sample"><span id="child1">Node</span> </div>
  ]]></comment>
  <comment id="leave"><![CDATA[
	leave() 메서드는 HTML 요소를 자신의 부모 요소에서 제거한다. HTML 요소에 등록된 이벤트 핸들러, 그리고 그 요소의 모든 자식요소의 모든 이벤트 핸들러도 제거한다.
	
	@method leave
	@return {this} 부모 요소에서 제거된 인스턴스 자신
	@see jindo.$Element#empty
	@see jindo.$Element#remove
	@example
		// Removes from a parent element node.
		$Element("sample").leave();
		
		//Before
		<div>
			<div id="sample"><span>Node</span> <span>Delete All</span> </div>
		</div>
		
		//After : Returns $ElementList wripping <div id="sample"><span>Note</span> <span>Delete All</span></div>.
		<div>
		
		</div>
  ]]></comment>
  <comment id="wrap"><![CDATA[
	The wrap() method wraps the HTML element with the specified element. The HTML element will be the last child element of the specified element.
	
	@method wrap
	@syntax sElement
	@syntax vElement
	@param {String+} sElement ID of the HTML element to be a parent
	@param {Element+ | Node} vElement The HTML element to be a parent
	@return {jindo.$Element} The jindo.$Element() object wrapped with the specified element
	@example
		$Element("sample1").wrap("sample2");
		
		//Before
		<div id="sample1"><span>Sample</span></div>
		<div id="sample2"><span>Sample</span></div>
		
		//After
		<div id="sample2"><span>Sample</span><div id="sample1"><span>Sample</span></div></div>
	@example
		$Element("box").wrap($('<DIV>'));
		
		//Before
		<span id="box"></span>
		
		//After
		<div><span id="box"></span></div>
  ]]></comment>
  <comment id="ellipsis"><![CDATA[
	The ellipsis() method controls text length so that the text node of the HTML element is displayed in a single line in a browser.
	
	@method ellipsis
	@param {String+} [sTail="..."] An ellipse indicator. Appends the character string specified in the parameter to a text node, and adjusts the length of that text node.
	@return {this} 인스턴스 자신
	@remark 
		<ul class="disc">
			<li>This method operates as assuming that the HTML element includes only text node. Therefore, do not use in other cases except the above.</li>
			<li>The browser determines the length of the text node based on the width of the HTML element. Therefore, the HTML element must be displayed. The size of a text node that has been fit to the screen may shrink afterwards. To solve this problem, specify the value of the overflow attribute of the HTML element to hidden.</li>
		</ul>
	@example
		$Element("sample_span").ellipsis();
		
		//Before
		<div style="width:300px; border:1px solid #ccc; padding:10px">
			<span id="sample_span">NHN is leading the digital life by continuously introducing innovative and convenient online services, its search engines and games being the company's two main pillars.</span>
		</div>
		
		//After
		<div style="width:300px; border:1px solid #ccc; padding:10px">
			<span id="sample_span">NHN is leading the digital life by continuously introducing...</span>
		</div> 
  ]]></comment>
  <comment id="indexOf"><![CDATA[
	The indexOf() method checks the degree of the child element node, which is the parameter, in HTML elements, and returns the index.
	
	@method indexOf
	@syntax sElement
	@syntax vElement
	@param {String+} sElement ID of the element of which degree of the child element wil be checked
	@param {Element+} vElement The element of which nth child will be checked
	@return {Numeric} The index of a search result. An index starts from 0, and returns -1 if no indexes are found.
	@since 1.2.0
	@see jindo.$Element#parent
	@see jindo.$Element#child
	@see jindo.$Element#prev
	@see jindo.$Element#next
	@see jindo.$Element#first
	@see jindo.$Element#last
	@example
		<div id="sample_div1">
			<div id="sample_div">
				<div id="sample_div2">
					Sample1
				</div>
				<div id="sample_div3">
					<div id="sample_div4">
						Sample2
					</div>
					Sample3
				</div>
				<div id="sample_div5">
					Sample4
					<div id="sample_div6">
						Sample5
					</div>
				</div>
			</div>
		</div>
		
		<script type="text/javascript">
			var welSample = $Element("sample_div");
			welSample.indexOf($Element("sample_div1"));	// Result: -1
			welSample.indexOf($Element("sample_div2"));	// Result: 0
			welSample.indexOf($Element("sample_div3"));	// Result: 1
			welSample.indexOf($Element("sample_div4"));	// Result: -1
			welSample.indexOf($Element("sample_div5"));	// Result: 2
			welSample.indexOf($Element("sample_div6"));	// Result: -1
		</script>
  ]]></comment>
  <comment id="queryAll"><![CDATA[
	The queryAll() method searches for the HTML elements, child element nodes that satisfy a specific CSS selector.
	
	@method queryAll
	@param {String+} sSelector CSS selector. There are two patterns that can be used as a CSS selector: standard pattern and non-standard pattern. For the standard pattern, the patterns described in the CSS Level3 specification are supported.
	@return {Array} Returns an array of the HTML elements(the jindo.$Element() objects) that satisfy the CSS selector condition. Returns an empty array if there are no satisfying elements.
	@see jindo.$Element#query
	@see jindo.$Element#queryAll
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 Specification - W3C
	@example
		<div id="sample">
			<div></div>
			<div class="pink"></div>
			<div></div>
			<div class="pink"></div>
			<div></div>
			<div class="blue"></div>
			<div class="blue"></div>
		</div>
		
		<script type="text/javascript">
			$Element("sample").queryAll(".pink");
			// Returns an array that has an element with <div class="pink"></div> and <div class="pink"></div>.
		
			$Element("sample").queryAll(".green");
			// Returns an empty array ([]).
		</script>
  ]]></comment>
  <comment id="query"><![CDATA[
	The query() method returns the first child element of the HTML element that satisfy a specific CSS selector.
	
	@method query
	@param {String+} sSelector CSS selector. There are two patterns that can be used as a CSS selector: standard pattern and non-standard pattern. For the standard pattern, the patterns described in the CSS Level3 specification are supported.
	@return {jindo.$Element} The $Element instance of the first HTML element that satisfies the CSS selector condition. 만족하는 HTML 요소가 존재하지 않으면 null을 반환한다.
	@see jindo.$Element#test
	@see jindo.$Element#queryAll
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 Specification - W3C
	@example
		<div id="sample">
			<div></div>
			<div class="pink"></div>
			<div></div>
			<div class="pink"></div>
			<div></div>
			<div class="blue"></div>
			<div class="blue"></div>
		</div>
		
		<script type="text/javascript">
			$Element("sample").query(".pink");
			// Returns the first <div class="pink"></div> DIV element.
		
			$Element("sample").query(".green");
			// Returns null.
		</script>
  ]]></comment>
  <comment id="test"><![CDATA[
	The test() method checks whether the HTML element satisfies a specific CSS selector.
	
	@method test
	@param {String+} sSelector CSS selector. There are two patterns that can be used as a CSS selector: standard pattern and non-standard pattern. For the standard pattern, the patterns described in the CSS Level3 specification are supported.
	@return {Boolean} If the conditions of the CSS selector are satisfied, returns true; otherwise, returns false.
	@see jindo.$Element#query
	@see jindo.$Element#queryAll
	@see http://www.w3.org/TR/css3-selectors/ CSS Level3 Specification - W3C
	@example
		<div id="sample" class="blue"></div>
		
		<script type="text/javascript">
			$Element("sample").test(".blue");	// Result: true
			$Element("sample").test(".red");	// Result: false
		</script>
  ]]></comment>
  <comment id="xpathAll"><![CDATA[
	The xpath() method gets the element that satisfies the XPath grammar, based on the HTML element.
	
	@method xpathAll
	@param {String+} sXPath The XPath value
	@return {Array} Array which has the element(the jindo.$Element() object) that satisfies the XPath grammar as the element
	@remark The supported grammar is limited, therefore, it is recommended to use it only for the specific case.
	@see jindo.$$
	@example
		<div id="sample">
			<div>
				<div>1</div>
				<div>2</div>
				<div>3</div>
				<div>4</div>
				<div>5</div>
				<div>6</div>
			</div>
		</div>
		
		<script type="text/javascript">
			$Element("sample").xpathAll("div/div[5]");
			// Returns an array that has the <div>5</div> element.
		</script>
  ]]></comment>
  <comment id="insertAdjacentHTML"><![CDATA[
	insertAdjacentHTML function. It cannot be used directly.
	
	@method insertAdjacentHTML
	@ignore
  ]]></comment>
  <comment id="appendHTML"><![CDATA[
	The appendHTML() method appends HTML code specified as a parameter to the inside HTML code (innerHTML).
	
	@method appendHTML
	@param {String+} sHTML The HTML string to be appended
	@return {this} 내부 HTML 코드를 변경한 인스턴스 자신
	@remark Returns the jindo.$Element() object in version 1.4.8 and higher.
	@since 1.4.6
	@see jindo.$Element#prependHTML
	@see jindo.$Element#beforeHTML
	@see jindo.$Element#afterHTML
	@example
		// Appends it at the end of inner HTML.
		$Element("sample_ul").appendHTML("<li>3</li><li>4</li>");
		
		//Before
		<ul id="sample_ul">
			<li>1</li>
			<li>2</li>
		</ul>
		
		//After
		<ul id="sample_ul">
			<li>1</li>
			<li>2</li>
			<li>3</li>
			<li>4</li>
		</ul>
  ]]></comment>
  <comment id="prependHTML"><![CDATA[
	The prependHTML() method prepends HTML code specified as a parameter to the inside HTML code (innerHTML).
	
	@method prependHTML
	@param {String+} sHTML HTML character string to be prepended
	@return {this} 인스턴스 자신
	@remark Returns the jindo.$Element() object in version 1.4.8 and higher.
	@since 1.4.6
	@see jindo.$Element#appendHTML
	@see jindo.$Element#beforeHTML
	@see jindo.$Element#afterHTML
	@example
		// Prepends HTML at the front of inner HTML.
		$Element("sample_ul").prependHTML("<li>3</li><li>4</li>");
		
		//Before
		<ul id="sample_ul">
			<li>1</li>
			<li>2</li>
		</ul>
		
		//After
		<ul id="sample_ul">
			<li>4</li>
			<li>3</li>
			<li>1</li>
			<li>2</li>
		</ul>
  ]]></comment>
  <comment id="beforeHTML"><![CDATA[
	The beforeHTML() method adds HTML code specified as a parameter to the head of the HTML code (outerHTML).
	
	@method beforeHTML
	@param {String+} sHTML HTML character string to be added
	@return {this} 인스턴스 자신
	@remark Returns the jindo.$Element() object in version and 1.4.8 and higher.
	@since 1.4.6
	@see jindo.$Element#appendHTML
	@see jindo.$Element#prependHTML
	@see jindo.$Element#afterHTML
	@example
		var welSample = $Element("sample_ul");
		
		welSample.beforeHTML("<ul><li>3</li><li>4</li></ul>");
		welSample.beforeHTML("<ul><li>5</li><li>6</li></ul>");
		
		//Before
		<ul id="sample_ul">
			<li>1</li>
			<li>2</li>
		</ul>
		
		//After
		<ul>
			<li>5</li>
			<li>6</li>
		</ul>
		<ul>
			<li>3</li>
			<li>4</li>
		</ul>
		<ul id="sample_ul">
			<li>1</li>
			<li>2</li>
		</ul>
  ]]></comment>
  <comment id="afterHTML"><![CDATA[
	The afterHTML() method adds HTML code specified as a parameter to the end of the HTML code (outerHTML).
	
	@method afterHTML
	@param {String+} sHTML HTML character string to be added
	@return {this} 내부 HTML 코드를 변경한 인스턴스 자신
	@since Returns the jindo.$Element() object in version 1.4.8 and higher.
	@since 1.4.6
	@see jindo.$Element#appendHTML
	@see jindo.$Element#prependHTML
	@see jindo.$Element#beforeHTML
	@example
		var welSample = $Element("sample_ul");
		
		welSample.afterHTML("<ul><li>3</li><li>4</li></ul>");
		welSample.afterHTML("<ul><li>5</li><li>6</li></ul>");
		
		//Before
		<ul id="sample_ul">
			<li>1</li>
			<li>2</li>
		</ul>
		
		//After
		<ul id="sample_ul">
			<li>1</li>
			<li>2</li>
		</ul>
		<ul>
			<li>3</li>
			<li>4</li>
		</ul>
		<ul>
			<li>5</li>
			<li>6</li>
		</ul>
  ]]></comment>
  <comment id="hasEventListener"><![CDATA[
	Checks whether the event has been assigned to the element.
	
	@method hasEventListener
	@param {String+} sEvent An event name
	@return {Boolean} Whether an event is assigned
	@remark 2.2.0 버전부터, load와 domready이벤트는 각각 Window와 Document에서 발생하는 이벤트이지만 서로를 교차해서 등록하여도 이벤트가 올바르게 발생한다.
	@since 2.0.0
	@example
		$Element("test").attach("click",function(){});
		
		$Element("test").hasEventListener("click"); //true
		$Element("test").hasEventListener("mousemove"); //false
  ]]></comment>
  <comment id="preventTapHighlight"><![CDATA[
	It prevents the parent element from be highlighted when using the event delegate on the mobile.
	
	@method preventTapHighlight
	@param {Boolean} bType Whether to enable or disable highlight
	@return {this} 인스턴스 자신
	@since 2.0.0
	@example
		<ul id="test">
			<li><a href="#nhn">nhn</a></li>
			<li><a href="#naver">naver</a></li>
			<li><a href="#hangame">hangame</a></li>
		</ul>
		
		$Element("test").preventTapHighlight(true);//It prevents test from being highlighted on mobile.
		$Element("test").delegate("click","a",function(e){});
  ]]></comment>
  <comment id="data"><![CDATA[
	The data() method retrieves the dataset of HTML elements.
	
	@method data
	@param {String+} sName The name of the dataset.
	@return {Variant} Returns the dataset value. set할 때 넣은 타입으로 반환하고, 해당 속성이 없다면 null을 반환한다. 단, JSON.stringfly의 반환 값이 undefined인 경우는 설정되지 않는다.
	@see jindo.$Element#attr
  ]]></comment>
  <comment id="data2"><![CDATA[
	The data() method configures the dataset of HTML elements.
	
	@method data
	@syntax sName, vValue
	@syntax oList
	@param {String+} sName The name of the dataset.
	@param {Variant} vValue The value to be configured in the dataset. If the configuration value is set to null, it deletes the HTML dataset.
	@param {Hash+} oList An object or hash object (jindo.$H() object) that has one or more dataset.
	@return {this} dataset의 속성을 설정한 인스턴스 자신
	@see jindo.$Element#attr
	@example
		//Set
		//Before
		<ul id="maillist">
			<li id="folder">Read</li>
		</ul>
		
		//Do
		$Element("folder").data("count",123);
		$Element("folder").data("info",{
			"some1" : 1,
			"some2" : 2
		});
		
		//After
		<li id="folder" data-count="123" data-info="{\"some1\":1,\"some2\":2}">Read</li>
	@example
		//Get
		//Before
		<li id="folder" data-count="123" data-info="{\"some1\":1,\"some2\":2}">Read</li>
		
		//Do
		$Element("folder").data("count"); -> 123//Number
		$Element("folder").data("info"); -> {"some1":1, "some2":2} //Object
	@example
		//Delete
		//Before
		<li id="folder" data-count="123" data-info="{\"some1\":1,\"some2\":2}">Read</li>
		
		//Do
		$Element("folder").data("count",null);
		$Element("folder").data("info",null);
		
		//After
		<li id="folder">Read</li>
  ]]></comment>
</comments>