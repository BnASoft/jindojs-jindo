<comments name="ajax.extend">
	<comment id="title"><![CDATA[
	@fileOverview A file to define the extended methods of the jindo.$Ajax() object
	@name Ajax.extend.js
	@author NAVER Ajax Platform
	]]></comment>
    <comment id="requestBase_desc"><![CDATA[
	A base object of an Ajax request object

	@class jindo.$Ajax.RequestBase
	@ignore
    ]]></comment>
    <comment id="requestBase"><![CDATA[
	It is used to create an Ajax request object as a parent object when creating an Ajax request object for each request type.
	
	@constructor
	@ignore
	@see jindo.$Ajax
    ]]></comment>
    <comment id="jSONPRequest_desc"><![CDATA[
	This class creates a request object of which Ajax request type is jsonp and used when creating the Ajax request object in the jindo.$Ajax() object.
	
	@class jindo.$Ajax.JSONPRequest
	@extends jindo.$Ajax.RequestBase
	@ignore
    ]]></comment>
    <comment id="jSONPRequest"><![CDATA[
	Creates the jindo.$Ajax.JSONPRequest() object. The jindo.$Ajax.JSONPRequest() object extends the jindo.$Ajax.RequestBase() object.
	
	@constructor
	@ignore
	@see jindo.$Ajax
	@see jindo.$Ajax.RequestBase
    ]]></comment>
    <comment id="sWFRequest_desc"><![CDATA[
	This class creates a request object of which Ajax request type is flash and used when creating the Ajax request object in the jindo.$Ajax() object.
	
	@class jindo.$Ajax.SWFRequest
	@extends jindo.$Ajax.RequestBase
	@filter desktop
    ]]></comment>
    <comment id="sWFRequest"><![CDATA[
	Creates the jindo.$Ajax.SWFRequest() object. The jindo.$Ajax.SWFRequest() object extends the jindo.$Ajax.RequestBase() object.
	
	@constructor
	@filter desktop
	@see jindo.$Ajax
	@see jindo.$Ajax.RequestBase
    ]]></comment>
    <comment id="sWFRequest_1"><![CDATA[
 Handles that status is a Boolean value for backward compatibility.
    ]]></comment>
    <comment id="sWFRequest_2"><![CDATA[
 Stores in text without decoding data if the data encoding is not uft-8.
    ]]></comment>
    <comment id="sWFRequest_3"><![CDATA[
 A callback code is inserted but a response header has not yet been supported in SWF.
    ]]></comment>
    <comment id="sWFRequest_write"><![CDATA[
	The write() method initializes a flash object. It inserts a flash object to communicate in a document when it is called. If the request type is flash, communication is made through a flash object. Thus, the write() method must be executed once before the request method of a jindo.$Ajax() object is called and it must be written in the body element; a problem will occur if it is executed more than once.
	
	@method write
	@param {String+} [sSWFPath="./ajax.swf"] A flash file to be used in Ajax communication
	@filter desktop
	@see jindo.$Ajax#request
	@example
		<body>
		    <script type="text/javascript">
		        $Ajax.SWFRequest.write("/path/swf/ajax.swf");
		    </script>
		</body>
    ]]></comment>
    <comment id="sWFRequest_activeFlash"><![CDATA[
	A variable to store information on whether the flash object has been loaded. Returns true if it is loaded; otherwise, returns false. It is used to check whether a flash object has been loaded.
	
	@method activeFlash
	@filter desktop
	@see jindo.$Ajax.SWFRequest#write
    ]]></comment>
    <comment id="sWFRequest_onload"><![CDATA[
	A function to be executed when loading flash is complete
	
	@method onload
	@filter desktop
	@since 2.0.0
	@see jindo.$Ajax.SWFRequest#onerror
	@example
		var oSWFAjax = $Ajax("http://naver.com/api/test.json",{
			"type" : "flash"
		});
	    $Ajax.SWFRequest.onload = function(){
			oSWFAjax.request();	
		}
    ]]></comment>
    <comment id="sWFRequest_onerror"><![CDATA[
	A function to be executed when loading flash fails
	
	@method onerror
	@filter desktop
	@see jindo.$Ajax.SWFRequest#onerror
	@since 2.0.0
	@example
		var oSWFAjax = $Ajax("http://naver.com/api/test.json",{
			"type" : "flash"
		});
        $Ajax.SWFRequest.onerror = function(){
			alert("Loadinf flash fails. Please try again.");
		}
    ]]></comment>
    <comment id="sWFRequest_loaded"><![CDATA[
	A function to be executed after loading in flash
	
	@method loaded
	@filter desktop
	@ignore
    ]]></comment>
    <comment id="frameRequest_desc"><![CDATA[
	Creates a request type of which Ajax request type is iframe and used when creating the Ajax request object in the jindo.$Ajax() object.
	
	@class jindo.$Ajax.FrameRequest
	@extends jindo.$Ajax.RequestBase
	@filter desktop
	@ignore
    ]]></comment>
    <comment id="frameRequest"><![CDATA[
	Create a jindo.$Ajax.FrameRequest() object. The jindo.$Ajax.FrameRequest() object extends the jindo.$Ajax.RequestBase() object.
	
	@constructor
	@filter desktop
	@ignore
	@see jindo.$Ajax
	@see jindo.$Ajax.RequestBase
    ]]></comment>
    <comment id="queue_desc"><![CDATA[
	Ajax Processes requests that are in the queue sequentially.
	
	@class jindo.$Ajax.Queue
	@keyword ajaxqueue, queue, ajax
    ]]></comment>
    <comment id="queue"><![CDATA[
	Provides a functionality that enables the jindo.$Ajax() objects to be sequentially called.
	
	@constructor
	@param {Hash+} oOption Defines information about communications being requested by the $Ajax.Queue object to a server.
		@param {Boolean} [oOption.async=false] Sets whether it is a synchronously/asynchronously requests. With asynchronous requests, the value is set to true.
		@param {Boolean} [oOption.useResultAsParam=false] Sets whether the request result previously processed to the next request as a parameter has been passed. If the request result is passed, the value is set to true.
		@param {Boolean} [oOption.stopOnFailure=false] Sets whether the next request when the previous request failed has stopped. If the next request stops, the value is set to true.
	@since 1.3.7
	@see jindo.$Ajax
	@example
		// Creates a $Ajax request queue.
		var oAjaxQueue = new $Ajax.Queue({
			useResultAsParam : true
		});
    ]]></comment>
    <comment id="queue_option"><![CDATA[
	option() 메서드는 $Ajax.Queue 객체에 설정한 옵션 값을 반환한다.
	
	@method option
	@param {String+} vName Option name
	@return {Variant} Returns the specified option.
	@see jindo.$Ajax.Queue
	@example
		oAjaxQueue.option("useResultAsParam");	// Returns true, the option value of useResultAsParam.
    ]]></comment>
    <comment id="queue_option2"><![CDATA[
	option() 메서드는 $Ajax.Queue 객체에 지정한 옵션 값을 키와 값으로 설정한다.
	
	@method option
	@syntax sName, vValue
	@syntax oOption
	@param {String+} sName Option name (String)
	@param {Variant} [vValue] Option value. This value is allowed only if an option to be set is specified in vName.
	@param {Hash+} oOption oOption Option name (String) or an object in which one or more options are specified.
	@return {this} 지정한 옵션을 설정한 인스턴스 자신
	@see jindo.$Ajax.Queue
	@example
		var oAjaxQueue = new $Ajax.Queue({
			useResultAsParam : true
		});
		
		oAjaxQueue.option("async", true);		// Specifies the async option as true.
    ]]></comment>
    <comment id="queue_add"><![CDATA[
	The add() method adds the jindo.$Ajax() object to $Ajax.Queue.
	
	@method add
	@syntax oAjax, oParam
	@param {jindo.$Ajax} oAjax The jindo.$Ajax() object to be added
	@param {Hash+} [oParam] A parameter object to be sent upon Ajax request
	@return {this} 인스턴스 자신 
	@example
		var oAjax1 = new $Ajax('ajax_test.php',{
			onload :  function(res){
				// onload handler
			}
		});
		var oAjax2 = new $Ajax('ajax_test.php',{
			onload :  function(res){
				// onload handler
			}
		});
		var oAjax3 = new $Ajax('ajax_test.php',{
			onload :  function(res){
				// onload handler
			}
		
		});
		
		var oAjaxQueue = new $Ajax.Queue({
			async : true,
			useResultAsParam : true,
			stopOnFailure : false
		});
		
		// Adds the Ajax request to queue.
		oAjaxQueue.add(oAjax1);
		
		// Adds the Ajax request to queue.
		oAjaxQueue.add(oAjax1,{seq:1});
		oAjaxQueue.add(oAjax2,{seq:2,foo:99});
		oAjaxQueue.add(oAjax3,{seq:3});
		
		oAjaxQueue.request();
    ]]></comment>
    <comment id="queue_request"><![CDATA[
	The request() method sends the Ajax request in $Ajax.Queue to a server.
	
	@method request
	@return {this} 인스턴스 자신 
	@example
		var oAjaxQueue = new $Ajax.Queue({
			useResultAsParam : true
		});
		oAjaxQueue.add(oAjax1,{seq:1});
		oAjaxQueue.add(oAjax2,{seq:2,foo:99});
		oAjaxQueue.add(oAjax3,{seq:3});
		
		// Sends the Ajax request to a server.
		oAjaxQueue.request();
    ]]></comment>
</comments>