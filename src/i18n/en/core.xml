<comments name="core">
  <comment id="title"><![CDATA[
	@fileOverview A file to define the $() function, jindo.$Jindo() object, and jindo.$Class() object
	@name core.js
	@author NAVER Ajax Platform
  ]]></comment>
   <comment id="etc"><![CDATA[
	This has been specified separately in order to eliminate agent dependency.
	
	@ignore
  ]]></comment>
  <comment id="jindo_desc"><![CDATA[
	The jindo.$Jindo() object provides the information of the framework and utility functions.

	@class jindo.$Jindo
	@keyword core, $Jindo
  ]]></comment>
  <comment id="constructor"><![CDATA[
	Creates a jindo.$Jindo() object. The jindo.$Jindo() object provides the information of the framework and utility functions.
	
	@constructor
	@remark The following table describes the attributes of objects that contain the Jindo framework information.<br>
		<h5>Attributes of the object containing the information of Jindo framework</h5>
		<table class="tbl_board">
			<caption class="hide">Attributes of the object containing the information of Jindo framework</caption>
			<thead>
				<tr>
					<th scope="col" style="width:15%">Name</th>
					<th scope="col" style="width:15%">Type</th>
					<th scope="col">Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">version</td>
					<td>Number</td>
					<td class="txt">Stores version information about the Jindo framework.</td>
				</tr>
		</table>
  ]]></comment>
  <comment id="version"><![CDATA[
	JindoJS version
	
	@property VERSION
	@static
	@type String
	@example
		console.log(jindo.$Jindo.VERSION); // "2.9.0"
	@since 2.4.0
  ]]></comment>
  <comment id="compatible"><![CDATA[
	A function that sets and returns compatible mode
	
	@method compatible
	@ignore
	@param {Boolean} bType
	@return {Boolean} [true | false]
  ]]></comment>
  <comment id="mixin"><![CDATA[
	Used when mixin object (Object on source property, pass through)

	@method mixin
	@static
	@param {Hash} oDestination
	@param {Hash} oSource
	@return {Hash} oNewObject
	@since 2.2.0
	@example
		var oDestination = {
			"foo" :1,
			"test" : function(){}
		};
		var oSource = {
			"bar" :1,
			"obj" : {},
			"test2" : function(){}
		};
		
		var  oNewObject = jindo.$Jindo.mixin(oDestination,oSource);
		
		oNewObject == oDestination //false
		
		// oNewObject => {
		// "foo" :1,
		// "test" : function(){},
		//     
		// "bar" :1,
		// "obj" : {},
		// "test2" : function(){}
		// };
  ]]></comment>
  <comment id="is_function"><![CDATA[
	A function to check if a parameter is Function or not.
	
	@method isFunction
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_array"><![CDATA[
	A function to check if a parameter is Array or not.
	
	@method isArray
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_string"><![CDATA[
	A function to check if a parameter is String or not.
	
	@method isString
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_numeric"><![CDATA[
	A function to check if a parameter is Numeric or not.
	
	@method isNumeric
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_boolean"><![CDATA[
	A function to check if a parameter is Boolean or not.
	
	@method isBoolean
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_date"><![CDATA[
	A function to check if a parameter is Date or not.
	
	@method isDate
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_regexp"><![CDATA[
	A function to check if a parameter is Regexp or not.
	
	@method isRegexp
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_element"><![CDATA[
	A function to check if a parameter is Element or not.
	
	@method isElement
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_document"><![CDATA[
	A function to check if a parameter is Document or not.
	
	@method isDocument
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_node"><![CDATA[
	A function to check if a parameter is Node or not.
	
	@method isNode
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_hash"><![CDATA[
	A function to check if a parameter is Hash or not.
	
	@method isHash
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_null"><![CDATA[
	A function to check if a parameter is Null or not.
	
	@method isNull
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_undefined"><![CDATA[
	A function to check if a parameter is Undefined or not.
	
	@method isUndefined
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="is_window"><![CDATA[
	A function to check if a parameter is Window or not.
	
	@method isWindow
	@static
	@param {Variant} oObj
	@return {Boolean} [true | false]
	@since 2.0.0
  ]]></comment>
  <comment id="check_var_type"><![CDATA[
	Checks whether the function parameter complies to the desired rule.
	
	@method checkVarType
	@ignore
	@param {Array} aArgs Parameter list
	@param {Hash} oRules Rule list
	@param {String} sFuncName The function name to be used to show an error message
	@return {Object}
  ]]></comment>
  <comment id="var_type"><![CDATA[
	Gets the type that is used while executing checkVarType.
	
	@method varType
	@ignore
	@param {String+} sTypeName Type name
	@return {Function} The function that implements the rules to check types
  ]]></comment>
  <comment id="var_type2"><![CDATA[
	Sets the type to be used to execute checkVarType.
	
	@method varType
	@ignore
	@syntax sTypeName, fpFunc
	@syntax oTypeLists
	@param {String+} sTypeName Type name
	@param {Function+} fpFunc The function that implements the rules to check types
	@param {Hash+} oTypeLists The object that contains the type rules, 이 옵션을 사용하면 checkVarType 를 수행할때 사용할 여러개의 타입들을 한번에 설정할 수 있다.
	@return {this} instance of itself
 ]]></comment>
  <comment id="var_type_not_matched"><![CDATA[
	Used by the function, which is registered to varType and checks the type, to notify that the type does not match.
	
	@constant VARTYPE_NOT_MATCHED
	@static
	@ignore
 ]]></comment>
  <comment id="namespace_global_"><![CDATA[
	Built-In Namespace _global_
	
	@class jindo
	@static
 ]]></comment>
  <comment id="sign_"><![CDATA[
	The $() function creates an element from DOM. It creates an object with the tagName object when the character string is entered in the form of "&lt;tagName&gt;."
	
	@method $
	@param {String+} elDomElement The DOM element to be created.
	@return {Variant} If any element has been created, returns it as an object.
	@throws {jindo.$Except.NOT_FOUND_ARGUMENT} The exception occurs when no parameters exist.
	@remark The document element can be specified in the last parameter in version 1.4.6 or higher of Jindo.
	@example
		// Creates an object by using a string such as tagName format.
		var el = $("<DIV>");
		var els = $("<DIV id='div1'><SPAN>hello</SPAN></DIV>");
		
		// In Internet Explorer, document must be specified to create elements to be added to iframe (available in version 1.4.6 and higher).
		var els = $("<div>" , iframe.contentWindow.document);
		// If code is written such like above, div tags are generated based on iframe.contentWindow.document.
  ]]></comment>
  <comment id="sign2_"><![CDATA[
	The $() function retrieves a specific element to be manipulated from DOM. Retrieves the DOM element by using the ID. When two or more parameters are specified, returns the array which has the DOM elements.
	
	@method $
	@param {String+} sID* The ID of the 1st~Nth DOM element to be retrieved
	@return {Variant} Returns the DOM element specified with the ID value or the array which has the DOM elements. If no element corresponding to the ID exists, returns null.
	@throws {jindo.$Except.NOT_FOUND_ARGUMENT} The exception occurs when no parameters exist.
	@remark The document element can be specified in the last parameter in version 1.4.6 or higher of Jindo.
	@example
		// Returns an object by using ID.
		<div id="div1"></div>
		
		var el = $("div1");
		
		// Returns multiple objects by using IDs.
		<div id="div1"></div>
		<div id="div2"></div>
		
		var els = $("div1","div2"); // Returns a result such as [$("div1"),$("div2")] format.
  ]]></comment>
  <comment id="sign__1"><![CDATA[
If the last argument is document
  ]]></comment>
  <comment id="class_desc"><![CDATA[
	The jindo.$Class() object uses the Jindo framework to implement the application using object-oriented programming.
	
	@class jindo.$Class
	@keyword class
  ]]></comment>
  <comment id="class"><![CDATA[
	Creates a class (the jindo.$Class() object). Enter the object to become a class as a parameter. To define the constructor function that is used to create class instances, register a method to the object and name it $init. In addition, the $static keyword allows you to register a method that can be used even when no instance is created.
	
	@constructor
	@param {Hash+} oDef The object that defines the class. Defines the class constructor, attributes, and methods.
	@return {jindo.$Class} Returns the created class (the jindo.$Class() object).
	@example
		var CClass = $Class({
		    prop : null,
		    $init : function() {
		         this.prop = $Ajax();
		         ...
		    },
			$static : {
				static_method : function(){ return 1;}
			}
		});
		
		var c1 = new CClass();
		var c2 = new CClass();
		
		// c1 and c2 have different jindo.$Ajax() objects.
		CClass.static_method(); // 1
  ]]></comment>
  <comment id="autoBind"><![CDATA[
	If $autoBind set true, methods name which has '_'(underscore) character, will automatically bound.
	
	@property $autoBind
	@type boolean
	@example
		// $autoBind sample
		var OnAutoBind = $Class({
			$autoBind : true,
			num : 1,
			each : function(){
				$A([1,1]).forEach(this._check);	
			},
			_check : function(v){
				// this === OnScope instance
				value_of(v).should_be(this.num);
			}
		});
		
		new OnScope().each();
	@filter desktop
  ]]></comment>
<comment id="static_"><![CDATA[
	Method registered as $static, can be used without creating class instance.
	
	@property $static
	@type Object
	@example
		// $static example
		var Static = $Class({
			$static : {
				"do" : function(){
					console.log("static method");
				}
				
			}
		});
		
		Static.do();
		//static method
	@filter desktop
  ]]></comment>
  <comment id="kindOf"><![CDATA[
	The kindOf() method which checks its class type
	
	@method kindOf
	@param {jindo.$Class} oClass The class(the jindo.$Class() object) to be checked.
	@return {Boolean} true | false
	@since 2.0.0
	@example
		var Parent = $Class ({});
		var Parent2 = $Class ({});
		var Child = $Class ({}).extend(Parent);
		
		var child = new Child();
		child.kindOf(Parent);// true
		child.kindOf(Parent2);// false
  ]]></comment>
  <comment id="extend"><![CDATA[
	The extend() method extends a specific class (the jindo.$Class() object) and speficies the superclass to inherit.
	
	@method extend
	@param {jindo.$Class} superClass The superclass (the jindo.$Class() object) to inherit
	@return {this} Inherited instance of itself.
	@example
		var ClassExt = $Class(classDefinition);
		ClassExt.extend(superClass);
		// ClassExt extends SuperClass. 
  ]]></comment>
  <comment id="super_"><![CDATA[
	The $super attribute is used to access the methods of a parent class. Subclasses can access their immediate superclasses through this.$super.method. However, they cannot access superclasses that are two or more tiers higher than themselves, even if this.$super.$super.method is used. In addition, when the superclass and the subclass have the method with the identical name and the subclass calls the method with the name by using $super, the method of the superclass is called.
	
	@property $super
	@type $Class
	@example
		var Parent = $Class ({
			a: 100,
			b: 200,
			c: 300,
			sum2: function () {
				var init = this.sum();
				return init;
			},
			sum: function () {
				return this.a + this.b
			}
		});
	
		var Child = $Class ({
			a: 10,
			b: 20,
			sum2 : function () {
				var init = this.sum();
				return init;
			},
			sum: function () {
				return this.b;
			}
		}).extend (Parent);
	
		var oChild = new Child();
		var oParent = new Parent();
	
		oChild.sum();           // 20
		oChild.sum2();          // 20
		oChild.$super.sum();    // 30 -> Adds 10(a) and 20(b) of a child class instead of adding 100(a) and 200(b) of a parent class.
		oChild.$super.sum2();   // 20 -> Invokes sum() of a child class, not sum() of a parent class in the sum2 method of the parent class.
  ]]></comment>
  <comment id="invalid_param_message"><![CDATA[Invalid parameter]]></comment>
  <comment id="invalid_param_called"><![CDATA[Call type]]></comment>
  <comment id="invalid_param_suggest"><![CDATA[Available type]]></comment>
  <comment id="invalid_param_manual"><![CDATA[Manual page]]></comment>
  <comment id="exceed_param_warning"><![CDATA[Additional parameter exists.]]></comment>
  <comment id="cannot_use_option"><![CDATA[The option is not allowed.]]></comment>
  <comment id="cannot_use_header"><![CDATA[If when type is jsonp or CORS request using XDomainRequest(IE8,9) on desktop environment, you cannot use header method.]]></comment>
  <comment id="parse_error"><![CDATA[An error occurs while parsing.]]></comment>
  <comment id="not_found_argument"><![CDATA[No parameter exists.]]></comment>
  <comment id="not_standard_query"><![CDATA[Abnormal CSS selector]]></comment>
  <comment id="invalid_date"><![CDATA[Invalid date foramt]]></comment>
  <comment id="require_ajax"><![CDATA[ does not exist.]]></comment>
  <comment id="not_found_element"><![CDATA[No element exists.]]></comment>
  <comment id="has_function_for_group"><![CDATA[A function to detach is required unless it is deleted as a group.]]></comment>
  <comment id="none_element"><![CDATA[ does not have corresponding element.]]></comment>
  <comment id="not_support_selector"><![CDATA[ is not supported.]]></comment>
  <comment id="not_support_method"><![CDATA[The method is not supported on the desktop.]]></comment>
  <comment id="not_support_cors"><![CDATA[This browser not support CORS.]]></comment>
  <comment id="json_must_have_array_hash"><![CDATA[The get method is available only if json type is hash or array]]></comment>  
  <comment id="must_append_dom"><![CDATA[A base element must be appended to document.]]></comment>  
  <comment id="not_use_css"><![CDATA[ does not use css.]]></comment>
  <comment id="not_work_domready"><![CDATA[domready event can't be used inside of iframe.]]></comment>
  <comment id="cannot_set_obj_property"><![CDATA[ property type is Object.\nIf class property is object then All instance is share it. so danger.]]></comment>
    <comment id="jindo_info"><![CDATA[
    jindo version and type property

    jindo.VERSION; // Version string - ex. "2.9.2"
    jindo.TYPE;    // Version type string (desktop|mobile) - ex. "desktop"
  ]]></comment>
</comments>