<comments name="ajax">
	<comment id="title"><![CDATA[
	@fileOverview A file to define the constructor and method of the jindo.$Ajax() object
	@name Ajax.js
	@author NAVER Ajax Platform
	]]></comment>
	<comment id="desc"><![CDATA[
	$Ajax The jindo.$Ajax() object provides a method for easily implementing Ajax requests and responses in a variety of development environments.
	
	@class jindo.$Ajax
	@keyword ajax
	]]></comment>
	<comment id="constructor"><![CDATA[
	The jindo.$Ajax() object supports asynchronous communication between a server and a browser, namely the Ajax communication. The jindo.$Ajax() object provides many different methods of communicating with other domains as well as the default method using the XHR object (XMLHTTPRequest).
	
	@constructor
	@param {String+} sUrl URL value for Ajax request.
	@param {Hash+} oOption Set options for $Ajax() object. (ex. callbacks, Ajax types, etc.)
		@param {String} [oOption.type="xhr"] Ajax request type.
			@param {String} [oOption.type."xhr"] Use browser's native XMLHttpRequest object to proceed Ajax call.
					<ul>
						<li>text, xml, json 형식의 응답 데이터를 처리할 수 있다. </li>
						<li>요청 실패 시 HTTP 응답 코드를 통해 원인 파악이 가능하다.</li>
						<li>2.1.0 버전 이상에서는 크로스 도메인이 아닌 xhr의 경우 헤더에 "X-Requested-With" : "XMLHttpRequest"을 포함함. </li>
						<li>단, 크로스 도메인(Cross-Domain) 상황에서 사용할 수 없다.</li>
						<li>2.1.0 버전 이상은 모바일에서 가능. 반드시 서버설정이 필요. (자세한 사용법은 <auidoc:see content="http://devcafe.nhncorp.com/ajaxui/board_5/574863">devcafe</auidoc:see>를 참고)</li>
					</ul>
			@param {String} oOption.type."iframe" iframe 요소를 프록시로 사용하여 Ajax 요청을 처리한다.
					<ul>
						<li>크로스 도메인 상황에서 사용할 수 있다.</li>
						<li>iframe 요청 방식은 다음과 같이 동작한다.
							<ol class="decimal">
								<li>로컬(요청 하는 쪽)과 원격(요청 받는 쪽)에 모두 프록시용 HTML 파일을 만든다.</li>
								<li>로컬 프록시에서 원격 프록시로 데이터를 요청한다.</li>
								<li>원격 프록시가 원격 도메인에 XHR 방식으로 다시 Ajax 요청한다.</li>
								<li>응답을 받은 원격 프록시에서 로컬 프록시로 데이터를 전달한다.</li>
								<li>로컬 프록시에서 최종적으로 콜백 함수(onload)를 호출하여 처리한다.</li>
							</ol>
						</li>
						<li>로컬 프록시 파일과 원격 프록시 파일은 다음과 같이 작성할 수 있다.
							<ul>
								<li>원격 프록시 파일 : ajax_remote_callback.html</li>
								<li>로컬 프록시 파일 : ajax_local_callback.html</li>
							</ul>
						</li>
						<li>iframe 요소를 사용한 방식은 인터넷 익스플로러에서 "딱딱"하는 페이지 이동음이 발생할 수 있다. (요청당 2회)</li>
					</ul>
			@param {String} oOption.type."jsonp" JSON 형식과 &lt;script&gt; 태그를 사용하여 사용하여 Ajax 요청을 처리한다.
					<ul>
						<li>크로스 도메인 상황에서 사용할 수 있다.</li>
						<li>jsonp 요청 방식은 다음과 같이 동작한다.
							<ol class="decimal">
								<li>&lt;script&gt; 태그를 동적으로 생성한다. 이때 요청할 원격 페이지를 src 속성으로 입력하여 GET 방식으로 요청을 전송한다.</li>
								<li>요청 시에 콜백 함수를 매개 변수로 넘기면, 원격 페이지에서 전달받은 콜백 함수명으로 아래와 같이 응답을 보낸다.
									<ul>
										<li>function_name(...결과 값...)</li>
									</ul>
								</li>
								<li>응답은 콜백 함수(onload)에서 처리된다.</li>
							</ol>
						</li>
						<li>GET 방식만 가능하므로, 전송 데이터의 길이는 URL에서 허용하는 길이로 제한된다.</li>
					</ul>
			@param {String} oOption.type."flash" 플래시 객체를 사용하여 Ajax 요청을 처리한다.
					<ul>
						<li>크로스 도메인 상황에서 사용할 수 있다.</li>
						<li>이 방식을 사용할 때 원격 서버의 웹 루트 디렉터리에 crossdomain.xml 파일이 존재해야 하며 해당 파일에 접근 권한이 설정되어 있어야 한다.</li>
						<li>모든 통신은 플래시 객체를 통하여 주고 받으며 Ajax 요청을 시도하기 전에 반드시 플래시 객체를 초기화해야 한다.</li>
						<li>$Ajax.SWFRequest.write() 메서드를 사용하여 플래시 객체를 초기화하며 해당 메서드는 &lt;body&gt; 요소 안에 작성한다.</li>
						<li>만약 https에서 https 쪽으로 호출할 경우 &lt;allow-access-from domain="*" secure="true" /&gt; 처럼 secure을 true로 설정해야 하며 그 이외에는 false로 설정한다.</li>
					</ul>
		@param {String} [oOption.method="post"] HTTP 요청 방식으로 post, get, put, delete 방식을 지원한다.
			@param {String} [oOption.method."post"] post 방식으로 http 요청을 전달한다.
			@param {String} oOption.method."get" get 방식으로 http 요청을 전달한다. type 속성이 "jsonp" 방식으로 지정되면 HTTP 요청 방식은 "get"으로 설정된다.
			@param {String} oOption.method."put" put 방식으로 http 요청을 전달한다. (1.4.2 버전부터 지원).
			@param {String} oOption.method."delete" delete 방식으로 http 요청을 전달한다. (1.4.2 버전부터 지원).
		@param {Number} [oOption.timeout=0] 요청 타임 아웃 시간.  (단위 초)
				<ul>
					<li>비동기 호출인 경우에만 사용 가능하다.</li>
					<li>타임 아웃 시간 안에 요청이 완료되지 않으면 Ajax 요청을 중지한다.</li>
					<li>생략하거나 기본값(0)을 지정한 경우 타임 아웃을 적용하지 않는다. </li>
				</ul>
		@param {Boolean} [oOption.withCredentials=false] when need to send cookies for crossdomain xhr request.
				<ul>
					<li>If set true, the server response must include "Access-Control-Allow-Credentials: true" header.</li>
				</ul>
		@param {Object} [oOption.data=null] Set this option when need to send FormData object data
				<ul>
				    <li><b><u>When set data value, consider :</u></b></li>
					<li>Don't set 'Content-Type' header value manually</li>
                    <li>Only available on 'POST' request, and the data parameter set in $Ajax.request() method is ignored</li>
				</ul>
		@param {Function} oOption.onload 요청이 완료되면 실행할 콜백 함수. 콜백 함수의 파라미터로 응답 객체인 <auidoc:see content="jindo.$Ajax.Response"/> 객체가 전달된다.
		@param {Function} [oOption.onerror="onload 속성에 지정한 콜백 함수"] 요청이 실패하면 실행할 콜백 함수. 생략하면 오류가 발생해도 onload 속성에 지정한 콜백 함수를 실행한다.
		@param {Function} [oOption.ontimeout=function(){}] 타임 아웃이 되었을 때 실행할 콜백 함수. 생략하면 타임 아웃 발생해도 아무런 처리를 하지 않는다.
		@param {String} oOption.proxy 로컬 프록시 파일의 경로. type 속성이 "iframe"일 때 사용.
		@param {String} [oOption.jsonp_charset="utf-8"] 요청 시 사용할 &lt;script&gt; 인코딩 방식. type 속성이 "jsonp"일 때 사용한다. (0.4.2 버전부터 지원).
		@param {String} [oOption.callbackid="랜덤한 ID"] 콜백 함수 이름에 사용할 ID.
				<ul>
					<li>type 속성이 "jsonp"일 때 사용한다. (1.3.0 버전부터 지원)</li>
					<li>jsonp 방식에서 Ajax 요청할 때 콜백 함수 이름에 랜덤한 ID 값을 덧붙여 만든 콜백 함수 이름을 서버로 전달한다. 이때 랜덤한 값을 ID로 사용하여 넘기므로 요청 URL이 매번 새롭게 생성되어 캐시 서버가 아닌 서버로 직접 데이터를 요청하게 된다. 따라서 ID 값을 지정하면 랜덤한 아이디 값으로 콜백 함수 이름을 생성하지 않으므로 캐시 서버를 사용하여 그에 대한 히트율을 높이고자 할 때 ID를 지정하여 사용할 수 있다.</li>
				</ul>
		@param {String} [oOption.callbackname="_callback"] 콜백 함수 이름. type 속성이 "jsonp"일 때 사용하며, 서버에 요청할 콜백 함수의 이름을 지정할 수 있다. (1.3.8 버전부터 지원).
		@param {Boolean} [oOption.sendheader=true] 요청 헤더를 전송할지 여부.<br>type 속성이 "flash"일 때 사용하며, 서버에서 접근 권한을 설정하는 crossdomain.xml에 allow-header가 설정되어 있지 않다면 반드시 false 로 설정해야 한다. (1.3.4 버전부터 지원).<br>
				<ul>
					<li>플래시 9에서는 allow-header가 false인 경우 get 방식으로만 ajax 통신이 가능하다.</li>
					<li>플래시 10에서는 allow-header가 false인 경우 get,post 둘다 ajax 통신이 안된다.</li>
					<li>allow-header가 설정되어 있지 않다면 반드시 false로 설정해야 한다.</li>
				</ul>
		@param {Boolean} [oOption.async=true] 비동기 호출 여부. type 속성이 "xhr"일 때 이 속성 값이 유효하다. (1.3.7 버전부터 지원).
		@param {Boolean} [oOption.decode=true] type 속성이 "flash"일 때 사용하며, 요청한 데이터 안에 utf-8 이 아닌 다른 인코딩이 되어 있을때 false 로 지정한다. (1.4.0 버전부터 지원). 
		@param {Boolean} [oOption.postBody=false] Ajax 요청 시 서버로 전달할 데이터를 Body 요소에 전달할 지의 여부.<br>
				type 속성이 "xhr"이고 method가 "get"이 아니어야 유효하며 REST 환경에서 사용된다. (1.4.2 버전부터 지원).
	@throws {jindo.$Except.REQUIRE_AJAX} The exception occurs when no ajax exists.
	@throws {jindo.$Except.CANNOT_USE_OPTION} The exception occurs when using unavailable options.
	@remark The basic initialization of the jindo.$Ajax() object is as follows:
<pre class="code "><code class="prettyprint linenums">
	// When URL is not same of current page value, will call as CORS method. XHR2 or in case of IE8,9 XDomainRequest object is used.
	var oAjax = new $Ajax('server.php', {
	    type : 'xhr',
	    method : 'get',     // GET method
	    onload : function(res){ // A callback function to be executed when request is complete
	      $('list').innerHTML = res.text();
	    },
	    timeout : 3,      // Executes ontimeout if request has not been complete in 3 seconds (0 if omitted).
	    ontimeout : function(){ // A callback function to be executed upon timeout; if 0 is specified, nothing will be processed when timeout occurs.
	      alert("Timeout!");
	    },
	    async : true      // An asynchronous call, true if omitted.
	});
	oAjax.request();
</code></pre><br>
	oOption 객체의 프로퍼티와 사용법에 대한 설명은 다음 표와 같다.<br>
		<h5>The availability of options based on types</h5>
		<table class="tbl_board">
			<caption class="hide">The availability of options based on types</caption>
			<thead>
				<th scope="col">option</th>
				<th scope="col">xhr</th>
				<th scope="col">jsonp</th>
				<th scope="col">flash</th>
				<th scope="col">iframe</th>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">method(get, post, put, delete)</td>
					<td>O</td>
					<td>get</td>
					<td>get, post</td>
					<td>iframe</td>
				</tr>
				<tr>
					<td class="txt bold">onload</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">timeout</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">ontimeout</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">onerror</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">async</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">postBody</td>
					<td>Available only post, put, and delete methods</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">jsonp_charset</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">callbackid</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">callbackname</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">setheader</td>
					<td>O</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">decode</td>
					<td>X</td>
					<td>X</td>
					<td>O</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">proxy</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">withCredentials</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
				</tr>
				<tr>
					<td class="txt bold">data</td>
					<td>O</td>
					<td>X</td>
					<td>X</td>
					<td>X</td>
				</tr>
			</tbody>
		</table>
		<h5>The availability of methods based on types</h5>
		<table class="tbl_board">
			<caption class="hide">The availability of methods based on types</caption>
			<thead>
				<th scope="col">Method</th>
				<th scope="col">xhr</th>
				<th scope="col">jsonp</th>
				<th scope="col">flash</th>
				<th scope="col">iframe</th>
			</thead>
			<tbody>
				<tr>
					<td class="txt bold">abort</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">isIdle</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">option</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">request</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
					<td>O</td>
				</tr>
				<tr>
					<td class="txt bold">header</td>
					<td>O</td>
					<td>X</td>
					<td>O</td>
					<td>O</td>
				</tr>
			</tbody>
		</table>
	@see jindo.$Ajax.Response
	@see http://dev.naver.com/projects/jindo/wiki/cross%20domain%20ajax Cross Domain Ajax 이해
	@example
		// An example that configures a list by getting data from a server upon click of the 'Get List' button
		// (1) If server pages exist in the same domain as service pages - xhr
		
		// [client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList() {
						var oAjax = new $Ajax('server.php', {
							type : 'xhr',
							method : 'get',			// GET method
							onload : function(res){	// A callback function to be executed when request is complete
								$('list').innerHTML = res.text();
							},
							timeout : 3,			// Executes ontimeout if request has not been complete in 3 seconds (0 if omitted).
							ontimeout : function(){	// A callback function to be executed upon timeout; if 0 is specified, nothing will be processed when timeout occurs.
								alert("Timeout!");
							},
							async : true			// An asynchronous call, true if omitted.
						});
						oAjax.request();
					}
				</script>
			</head>
			<body>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [server.php]
		<?php
			echo "<li>First</li><li>Second</li><li>Third</li>";
		?>
	
	@example
		// 'Get List' 버튼 클릭 시, 서버에서 데이터를 받아와 리스트를 구성하는 예제
		// (1-1) 서버 페이지와 서비스 페이지가 다른 도메인에 있는 경우 - xhr
		
		// [http://jindo.com/client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList() {
						var oAjax = new $Ajax('http://server.com/some/server.php', {
							type : 'xhr',
							method : 'get',			// GET 방식으로 통신
							withCredentials : true, // 쿠키를 포함하여 설정
							onload : function(res){	// 요청이 완료되면 실행될 콜백 함수
								$('list').innerHTML = res.text();
							}
						});
						oAjax.request();
					}
				</script>
			</head>
			<body>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [server.php]
		 <?
		 	header("Access-Control-Allow-Origin: http://jindo.com"); // 크로스도메인으로 호출이 가능한 곳을 등록.
			header("Access-Control-Allow-Credentials: true"); // 쿠키를 허용할 경우.
			
			echo "<li>First</li><li>Second</li><li>Third</li>";
		?>
	
	@example
		// An example that configures a list by getting data from a server upon click of the 'Get List' button
		// (2) If server pages exist in the same domain as service pages - iframe
		
		// [http://local.com/some/client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList() {
						var oAjax = new $Ajax('http://server.com/some/some.php', {
							type : 'iframe',
							method : 'get',			// GET method
													// If POST is specified, it is processed using POST method when a request is made from a remote proxy file to some.php.
							onload : function(res){	// A callback function to be executed when request is complete
								$('list').innerHTML = res.text();
							},
							// The path of a local proxy file
							// The path must be correctly specified. Any location is acceptable as long as it is a local domain path.
							// (※ A remote proxy file must be in the root directory of a remote domain server.)
							proxy : 'http://local.naver.com/some/ajax_local_callback.html'
						});
						oAjax.request();
					}
		
				</script>
			</head>
			<body>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [http://server.com/some/some.php]
		<?php
			echo "<li>First</li><li>Second</li><li>Third</li>";
		?>
	
	@example
		// An example that configures a list by getting data from a server upon click of the 'Get List' button.
		// (3) If server pages exist in the same domain as service pages - jsonp
		
		// [http://local.com/some/client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList(){
						var oAjax = new $Ajax('http://server.com/some/some.php', {
							type: 'jsonp',
							method: 'get',			// If the type is jsonp, it is automatically processed as get (omittable).
							jsonp_charset: 'utf-8',	// The <script> encoding method to use upon request (utf-8 if omitted)
							onload: function(res){	// A callback function to be executed when request is complete
								var response = res.json();
								var welList = $Element('list').empty();
		
								for (var i = 0, nLen = response.length; i < nLen; i++) {
									welList.append($("<li>" + response[i] + "</li>"));
								}
							},
							callbackid: '12345',				// An ID value to use for a callback function (omittable)
							callbackname: 'ajax_callback_fn'	// The parameter name that contains a callback function name to be used in a server ('_callback' if omitted)
						});
						oAjax.request();
					}
				</script>
			</head>
			<body>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [http://server.com/some/some.php]
		<?php
			$callbackName = $_GET['ajax_callback_fn'];
			echo $callbackName."(['First','Second','Third'])";
		?>
	
	@example
		// An example that configures a list by getting data from a server upon click of the 'Get List' button.
		// (4) If server pages exist in the same domain as service pages - flash
		
		// [http://local.com/some/client.html]
		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getList(){
						var oAjax = new $Ajax('http://server.com/some/some.php', {
							type : 'flash',
							method : 'get',			// GET method
							sendheader : false,		// Whether the request headers is transmitted (true if omitted)
							decode : true,			// It is set to false if the encoding in the requested data is not utf-8 (true if omitted).
							onload : function(res){	// A callback function to be executed when request is complete
								$('list').innerHTML = res.text();
							},
						});
						oAjax.request();
					}
				</script>
			</head>
			<body>
				<script type="text/javascript">
					$Ajax.SWFRequest.write("swf/ajax.swf");	// Initializes the flash object before invoking Ajax.
				</script>
				<button onclick="getList(); return false;">Get List</button>
		
				<ul id="list">
		
				</ul>
			</body>
		</html>
		
		// [http://server.com/some/some.php]
		<?php
			echo "<li>First</li><li>Second</li><li>Third</li>";
		?>


	@example
		// (5) XMLHttpRequest Level2 usage example
		// https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html

		<!DOCTYPE html>
		<html>
			<head>
				<title>Ajax Sample</title>
				<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
				<script type="text/javascript" language="javascript" src="lib/jindo.all.js"></script>
				<script type="text/javascript" language="javascript">
					function getData(){
                        var formData = new FormData();          // create FormData
                        formData.append('username', 'John Doe');
                        formData.append('phone', 123456);

                        var oAjax = new jindo.$Ajax('attach.jpg', {
                            type : 'xhr',
                            method : 'post',                    // POST method
                            data : formData,                    // setting up FormData value(in 'data' option, only FormData value can be used)
                            onload : function(res) {
                                var oResponse = res.$value();   // get native XHR response object
                                var blob = new Blob([oResponse.response], { type: 'image/jpeg' });
                                console.log(blob);
                            }
                        });

                        oAjax.$value().repsonseType = "blob";   // set XHR's responseType to "blob"
                        oAjax.request();  // if FormData value setted on 'data' option, it can't be set parameter value in request() method
					}
				</script>
			</head>
			<body>
                ...
			</body>
		</html>
	]]></comment>
    <comment id="constructor_1"><![CDATA[
If possible, use easily applicable configuration objects for testing purposes.
	]]></comment>
	<comment id="request"><![CDATA[
	The request() method transfers Ajax requests to a server. The parameter to be used for making a request can be set in the jindo.$Ajax() object constructor or by using the option() method. 
	If request type is "flash," the <auidoc:see content="jindo.$Ajax.SWFRequest#write"/>() method must be executed in the body element before this method is executed.
	
	@method request
	@syntax oData
	@syntax oData2
	@param {String+} [oData] Data to be sent to the server (available only when the postbody is not "true," the type is not "xhr", the method is not "get" and when not using 'data' option for FormData request)
	@param {Hash+} oData2 Data to be sent to the server
	@return {this} 인스턴스 자신
	@see jindo.$Ajax#option
	@see jindo.$Ajax.SWFRequest#write
	@example
		var ajax = $Ajax("http://www.remote.com", {
		   onload : function(res) {
		      // onload handler
		   }
		});
		
		ajax.request( {key1:"value1", key2:"value2"} );	// Passes the data to be sent to a server in a parameter.
		ajax.request( );
	
	@example
		var ajax2 = $Ajax("http://www.remote.com", {
		   type : "xhr",
		   method : "post",
		   postBody : true
		});
		
		ajax2.request({key1:"value1", key2:"value2"});
		ajax2.request("{key1:\"value1\", key2:\"value2\"}");
	]]></comment>
    <comment id="request_1"><![CDATA[
For the request of the XHR GET method, adds parameters to URL.
	]]></comment>
    <comment id="request_1a"><![CDATA[
If it used FormData object as value of data option, then set data value using FormData object.
	]]></comment>
    <comment id="request_2"><![CDATA[
For xhr, IE conducts cache by itself in a browser when sending to GET to disable cache modification.
	]]></comment>
    <comment id="request_3"><![CDATA[
 * Although addEventListener has been implemented in XMLHttpRequest in Opera version 10.60, it does not function as expected. As a result, only dom1 is supported in Opera.
 * IE 9 also has the same problem as opera.
	]]></comment>
    <comment id="request_4"><![CDATA[
 * The timeout event does not occur in IE 6 because of onreadystatechange being synchronously executed.
 * Therefore, it should be modified to check intervals so that timeout events would normally occur. When and only when it is asynchronous:
	]]></comment>
    <comment id="request_5"><![CDATA[
 * A url for testing
	]]></comment>
    <comment id="isIdle"><![CDATA[
	The isIdle() method checks whether an jindo.$Ajax() object request is currently idle.
	
	@method isIdle
	@return {Boolean} eturns true if it is idle; others returns false.
	@since 1.3.5
	@example
		var ajax = $Ajax("http://www.remote.com",{
		     onload : function(res){
		         // onload handler
		     }
		});
		
		if(ajax.isIdle()) ajax.request();
    ]]></comment>
    <comment id="abort"><![CDATA[
	The abort() method cancels an Ajax request that has been sent to a server. It is used when the response time of an Ajax request is prolonged, or when an Ajax request must be forcibly cancelled.
	
	@method abort
	@remark If the @caution type is "jsonp," the request is not stopped even when the abort is used.
	@return {this} 전송을 취소한 인스턴스 자신
	@example
		var ajax = $Ajax("http://www.remote.com", {
			timeout : 3,
			ontimeout : function() {
				stopRequest();
			}
			onload : function(res) {
				// onload handler
			}
		}).request( {key1:"value1", key2:"value2"} );
		
		function stopRequest() {
		    ajax.abort();
		}
    ]]></comment>
	<comment id="url"><![CDATA[
	The url() method returns the url.
	
	@method url
	@return {String} The URL value
	@since 2.0.0
	]]></comment>
	<comment id="url2"><![CDATA[
	The url() method changes the url.
	
	@method url
	@param {String+} url
	@return {this} 인스턴스 자신
	@since 2.0.0
	]]></comment>
    <comment id="option"><![CDATA[
	The option() method getsthe information about the Ajax request options defined in the option object (oOption) attribute of the jindo.$Ajax() object.
	
	@method option
	@param {String+} sName The name of the attribute of the option object
	@return {Variant} The value corresponding to the option
	@throws {jindo.$Except.CANNOT_USE_OPTION} The exception occurs when given option is inappropriate for the type.
	]]></comment>
    <comment id="option2"><![CDATA[
	The option() method sets the information about the Ajax request options defined in the option object (oOption) attribute of the jindo.$Ajax() object. To configure the Ajax request option, enter the name and the value directly or enter an object which has the name and value as an element as a parameter. One or more pieces of information can be configured simultaneously when entering an object that has a name and a value as elements.
	
	@method option
	@syntax sName, vValue
	@syntax oOption
	@param {String+} sName The name of the attribute of the option object
	@param {Variant} vValue The new value of the option attribute to be set
	@param {Hash+} oOption The object of which attribute value is defined
	@return {this} 인스턴스 자신
	@throws {jindo.$Except.CANNOT_USE_OPTION} The exception occurs when given option is inappropriate for the type.
	@example
		var ajax = $Ajax("http://www.remote.com", {
			type : "xhr",
			method : "get",
			onload : function(res) {
				// onload handler
			}
		});
		
		var request_type = ajax.option("type");					// Returns xhr, a type.
		ajax.option("method", "post");							// Configures method to post.
		ajax.option( { timeout : 0, onload : handler_func } );	// Configures timeout to 0 and onload to handler_func.
    ]]></comment>
    <comment id="header"><![CDATA[
	header() 메서드는 Ajax 요청에서 사용할 HTTP 요청 헤더를 가져온다. 헤더에서 특정 속성 값을 가져오려면 속성의 이름을 파라미터로 입력한다.
	
	@method header
	@param {String+} vName Header name
	@return {String} Returns a string.
	@example
		var customheader = ajax.header("myHeader"); 		// The value of myHeader in the HTTP request header
    ]]></comment>
    <comment id="header2"><![CDATA[
	header() 메서드는 Ajax 요청에서 사용할 HTTP 요청 헤더를 설정한다. 헤더를 설정하려면 헤더의 이름과 값을 각각 파라미터로 입력하거나 헤더의 이름과 값을 원소로 가지는 객체를 파라미터로 입력한다. 객체를 파라미터로 입력하면 하나 이상의 헤더를 한 번에 설정할 수 있다.<br>
    (* On IE8, 9 CORS request using XDomainRequest object can not be used this method due to XDomainRequest object does not have any method to set request header value.)
	
	@method header
	@syntax sName, sValue
	@syntax oHeader
	@param {String+} sName Header name
	@param {String+} sValue The header value to be set
	@param {Hash+} oHeader The object in which one or more header values are defined
	@return {this} The instance its self, which header value is setted up
	@throws {jindo.$Except.CANNOT_USE_OPTION} exception occurs when using the header method for jsonp type.
	@example
		ajax.header( "myHeader", "someValue" );				// Sets the myHeader of the HTTP request header to someValue.
		ajax.header( { anotherHeader : "someValue2" } );	// Sets the anotherHeader of the HTTP request header to someValue2.
    ]]></comment>
    <comment id="value"><![CDATA[
	$value() return native XHR object

	@method $value
	@return {Object} Native XHR object wrapped by jindo.$Ajax()
	@see jindo.$Ajax
	@example
		var oAjax = new $Ajax("http://www.some.com/api.json");
		oAjax.$value(); // Native XHR object
    ]]></comment>
    <comment id="response_desc"><![CDATA[
	Creates the jindo.$Ajax.Response() object. The jindo.$Ajax.Response() object is created after the jindo.$Ajax() object has completed handling the request of the request() method. When the jindo.$Ajax() object is created, the jindo.$Ajax.Response() object is sent as a parameter of the callback function set in the onload attribute.

	@class jindo.$Ajax.Response
	@keyword ajaxresponse, ajax, response
    ]]></comment>
    <comment id="response"><![CDATA[
	Provides useful functionalities to get or use the response data by wrapping the Ajax response object.
	
	@constructor
	@param {Hash+} oReq Request object
	@see jindo.$Ajax
    ]]></comment>
    <comment id="response_xml"><![CDATA[
	xml() method returns the response in an XML object. It is similar to the responseXML attribute of XHR.xml().
	
	@method xml
	@return {Object} A response XML object 
	@see https://developer.mozilla.org/en/XMLHttpRequest XMLHttpRequest - MDN Docs
	@example
		// some.xml
		<data>
			<li>First</li>
			<li>Second</li>
			<li>Third</li>
		</data>
		
		// client.html
		var oAjax = new $Ajax('some.xml', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				var elData = cssquery.getSingle('data', res.xml());	// Returns the response in an XML object.
				$('list').innerHTML = elData.firstChild.nodeValue;
			},
		}).request();
    ]]></comment>
    <comment id="response_text"><![CDATA[
	The text() method returns a response in a string It is similar to the responseText of XHR.
	
	@method text
	@return {String} A response character string
	@see https://developer.mozilla.org/en/XMLHttpRequest XMLHttpRequest - MDN Docs
	@example
		// some.php
		<?php
			echo "<li>First</li><li>Second</li><li>Third</li>";
		?>
		
		// client.html
		var oAjax = new $Ajax('some.xml', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				$('list').innerHTML = res.text();	// Returns the response in a character string.
			},
		}).request();
    ]]></comment>
    <comment id="response_status"><![CDATA[
	The status() method returns the HTTP response code. Refer to the HTTP response code table.
	
	@method status
	@return {Numeric} A response code
	@see http://www.w3.org/Protocols/HTTP/HTRESP.html HTTP Status codes - W3C
	@example
		var oAjax = new $Ajax('some.php', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				if(res.status() == 200){	// Checks HTTP response code.
					$('list').innerHTML = res.text();
				}
			},
		}).request();
    ]]></comment>
    <comment id="response_readyState"><![CDATA[
	The readyState() method returns the response state (readyState).
	
	@method readyState
	@return {Numeric} The readyState value
		@return .0 When the request has not been initialized. (UNINITIALIZED)
		@return .1 No request has been made even though the request option has been set. (LOADING)
		@return .2 A request has been sent and being handled. The response header can be acquired in this state. (LOADED)
		@return .3 The response is being processed and partial response data is acquired. (INTERACTIVE)
		@return .4 All of the response data have been received and the communication has been completed. (COMPLETED)
	@example
		var oAjax = new $Ajax('some.php', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				if(res.readyState() == 4){	// Checks the readyState of a response.
					$('list').innerHTML = res.text();
				}
			},
		}).request();
    ]]></comment>
    <comment id="response_json"><![CDATA[
	The json() method returns the response in a JSON object. Automatically converts the response character string into a JSON object and returns it. Returns an empty object if an error occurs during the conversion.
	
	@method json
	@return {Object} The JSON object
	@throws {jindo.$Except.PARSE_ERROR} The exception occurs when an error occurs while parsing json.
	@example
		// some.php
		<?php
			echo "['First', 'Second', 'Third']";
		?>
		
		// client.html
		var oAjax = new $Ajax('some.php', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				var welList = $Element('list').empty();
				var jsonData = res.json();	// Returns the response in a JSON object.
		
				for(var i = 0, nLen = jsonData.length; i < nLen; i++){
					welList.append($("<li>" + jsonData[i] + "</li>"));
				}
			},
		}).request();
    ]]></comment>
    <comment id="response_header"><![CDATA[
	The header() method retrieves the response header.
	
	@method header
	@syntax sName
	@param {String+} [sName] The name of the response header to be retrieved. Returns the entire header if no parameter is entered.
	@return {String | Object} Returns the corresponding header value (String) or the entire header (Object)

	@example
		var oAjax = new $Ajax('some.php', {
			type : 'xhr',
			method : 'get',
			onload : function(res){
				res.header("Content-Length")	// Returns the value of "Content-Length" from the response header.
			},
		}).request();
    ]]></comment>
    <comment id="response_value"><![CDATA[
	$value() return native XHR response object.

	@method $value
	@return {Object} XHR response object which is wrapped by jindo.$Ajax.Response()
	@see jindo.$Ajax
	@example
		var oAjax = new $Ajax("http://www.some.com/api.json", {
		    onload: function(res) {
                res.$value(); // return native XHR response object
		    }).request();
    ]]></comment>
</comments>
