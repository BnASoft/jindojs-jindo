<comments name="hash">
  <comment id="title"><![CDATA[
	@fileOverview A file to define the constructor and methods of the jindo.$H() object
	@name hash.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	The jindo.$H() object implements hashes, enumerated arrays of keys and values, and provides various methods to handle Hash.
	
	@class jindo.$H
	@keyword hash
  ]]></comment>
  <comment id="constructor"><![CDATA[
	Creates the jindo.$H() object.
	
	@constructor
	@param {Hash+} oHashObject An object to be created as Hash
	@example
		var h = $H({one:"first", two:"second", three:"third"});
  ]]></comment>
  <comment id="sign_value"><![CDATA[
	The $value() method returns a hash as an object.
	
	@method $value
	@return {Object} An object in which a hash is stored
  ]]></comment>
  <comment id="sign_"><![CDATA[
	@description The $() method returns a value corresponding to a key.
	
	@method $
	@param {String+|Numeric} sKey Hash key
	@return {Variant} A value corresponding to a key
	@example
		var woH = $H({one:"first", two:"second", three:"third"});
		
		// In the event of returning a value
		var three = woH.$("three");
		// Result : three = "third"
  ]]></comment>
  <comment id="sign2_"><![CDATA[
	The $() method sets the value of the key with the specified value.
	
	@method $
	@syntax sKey, vValue
	@syntax oKeyAndValue
	@param {String+ | Numeric} sKey Hash key
	@param {Variant} vValue A value to set
	@param {Hash+} oKeyAndValue An object consisting of key and value
	@return {this} 인스턴스 자신
	@example
		var woH = $H({one:"first", two:"second"});
		
		// In the event of setting a value
		woH.$("three", "third");
		// Result : woH => {one:"first", two:"second", three:"third"}
  ]]></comment>
  <comment id="length"><![CDATA[
	The length() method returns the size of the hash object.
	
	@method length
	@return {Numeric} Hash size
	@example
		var woH = $H({one:"first", two:"second"});
		woH.length(); // Result : 2
  ]]></comment>
  <comment id="forEach"><![CDATA[
	The forEach() method executes the callback function while traversing all the elements of hash. At this time, the key and value of the hash object and the original hash object are entered as parameters of the callback function. Its behavior is similar to that of the forEach() method of the jindo.$A() object. $H.Break() and $H.Continue() are available.
	
	@method forEach
	@param {Function+} fCallback The callback function to be executed while traversing the hash. The callback function has key, value, and object as its parameters.<br>
		<ul class="disc">
			<li>The value represents the value of an element.</li>
			<li>The key represents the key of an element.</li>
			<li>The object represents the hash itself.</li>
		</ul>
	@param {Variant} [oThis] An object that will be used as the execution context of the this keyword in the callback function when the callback function is the method of the object
	@return {this} 인스턴스 자신
	@see jindo.$H#map
	@see jindo.$H#filter
	@see jindo.$A#forEach
	@example
		function printIt(value, key, object) {
		   document.write(key+" => "+value+" <br>");
		}
		$H({one:"first", two:"second", three:"third"}).forEach(printIt);
  ]]></comment>
  <comment id="filter"><![CDATA[
	The filter() method executes the callback function while traversing all elements of the hash, collects the elements for which the callback function returns true, and returns a new jindo.$H() object. Its behavior is similar to that of the filter() method of the jindo.$A() object. $H.Break() and $H.Continue() are available.
	
	@method filter
	@param {Function+} fCallback The callback function to be executed while traversing the hash. The callback function must return a Boolean value. The element that returns true and will becomes an element of new hash. The callback function has key, value and object as its parameters.<br>
		<ul class="disc">
			<li>The value represents the value of an element.</li>
			<li>The key represents the key of an element.</li>
			<li>The object represents the hash itself.</li>
		</ul>
	@param {Variant} [oThis] An object that will be used as the execution context of the this keyword in the callback function when the callback function is the method of the object
	@return {jindo.$H} A new jindo.$H() object that consists of elements for which the return value of the callback function is true
	@see jindo.$H#forEach
	@see jindo.$H#map
	@see jindo.$A#filter
	@example
		var ht=$H({one:"first", two:"second", three:"third"})
		
		ht.filter(function(value, key, object){
			return value.length < 5;
		})
		
		// Result
		// one:"first", three:"third"
  ]]></comment>
  <comment id="map"><![CDATA[
	The map() method executes the callback function while traversing all elements of the hash and configures the result of executing the callback function to the elements of the array. Its behavior is similar to that of the map() method of the jindo.$A() object. $H.Break() and $H.Continue() are available.
	
	@method map
	@param {Function+} fCallback The callback function to be executed while traversing the hash. Resets the value that has been returned from the callback function as the value of the element. The callback function has key, value and object as its parameters.<br>
		<ul class="disc">
			<li>The value represents the value of an element.</li>
			<li>The key represents the key of an element.</li>
			<li>The object represents the hash itself.</li>
		</ul>
	@param {Variant} [oThis] An object that will be used as the execution context of the this keyword in the callback function when the callback function is the method of the object
	@return {jindo.$H} A new jindo.$H() object to which the result of executing the callback function has been applied
	@see jindo.$H#forEach
	@see jindo.$H#filter
	@see jindo.$H#map
	@example
		function callback(value, key, object) {
		   var r = key+"_"+value;
		   document.writeln (r + "<br />");
		   return r;
		}
		
		$H({one:"first", two:"second", three:"third"}).map(callback);
  ]]></comment>
  <comment id="add"><![CDATA[
	The add() method adds a value to hash. It specifies the key to which the value will be added as a parameter. If the specified key already has a value, it changes that value to the specified one.
	
	@method add
	@param {String+ | Numeric} sKey A key to which a value will be added or changed
	@param {Variant} vValue A value to be added to the key
	@return {this} 값을 추가한 인스턴스 자신
	@see jindo.$H#remove
	@example
		var woH = $H();
		// Adds an element of which the key is 'foo' and the value is 'bar.'
		woH.add('foo', 'bar');
		
		// Changes the value of the element with the 'foo' key to 'bar2.'
		woH.add('foo', 'bar2');
  ]]></comment>
  <comment id="remove"><![CDATA[
	The remove() method removes the element of the specified key. If no corresponding element exists, no execution is made.
	
	@method remove
	@param {String+ | Numeric} sKey sKey The key of the element to be removed
	@return {Variant} Removed value
	@see jindo.$H#add
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.remove ("two");
		// A Hash table for h {one:"first", three:"third"}
  ]]></comment>
  <comment id="search"><![CDATA[
	The search() method returns the key of the element which has the value specified as a parameter in the hash.
	
	@method search
	@param {Variant} sValue The value to search for
	@return {Variant} The key (String) of the element that has the value. Returns false if no elements that have the specified value exist.
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.search ("second"); // two
		h.search ("fist"); // false
  ]]></comment>
  <comment id="hasKey"><![CDATA[
	The hasKey() method checks whether hash has any given key.
	
	@method hasKey
	@param {String+ | Numeric} sKey The key to search for
	@return {Boolean} Returns whether the key exists. If it exists, returns true; otherwise, returns false.
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.hasKey("four"); // false
		h.hasKey("one"); // true
  ]]></comment>
  <comment id="hasValue"><![CDATA[
	The hasValue() method checks whether hash has any given value.
	
	@method hasValue
	@param {Variant} vValue A value to search for the hash
	@return {Boolean} Returns whether the value exists. If it exists, returns true; otherwise, returns false.
  ]]></comment>
  <comment id="sort"><![CDATA[
	sort() 메서드는 값을 기준으로 해시의 원소를 오름차순 정렬한다.
	다만, 실제 값이 변경되는 것이 아니라 $H#forEach을 사용해야지만
	정렬된 결과를 사용할 수 있다.
	
	@method sort
	@param {Function} [sortFunc] 직접 정렬할 수 있도록 함수를 넣을 수 있다.
		@param {Variant} [sortFunc.preVal] 앞의 값
		@param {Variant} [sortFunc.foreVal] 뒤의 값
		
	@return {this} 원소를 정렬한 인스턴스 자신
	@see jindo.$H#ksort
	@see jindo.$H#forEach
	@example
		var h = $H({one:"하나", two:"둘", three:"셋"});
		h.sort ();
		h.forEach(function(v){
			//둘
			//셋
			//하나
		});
	@example
		var h = $H({one:"하나", two:"둘", three:"셋"});
		h.sort(function(val, val2){
			return val === val2 ? 0 : val < val2 ? 1 : -1;
		});
		h.forEach(function(v){
			//하나
			//셋
			//둘
		});
  ]]></comment>
  <comment id="ksort"><![CDATA[
	ksort() 메서드는 키를 기준으로 해시의 원소를 오름차순 정렬한다.
	다만, 실제 값이 변경되는 것이 아니라 $H#forEach을 사용해야지만
	정렬된 결과를 사용할 수 있다.
	
	@method ksort
	@param {Function} [sortFunc] 직접 정렬할 수 있도록 함수를 넣을 수 있다.
		@param {Variant} [sortFunc.preKey] 앞의 키
		@param {Variant} [sortFunc.foreKey] 뒤의 키
	@return {this} 원소를 정렬한 인스턴스 자신
	@see jindo.$H#sort
	@see jindo.$H#forEach
	@example
		var h = $H({one:"하나", two:"둘", three:"셋"});
		h.ksort ();
		h.forEach(function(v){
			//하나
			//셋
			//둘
		});
	@example
		var h = $H({one:"하나", two:"둘", three:"셋"});
		h.ksort (function(key, key2){
			return key === key2 ? 0 : key < key2 ? 1 : -1;
		});
		h.forEach(function(v){
			//둘
			//셋
			//하나
		});	
  ]]></comment>
  <comment id="keys"><![CDATA[
	The keys() method returns an array of a hash key.
	
	@method keys
	@return {Array} An array of a hash key
	@see jindo.$H#values
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.keys ();
		// ["one", "two", "three"]
  ]]></comment>
  <comment id="values"><![CDATA[
	The values() method returns an array of a hash value.
	
	@method values
	@return {Array} An array of a hash value
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.values();
		// ["first", "second", "third"]
  ]]></comment>
  <comment id="toQueryString"><![CDATA[
	The toQueryString() method converts hash in the query string format.
	
	@method toQueryString
	@return {String} A query string that converts hash
	@see http://en.wikipedia.org/wiki/Querystring Query String - Wikipedia
	@example
		var h = $H({one:"first", two:"second", three:"third"});
		h.toQueryString();
		// "one=first&two=second&three=third"
  ]]></comment>
  <comment id="empty_1"><![CDATA[
	The empty() method empties hash.
	
	@method empty
	@return {this} 비워진 인스턴스 자신
	@example
		var hash = $H({a:1, b:2, c:3});
		// hash => {a:1, b:2, c:3}
		
		hash.empty();
		// hash => {}
  ]]></comment>
  <comment id="break"><![CDATA[
	The Break() method stops the loop of forEach(), filter() and map() methods. This structure generates an exception internally by force, and thus it may not be operated normally if this method is executed in the "try - catch" area.
	
	@method Break
	@static
	@see jindo.$H#Continue
	@see jindo.$H#forEach
	@see jindo.$H#filter
	@see jindo.$H#map
	@example
		$H({a:1, b:2, c:3}).forEach(function(v,k,o) {
		  ...
		  if (k == "b") $H.Break();
		   ...
		});
  ]]></comment>
  <comment id="continue"><![CDATA[
	The Continue() method does not execute the rest of the commands in the loop of forEach(), filter(), and map() methods, and skips to the next loop. This structure generates an exception internally by force, and thus it may not be operated normally if this method is executed in the "try - catch" area.
	
	@method Continue
	@static
	@see jindo.$H#Break
	@see jindo.$H#forEach
	@see jindo.$H#filter
	@see jindo.$H#map
	@example
		$H({a:1, b:2, c:3}).forEach(function(v,k,o) {
		   ...
		   if (v % 2 == 0) $H.Continue();
		   ...
		});
  ]]></comment>
</comments>
