<comments name="array.extend">
  <comment id="title"><![CDATA[
	@fileOverview A file to define the extended method of a jindo.$A() object
	@name array.extend.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="map"><![CDATA[
	The map() method executes the callback function while traversing all elements of the hash and configures the result of executing the callback function to the elements of the array.
	
	@method map
	@param {Function+} fCallback The callback function to be executed while traversing elements. It reconfigures the value returned by the callback function as the corresponding to the element. The callback function has value, index, and array as its parameter. $A.Break() and $A.Continue() can be used.<br>
		<ul class="disc">
			<li>The value represents the value of an element that array has.</li>
			<li>The index represents the index of an element.</li>
			<li>The array represents an array itself.</li>
		</ul>
	@param {Variant} [oThis] An object that will be used as the execution context of the this keyword in the callback function when the callback function is the method of the object
	@return {jindo.$A} The jindo.$A() object that reflects the execution result of a callback function
	@import core.$A[Break, Continue]
	@see jindo.$A#forEach
	@see jindo.$A#filter
	@example
		var waZoo = $A(["zebra", "giraffe", "bear", "monkey"]);
		
		waZoo.map(function(value, index, array) {
			return (index+1) + ". " + value;
		});
		// Result : [1. zebra, 2. giraffe, 3. bear, 4. monkey]
	@example
		var waArray = $A([1, 2, 3]);
		
		waArray.map(function(value, index, array) {
			return value + 10;
		});
	@example
		var waArray = $A([1, 2, 3]);
		var Callback = {
			"key" : 1,
			"test" : function(value, index, array){
				return this.value + this.key;
			}
		}
		
		waArray.map(Callback.test, Callback);
		
		document.write(waArray.$value());
		// Result : 1, 2, 3 (If this object is specified)
  ]]></comment>
  <comment id="filter"><![CDATA[
	The filter() method executes the callback function while traversing all elements of the hash, collects the elements for which the callback function returns true, and returns a new jindo.$A() object.
	
	@method filter
	@param {Function+} fCallback The callback function to be executed while traversing an array. The callback function must return a Boolean value. A element that returns true will belong to a new array. $A.Break() and $A.Continue() can be used.<br>
		<ul class="disc">
			<li>The value represents the value of an element that array has.</li>
			<li>The index represents the index of an element.</li>
			<li>The array represents an array itself.</li>
		</ul>
	@param {Variant} [oThis] An object that will be used as the execution context of the this keyword in the callback function when the callback function is the method of the object
	@return {jindo.$A} A new jindo.$A() object that consists of elements for which the return value of the callback function is true
	@import core.$A[Break, Continue]
	@see jindo.$A#forEach
	@see jindo.$A#map
	@example
		var arr = $A([1,2,3,4,5]);
		
		// Filtering function
		function filterFunc(value, index, array) {
			if (value > 2) {
				return true;
			} else {
				return false;
			}
		}
		
		var newArr = arr.filter(filterFunc);
		
		document.write(arr.$value()); 		// Result: [1,2,3,4,5]
		document.write(newArr.$value()); 	// Result: [3,4,5]
	@example
		var waArray = $A([1, 2, 3]);
		var Callback = {
			"key" : 1,
			"test" : function(value, index, array){
				return this.value > this.key;
			}
		}
		
		waArray.filter(Callback.test, Callback);
		
		document.write(waArray.$value());
		// Result:  2, 3 (if this object is specified)
  ]]></comment>
  <comment id="every"><![CDATA[
	The every() method checks whether every element of an array satisfies the conditions configured in a callback function while traversing an array. If every element returns true in the callback function, returns true; otherwise, returns false. If a callback function returns false even once during execution, it immediately returns false.
	
	@method every
	@param {Function+} fCallback The callback function to be executed while traversing an array. The callback function must return a Boolean value. $A.Break() and $A.Continue() cannot be used; you can exit a loop with a return value.<br>
		<ul class="disc">
			<li>The value represents the value of an element that array has.</li>
			<li>The index represents the index of an element.</li>
			<li>The array represents an array itself.</li>
		</ul>
	@param {Variant} [oThis] An object that will be used as the execution context of the this keyword in the callback function when the callback function is the method of the object
	@return {Boolean}	Returns true if every return value of a callback function is true; otherwise, returns false.
	@see jindo.$A#some
	@example
		function isBigEnough(value, index, array) {
			return (value >= 10);
		}
		
		var try1 = $A([12, 5, 8, 130, 44]).every(isBigEnough);		// Result : false
		var try2 = $A([12, 54, 18, 130, 44]).every(isBigEnough);	// Result : true
	@example
		var waArray = $A([1, 2, 3]);
		var Callback = {
			"key" : 1,
			"test" : function(value, index, array){
				return this.value > this.key;
			}
		}
		
		waArray.every(Callback.test, Callback);
		// Result :  false (if this object is specified)
  ]]></comment>
  <comment id="some"><![CDATA[
	The some() method checks whether any elements of an array satisfies the conditions configured in a callback function while traversing an array. If any element satisfies a condition, returns true; otherwise, returns false. If a callback function returns true even once during execution, it immediately returns true.
	
	@method some
	@param {Function+} fCallback The callback function to be executed while traversing an array. The callback function must return a Boolean value. $A.Break() and $A.Continue() cannot be used; you can exit a loop with a return value.<br>
		<ul class="disc">
			<li>The value represents the value of an element that array has.</li>
			<li>The index represents the index of an element.</li>
			<li>The array represents an array itself.</li>
		</ul>
	@param {Variant} [oThis] An object that will be used as the execution context of the this keyword in the callback function when the callback function is the method of the object
	@return {Boolean} Returns false if every return value of a callback function is false; otherwise, returns true.
	@see jindo.$A#every
	@example
		function twoDigitNumber(value, index, array) {
			return (value >= 10 && value < 100);
		}
		
		var try1 = $A([12, 5, 8, 130, 44]).some(twoDigitNumber);	// Result : true
		var try2 = $A([1, 5, 8, 130, 4]).some(twoDigitNumber);		// Result : false
	@example
		var waArray = $A([1, 2, 3]);
		var Callback = {
			"key" : 1,
			"test" : function(value, index, array){
				return this.value > this.key;
			}
		}
		
		waArray.some(Callback.test, Callback);
		// Result :  true (if this object is specified)
  ]]></comment>
  <comment id="refuse"><![CDATA[
	The refuse() method creates the jindo.$A() object by excluding values such as input parameters from an array. Multiple values are allowed.
	
	@method refuse
	@param {Variant} vValue* The 1st~Nth value to be excluded from an array
	@return {jindo.$A} A new jindo.$A() object in which specific values are excluded from an array
	@example
		var arr = $A([12, 5, 8, 130, 44]);
		
		var newArr1 = arr.refuse(12);
		
		document.write(arr);		// Result : [12, 5, 8, 130, 44]
		document.write(newArr1);	// Result : [5, 8, 130, 44]
		
		var newArr2 = newArr1.refuse(8, 44, 130);
		
		document.write(newArr1);	// Result : [5, 8, 130, 44]
		document.write(newArr2);	// Result : [5]
  ]]></comment>
  <comment id="unique"><![CDATA[
	The unique() method deletes duplicate elements from an array.
	
	@method unique
	@return {this} 중복되는 원소를 제거한 인스턴스 자신
	@example
		var arr = $A([10, 3, 2, 5, 4, 3, 7, 4, 11]);
		
		arr.unique(); // Result : [10, 3, 2, 5, 4, 7, 11]
  ]]></comment>
  <comment id="unique_1"><![CDATA[
  Deletes duplicate elements.
  ]]></comment>
</comments>
