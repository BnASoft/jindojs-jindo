<comments name="patch">
  <comment id="title"><![CDATA[
	@fileOverview A file to provide compatibility of 2.x lower versions.
	@name patch.js
	@author NAVER Ajax Platform
  ]]></comment>
    <comment id="version"><![CDATA[
    Get the Jindo's version.

    @property jindo.$Jindo().version
    @see jindo.VERSION
    ]]></comment>
    <comment id="version_1"><![CDATA[
    Get the Jindo's version.

    @property jindo.$Jindo().version
    @see jindo.VERSION
    ]]></comment>
    <comment id="event_element"><![CDATA[
	The element in which an event occurred (replaced srcElement)

	@deprecated In version 2.8.3, it has been changed to $Event#srcElement.
	@property element
	@type Element
	@filter desktop
	@see jindo.$Event#srcElement
    ]]></comment>
    <comment id="event_pos"><![CDATA[
	Add 'layerX' and 'layerY' on pos() method's return value.

    @property jindo.$Event().pos().layerX / layerY
	@example
		function eventHandler(evt) {
		   var pos = evt.pos();

           pos.layerX;  // The relative X coordinate to the element in which the event occurred
           pos.layerY;  // The relative Y coordinate to the element in which the event occurred
		}
  ]]></comment>

    <comment id="attach"><![CDATA[
	The attach() method registers a function as the event handler of a specific element.

	@method attach
	@syntax elElement, sEvent, bUseCapture
	@syntax vElement, sEvent, bUseCapture
	@syntax sElement, sEvent, bUseCapture
	@remark If it is bound to the jindo.$Fn() object and the return value is false, the Internet Explorer blocks the basic function. Therefore, do not use it.<br>
		There are other limitations as follows:<br>
		<ul class="disc">
			<li>Do not use the prefix on for event names.</li>
			<li>Use the mouse wheel scroll event with mousewheel.</li>
			<li>Additionally, the domready, mouseenter, mouseleave, and mousewheel events can be used.</li>
		</ul>
	@param {Element} elElement An element that is to allocate the event handler
	@param {Array | $A} vElement An array consisting of elements to which the event handler will be allocated
	@param {String} sElement id of an element that allocates the event handler
	@param {String} sEvent Event type
	@param {Boolean} [bUseCapture=false] Whether to use capturing (1.4.2~2.0.0 버전까지  지원). Enter true to use capturing.
	@return {jindo.$Fn} The created jindo.$Fn() object
	@deprecated In version 2.0.0, it has been changed to $Element#attach. Code was removed on v2.11.0.
	@see jindo.$Fn#detach
	@example
		var someObject = {
		    func : function() {
				// code here
		   }
		}

		// In the event of attaching a click event handler to one single element
		$Fn(someObject.func, someObject).attach($("test"),"click");

		// When registering a click event handler to multiple elements
		// When the array is entered as the first parameter as shown below, the event handler is registered to all the elements.
		$Fn(someObject.func, someObject).attach($$(".test"),"click");
  ]]></comment>
    <comment id="attach_1"><![CDATA[
DOMMouseScroll is not working in Internet Explorer 9.
  ]]></comment>
    <comment id="attach_2"><![CDATA[
An error is thrown because the domready event is not executed within iframe.
  ]]></comment>
    <comment id="detach"><![CDATA[
	The detach() method detaches the event handlers from elements.

	@method detach
	@param {Element} elElement An element that will unregister the event element
	@param {String} sEvent Event type. The "on" prefix must not be used as part of an event name.
	@param {Boolean} [bUseCapture=false] Whether to use capturing (1.4.2~2.0.0 버전까지  지원). Enter true to use capturing.
	@return {jindo.$Fn} The created jindo.$Fn() object
	@see jindo.$Fn#attach
	@deprecated In version 2.0.0, it has been changed to $Element#detach. Code was removed on v2.11.0.detach
	@example
		var someObject = {
		    func : function() {
				// code here
		   }
		}

		var fpFn = $Fn(someObject.func, someObject);
		fpFn.attach($("test"),"click");
		// In the event of detaching a click event handler from one single element
		// The detach function can be used within the same $Fn instance in which the attach function was executed.
		fpFn.detach($("test"),"click");

		var fpFn = $Fn(someObject.func, someObject);
		fpFn.attach($$(".test"),"click");
		// In the event of detaching a click event from multiple elements.
		// If an array is given as a first parameter as you see below, an event handler is attached to every corresponding element.
		// The detach function can be used within the same $Fn instance in which the attach function was executed.
		fpFn.detach($$(".test"),"click");
  ]]></comment>
</comments>