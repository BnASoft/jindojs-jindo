<comments name="array">
  <comment id="title"><![CDATA[
	@fileOverview A file to define the constructor and method of a jindo.$A() object
	@name array.js
	@author NAVER Ajax Platform
  ]]></comment>
  <comment id="desc"><![CDATA[
	The jindo.$A() object provides methods to handle arrays in an easy way. It wraps the original array object upon creating an object. In this context, wrapping means adding a new extended functionality to the original function by wrapping the JavaScript functions.
	
	@class jindo.$A
	@keyword array
  ]]></comment>
  <comment id="constructor"><![CDATA[
	Creates a jindo.$A() object.
	
	@constructor
	@param {Null | Undefined | Array+ | ArrayStyle} [vArray] An empty array is allocated if it is Void, Null, or Undefined.
	@return {jindo.$A} The jindo.$A() object
	@example
		var zoo = ["zebra", "giraffe", "bear", "monkey"];
		var waZoo = $A(zoo); // Creates and returns a jindo.$A() object that wraps ["zebra", "giraffe", "bear", "monkey"].
  ]]></comment>
  <comment id="toString"><![CDATA[
	The toString() method converts an internal array into a string. The Array.toString() method in JavaScript is used.
	
	@method toString
	@return {String} A string to convert an internal array
	@See https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/toString array.toString() - MDN Docs
	@example
		var zoo = ["zebra", "giraffe", "bear", "monkey"];
		$A(zoo).toString();
		// Result : zebra,giraffe,bear,monkey
  ]]></comment>
  <comment id="get"><![CDATA[
	The get() method searches the element value of an array by index.
	
	@method get
	@param {Numeric} nIndex The index of an element to search for. The index numbers begin with 0.
	@return {Variant} The element value of the corresponding index in an array
	@since 1.4.2
	@example
		var zoo = ["zebra", "giraffe", "bear", "monkey"];
		var waZoo = $A(zoo);
		
		// Searches element values.
		waZoo.get(1); // Result : giraffe
		waZoo.get(3); // Result : monkey
  ]]></comment>
  <comment id="set"><![CDATA[
	The set() method adds a value to a array.
	
	@method set
	@param {Numeric} nIndex Index
	@param {Variant} vValue Various values
	@return {this} 해당 인덱스의 값을 지정한 인스턴스 자신
	@since 2.0.0
	@example
		var zoo = ["zebra", "giraffe", "bear", "monkey"];
		var waZoo = $A(zoo);
		
		// Configures a value
		waZoo.set(1,"pig"); // Result : $A(["zebra", "pig", "bear", "monkey"]);
  ]]></comment>
  <comment id="length"><![CDATA[
	The length() method searches the size of an internal array like length attribute.
	
	@method length
	@return {Number} Returns the size of an internal array.
	@example
		var zoo = ["zebra", "giraffe", "bear", "monkey"];
		
		// Search the size of an array
		$A(zoo).length(); // Result : 4
  ]]></comment>
  <comment id="length2"><![CDATA[
	The length() method specifies the size of an internal array like length attribute.
	
	@method length
	@syntax nLen
	@syntax nLen2, vValue
	@param {Numeric} nLen The size of an array. If it is less than the size of an existing array, elements after nLen-th position are removed; if it is greater than the size of an existing array, it is not applicable.
	@param {Numeric} nLen2 The size of an array. If it is less than the size of an existing array, elements after nLen2-th position are removed; if it is greater than the size of an existing array, the expanded space is filled with the vValue parameter value.
	@param {Variant} vValue An initial value to be used when adding a new element
	@return {this} 내부 배열의 크기를 변경한 인스턴스 자신
	@example
		var zoo = ["zebra", "giraffe", "bear", "monkey"];
		
		// Specifies the size of an array (if an element is deleted)
		$A(zoo).length(2);
		// Result : ["zebra", "giraffe"]
	@example
		// // Specified the size of an array (if an element is added)
		$A(zoo).length(6, "(Empty)");
		// Result : ["zebra", "giraffe", "bear", "monkey", "(Empty)", "(Empty)"]
		
		$A(zoo).length(5, birds);
		// Result : ["zebra", "giraffe", "bear", "monkey", ["parrot", "sparrow", "dove"]]
  ]]></comment>
  <comment id="has"><![CDATA[
	The has() method returns the existence of an element that has a specific value in an internal array in Boolean format.
	
	@method has
	@param {Variant} vValue A value to search for
	@return {Boolean} Returns true if the same element as a parameter value is found in an array; otherwise, retunrs false.
	@see jindo.$A#indexOf
	@example
		var arr = $A([1,2,3]);
		
		// Searches a value.
		arr.has(3); // Results : true
		arr.has(4); // Results : false
  ]]></comment>
  <comment id="indexOf"><![CDATA[
	The indexOf() method searches an element that has a specific value in an array and returns the index of an element found.
	
	@method indexOf
	@param {Variant} vValue A value to search for
	@return {Numeric} The index of an element found. The index numbers begins with 0. Returns -1 if no element is found.
	@see jindo.$A#has
	@example
		var zoo = ["zebra", "giraffe", "bear"];
		va  r waZoo = $A(zoo);
		
		// Returns an index after searching a value.
		waZoo.indexOf("giraffe"); // 1
		waZoo.indexOf("monkey"); // -1
  ]]></comment>
  <comment id="sign_value"><![CDATA[
	The $value() method returns an internal array.
	
	@method $value
	@return {Array} The original array
	@example
		var waNum = $A([1, 2, 3]);
		waNum.$value(); // Returns [1, 2, 3], the original array.
  ]]></comment>
  <comment id="push"><![CDATA[
	The push() method adds one or more elements inside an array and returns array size.
	
	@method push
	@param {Variant} vValue* A value of the 1st~Nth element to be added
	@return {Numeric} The array size after an element is added in the array
	@see jindo.$A#pop
	@see jindo.$A#shift
	@see jindo.$A#unshift
	@see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push array.push() - MDN Docs
	@example
		var arr = $A([1,2,3]);
		
		// Adds elements.
		arr.push(4);	// Result : 4 is returned. The internal array is changed to [1,2,3,4].
		arr.push(5,6);	// Result : 6 is returned. The internal array is changed to [1,2,3,4,5,6].
  ]]></comment>
  <comment id="pop"><![CDATA[
	The pop() method deletes the last element of an internal array.
	
	@method pop
	@return {Variant} A deleted element
	@see jindo.$A#push
	@see jindo.$A#shift
	@see jindo.$A#unshift
	@see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop array.pop() - MDN Docs
	@example
		var arr = $A([1,2,3,4,5]);
		
		arr.pop(); // Result : 5 is returned. The internal array is changed to [1,2,3,4].
  ]]></comment>
  <comment id="shift"><![CDATA[
	The shift() method moves every element of an internal array forward one space. The first element in the internal array is deleted.
	
	@method shift
	@return {Variant} The first element deleted
	@see jindo.$A#pop
	@see jindo.$A#push
	@see jindo.$A#unshift
	@see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/shift array.shift() - MDN Docs
	@example
		var arr  = $A(['Melon','Grape','Apple','Kiwi']);
		
		arr.shift(); // Result : 'Melon' is returned. The internal array is changed to ["Grape", "Apple", "Kiwi"].
  ]]></comment>
  <comment id="unshift"><![CDATA[
	The unshift() method inserts one or more leading elements in an internal array.
	
	@method unshift
	@param {Variant} vValue* A 1st~Nth value to be inserted
	@return {Numeric} The array size in which an element is added
	@see jindo.$A#pop
	@see jindo.$A#push
	@see jindo.$A#shift
	@see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift array.unshift() - MDN Docs
	@example
		var arr = $A([4,5]);
		
		arr.unshift('c');		// Result : 3 is returned. The internal array is changed to ["c", 4, 5].
		arr.unshift('a', 'b');	// Result : 5 is returned. The internal array is changed to ["a", "b", "c", 4, 5].
  ]]></comment>
  <comment id="forEach"><![CDATA[
	The forEach() method executes the callback function while traversing all elements of hash.
	
	@method forEach
	@param {Function+} fCallback A callback function to be executed while traversing an array. The callback function has value, index, and array as its parameter. $A.Break() and $A.Continue() can be used.<br>
		<ul class="disc">
			<li>The value represents the value of an element that array has.</li>
			<li>The index represents the index of an element.</li>
			<li>The array represents an array itself.</li>
		</ul>
	@param {Variant} [oThis] An object that will be used as the execution context of the this keyword in the callback function when the callback function is the method of the object
	@return {this} 인스턴스 자신
	@import core.$A[Break, Continue]
	@see jindo.$A#map
	@see jindo.$A#filter
	@example
		var waZoo = $A(["zebra", "giraffe", "bear", "monkey"]);
		
		waZoo.forEach(function(value, index, array) {
			document.writeln((index+1) + ". " + value);
		});
		
		// Result :
		// 1. zebra
		// 2. giraffe
		// 3. bear
		// 4. monkey
	@example
		var waArray = $A([1, 2, 3]);
		
		waArray.forEach(function(value, index, array) {
			array[index] += 10;
		});
		
		document.write(waArray.$value());
		// Result : 11, 12, 13 (Increments by 10 within an internal array)
  ]]></comment>
  <comment id="slice"><![CDATA[
	The slice() method extracts the part of an array.
	
	@method slice
	@param {Numeric} nStart The start index to extract. The index numbers begin with 0.
	@param {Numeric} nEnd The index after last element of a string to extract from an array
	@return {jindo.$A} A new jindo.$A() object in which part of an internal array is extracted.<br>If a value of nStart is less than 0 or equal to or greater than a value of nEnd, the jindo.$A() object is returned with an empty array.
	@example
		var arr = $A([12, 5, 8, 130, 44]);
		var newArr = arr.slice(1,3);
		// Returns a jindo.$A() object that wraps [5, 8], the truncated array (no changes made to the original array).
	@example
		var arr = $A([12, 5, 8, 130, 44]);
		var newArr = arr.slice(3,3);
		// Returns a jindo.$A() object that wraps [].
  ]]></comment>
  <comment id="splice"><![CDATA[
	The splice() method deletes the part of an internal array.
	
	@method splice
	@param {Numeric} nIndex	The start index to delete. The index numbers begin with 0.
	@param {Numeric} [nHowMany] The number of elements from which the first element will be deleted.<br>
	If this value and the vValue* parameters are omitted, deletes elements from nth nIndex to the end of the array.<br>
	If a value is specified in the vValue* parameters while this value is specified as 0 or it is not specified as any number, the specified vValue* values are added at the position of nIndex.
	@param {Variant} [vValue*] The 1st~Nth value to be added to the deleted array. The specified value is added to the position of nIndex~(nIndex + N).
	@return {jindo.$A} A new jindo.$A() object wrapping the deleted element.<br>If no element is deleted, returns the jindo.$A() object with an empty array.
	@example
		var arr = $A(["angel", "clown", "mandarin", "surgeon"]);
		
		var removed = arr.splice(2, 0, "drum");
		// An internal array of the arr comprises ["angel", "clown", "drum", "mandarin", "surgeon"] and the drum is added to index 2.
		// An internal array of the removed is [] and no element is deleted.
		
		removed = arr.splice(3, 1);
		// An internal array of the arr comprises ["angel", "clown", "drum", "surgeon"] and the mandarin is deleted.
		// An internal array of the removed has ["mandarin"], the deleted element.
		
		removed = arr.splice(2, 1, "trumpet", "parrot");
		// An internal array of the array comprises ["angel", "clown", "trumpet", "parrot", "surgeon"] and the drum is deleted and a new element is added.
		// An internal array of the removed has ["drum"], the deleted element.
		
		removed = arr.splice(3);
		// An internal array of the arr comprises ["angel", "clown", "trumpet"] and elements from 3 to the end are deleted.
		// An internal array of the removed has ["parrot", "surgeon"], the deleted elements.
  ]]></comment>
  <comment id="shuffle"><![CDATA[
	The shuffle() method randomly shuffles the order of the elements in an array.
	
	@method shuffle
	@return {this} 원소의 순서를 섞은 인스턴스 자신
	@see jindo.$A#reverse
	@example
		var dice = $A([1,2,3,4,5,6]);
		
		dice.shuffle();
		document.write("You get the number " + dice.get(0));
		// Result : A random number in the range of 1 to 6 
  ]]></comment>
  <comment id="reverse"><![CDATA[
	The reverse() method reverses the order of the element in an array.
	
	@method reverse
	@return {this} 원소의 순서를 뒤집은 인스턴스 자신
	@see jindo.$A#shuffle
	@example
		var arr = $A([1, 2, 3, 4, 5]);
		
		arr.reverse(); // Result : [5, 4, 3, 2, 1]
  ]]></comment>
  <comment id="empty_1"><![CDATA[
	The empty() method removes all elements in an array.
	
	@method empty
	@return {this} 모든 원소를 제거한 인스턴스 자신
	@example
		var arr = $A([1, 2, 3]);
		
		arr.empty(); // Result : []
  ]]></comment>
    <comment id="concat"><![CDATA[
	concat() method returns a new array comprised of this array joined with other array(s) and/or value(s).
	
	@method concat
	@param {Variant} vValue* Array tobe joined 1~N value(s).
	@return {this} new $A instance array comprised.
	@see jindo.$A#concat
	@example
		var arr1 = $A([1, 2, 3]);
		var arr2 = $A([4, 5, 6]);
		
		arr1.concat(arr2); // Result : [1, 2, 3, 4, 5, 6]
		arr1.concat(arr2, [7, 8], "JindoJS");  // Result : [1, 2, 3, 4, 5, 6, 7, 8, "JindoJS"]
  ]]></comment>
  <comment id="sort_1"><![CDATA[
	sort() 메서드는 배열 오름차순으로 정렬한다.
	파라메터를 통해 원하는 방법으로 정렬할 수 있다.
	
	@method sort
	@param {Function} [sortFunc] 직접 정렬할 수 있도록 함수를 넣을 수 있다.
		@param {Variant} [sortFunc.preVal] 앞의 값
		@param {Variant} [sortFunc.foreVal] 뒤의 값
	@return {this} 정렬된 $A
	@example
		var arr = $A([2, 3, 1]);
		
		arr.sort(); // 결과 : [1,2,3]
		
	@example
		var arr = $A([2, 3, 1]);
		
		arr.sort(function(v,v1){
			return v < v1
		}); // 결과 : [3,2,1]
  ]]></comment>
  <comment id="break"><![CDATA[
	The Break() method stops the loop of forEach(), filter() and map() methods. This structure generates an exception internally by force, and thus it may not be operated normally if this method is executed in the "try - catch" area.
	
	@method Break
	@static
	@see jindo.$A#Continue
	@see jindo.$A#forEach
	@see jindo.$A#filter
	@see jindo.$A#map
	@example
		$A([1,2,3,4,5]).forEach(function(value,index,array) {
		   // Exits if the value is greater than 4.
		  if (value > 4) $A.Break();
		   ...
		});
  ]]></comment>
  <comment id="continue"><![CDATA[
	The Continue() method does not execute the rest of the commands in the loop of forEach(), filter(), and map() methods, and skips to the next loop. This structure generates an exception internally by force, and thus it may not be operated normally if this method is executed in the "try - catch" area.
	
	@method Continue
	@static
	@see jindo.$A#Break
	@see jindo.$A#forEach
	@see jindo.$A#filter
	@see jindo.$A#map
	@example
		$A([1,2,3,4,5]).forEach(function(value,index,array) {
		   // Does not process if the value is even number.
		  if (value%2 == 0) $A.Continue();
		   ...
		});
  ]]></comment>
</comments>
